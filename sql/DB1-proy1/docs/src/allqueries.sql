-- UNIVERSIDAD DE SAN CARLOS DE GUATEMALA
-- FACULTAD DE INGENIERIA
-- SIST. DE ADMON. DE BASES DE DATOS 1
-- SECCION A+
-- 
-- PROYECTO 1
-- 
-- ERIK VLADIMIR GIRON MARQUEZ
-- 200313492
-- GUATEMALA, ABRIL DE 2007

/**CONSULTA 1*/
/*
DAR EL CARNET, NOMBRE, CARRERA, PLAN, PROMEDIO DE NOTAS Y NUMERO DE CREDITOS APROBADOS DE TODOS LOS ESTUDIANTES QUE HAN CERRADO ALGUNA CARRERA

OBTENER ESTUDIANTE TAL QUE EN CADA CARRERA TAL QUE EN EL PENSUM DE ESA CARRERA NO EXISTA NINGUN CURSO OBLIGATORIO QUE NO EXISTA COMO CURSO GANADO EN LAS ASIGNACIONES Y EXISTA UNA SUMA DE CREDITOS > 250 */
SELECT E.CARNET, E.PRIMER_NOMBRE || ' ' || E.PRIMER_APELLIDO
FROM ESTUDIANTE E, CARRERA C, PLAN PL, ESTUDIANTE_CARR_PROM_EDAD ECPE
WHERE ECPE.CARNET = E.CARNET
AND ECPE.CARRERA = C.CARRERA
AND EXISTS(
	SELECT 1
	FROM CARRERA CA1	
	WHERE CA1.CARRERA = C.CARRERA
	AND EXISTS (
		SELECT 1
		FROM PENSUM PE1		
		WHERE PE1.CARRERA = CA1.CARRERA
		AND OBLIGATORIO = 1
		AND NOT EXISTS(
			SELECT 1
			FROM CURSO CU1
			WHERE CU1.CURSO = PE1.CODIGO
			AND NOT EXISTS(
				SELECT 1
				FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1
				WHERE AS1.CODIGO = CU1.CURSO
				AND AS1.CARNET = E.CARNET
				AND ((PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
						OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
						OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
				)
				AND PE1.PLAN = PL1.PLAN
				AND PE1.CARRERA = PL1.CARRERA
				AND AP1.PLAN = PL1.PLAN
				AND AP1.CARRERA = PL1.CARRERA
				AND AP1.CICLO = AS1.CICLO
				AND AS1.NOTA >= AP1.NOTA_APROBACION
				AND AS1.ZONA >= AP1.ZONA_MINIMA
				AND PL.PLAN = PL1.PLAN
			)
		)
	)
	AND EXISTS(
		SELECT 1
		FROM PENSUM PE1		
		WHERE PE1.CARRERA = CA1.CARRERA
		AND NOT EXISTS(
			SELECT SUM(CREDITOS)
			FROM CURSO CU1
			WHERE CU1.CURSO = PE1.CODIGO
			AND NOT EXISTS(
				SELECT 1
				FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1
				WHERE AS1.CODIGO = CU1.CURSO
				AND AS1.CARNET = E.CARNET
				AND ((PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
						OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
						OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
				)
				AND PE1.PLAN = PL1.PLAN
				AND PE1.CARRERA = PL1.CARRERA
				AND AP1.PLAN = PL1.PLAN
				AND AP1.CARRERA = PL1.CARRERA
				AND AP1.CICLO = AS1.CICLO
				AND AS1.NOTA >= AP1.NOTA_APROBACION
				AND AS1.ZONA >= AP1.ZONA_MINIMA
			)
			HAVING SUM(CREDITOS) > CA1.CREDITOS_CIERRE 
		)
	)	
);



/**CONSULTA 2*/
/*
DAR EL CARNET Y NOMBRE DE LOS ESTUDIANTES QUE NO HAN CERRADO NINGUNA CARRERA

OBTENER ESTUDIANTE TAL QUE EXISTAN  CERO CARRERAS TAL QUE EN EL PENSUM DE ESA CARRERA NO EXISTA NINGUN CURSO OBLIGATORIO QUE NO EXISTA COMO CURSO GANADO EN LAS ASIGNACIONES Y EXISTA UNA SUMA DE CREDITOS > 250 */
SELECT E.CARNET, E.PRIMER_NOMBRE || ' ' || E.PRIMER_APELLIDO
FROM ESTUDIANTE E
WHERE EXISTS(
	SELECT COUNT(DISTINCT CA1.CARRERA)"NUM_CARRERAS_APROBADAS"
	FROM CARRERA CA1	
	WHERE EXISTS (
		SELECT 1
		FROM PENSUM PE1		
		WHERE PE1.CARRERA = CA1.CARRERA
		AND OBLIGATORIO = 1
		AND NOT EXISTS(
			SELECT 1
			FROM CURSO CU1
			WHERE CU1.CURSO = PE1.CODIGO
			AND NOT EXISTS(
				SELECT 1
				FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1
				WHERE AS1.CODIGO = CU1.CURSO
				AND AS1.CARNET = E.CARNET
				AND ((PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
						OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
						OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
				)
				AND PE1.PLAN = PL1.PLAN
				AND PE1.CARRERA = PL1.CARRERA
				AND AP1.PLAN = PL1.PLAN
				AND AP1.CARRERA = PL1.CARRERA
				AND AP1.CICLO = AS1.CICLO
				AND AS1.NOTA >= AP1.NOTA_APROBACION
				AND AS1.ZONA >= AP1.ZONA_MINIMA
			)
		)
	)
	AND EXISTS(
		SELECT 1
		FROM PENSUM PE1		
		WHERE PE1.CARRERA = CA1.CARRERA
		AND NOT EXISTS(
			SELECT SUM(CREDITOS)
			FROM CURSO CU1
			WHERE CU1.CURSO = PE1.CODIGO
			AND NOT EXISTS(
				SELECT 1
				FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1
				WHERE AS1.CODIGO = CU1.CURSO
				AND AS1.CARNET = E.CARNET
				AND ((PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
						OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
						OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
				)
				AND PE1.PLAN = PL1.PLAN
				AND PE1.CARRERA = PL1.CARRERA
				AND AP1.PLAN = PL1.PLAN
				AND AP1.CARRERA = PL1.CARRERA
				AND AP1.CICLO = AS1.CICLO
				AND AS1.NOTA >= AP1.NOTA_APROBACION
				AND AS1.ZONA >= AP1.ZONA_MINIMA
			)
			HAVING SUM(CREDITOS) > CA1.CREDITOS_CIERRE 
		)
	)	
	HAVING COUNT(DISTINCT CA1.CARRERA) = 0	
);



/**CONSULTA 3*/
/*
DAR EL CARNET Y NOMBRE DE LOS ESTUDIANTES QUE HAN CERRADO EN MAS DE UNA CARRERA.

OBTENER ESTUDIANTE TAL QUE EXISTA MAS DE UNA CARRERA TAL QUE EN EL PENSUM DE ESA CARRERA NO EXISTA NINGUN CURSO OBLIGATORIO QUE NO EXISTA COMO CURSO GANADO EN LAS ASIGNACIONES Y EXISTA UNA SUMA DE CREDITOS > 250 */
SELECT E.CARNET, E.PRIMER_NOMBRE || ' ' || E.PRIMER_APELLIDO
FROM ESTUDIANTE E
WHERE EXISTS(
	SELECT COUNT(DISTINCT CA1.CARRERA)"NUM_CARRERAS_APROBADAS"
	FROM CARRERA CA1	
	WHERE EXISTS (
		SELECT 1
		FROM PENSUM PE1		
		WHERE PE1.CARRERA = CA1.CARRERA
		AND OBLIGATORIO = 1
		AND NOT EXISTS(
			SELECT 1
			FROM CURSO CU1
			WHERE CU1.CURSO = PE1.CODIGO
			AND NOT EXISTS(
				SELECT 1
				FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1
				WHERE AS1.CODIGO = CU1.CURSO
				AND AS1.CARNET = E.CARNET
				AND ((PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
						OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
						OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
				)
				AND PE1.PLAN = PL1.PLAN
				AND PE1.CARRERA = PL1.CARRERA
				AND AP1.PLAN = PL1.PLAN
				AND AP1.CARRERA = PL1.CARRERA
				AND AP1.CICLO = AS1.CICLO
				AND AS1.NOTA >= AP1.NOTA_APROBACION
				AND AS1.ZONA >= AP1.ZONA_MINIMA
			)
		)
	)
	AND EXISTS(
		SELECT 1
		FROM PENSUM PE1		
		WHERE PE1.CARRERA = CA1.CARRERA
		AND NOT EXISTS(
			SELECT SUM(CREDITOS)
			FROM CURSO CU1
			WHERE CU1.CURSO = PE1.CODIGO
			AND NOT EXISTS(
				SELECT 1
				FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1
				WHERE AS1.CODIGO = CU1.CURSO
				AND AS1.CARNET = E.CARNET
				AND ((PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
						OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
						OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
				)
				AND PE1.PLAN = PL1.PLAN
				AND PE1.CARRERA = PL1.CARRERA
				AND AP1.PLAN = PL1.PLAN
				AND AP1.CARRERA= PL1.CARRERA
				AND AP1.CICLO = AS1.CICLO
				AND AS1.NOTA >= AP1.NOTA_APROBACION
				AND AS1.ZONA >= AP1.ZONA_MINIMA
			)
			HAVING SUM(CREDITOS) > CA1.CREDITOS_CIERRE 
		)
	)	
	HAVING COUNT(DISTINCT CA1.CARRERA) >= 2	
);


/**CONSULTA 4*/
/*
DAR EL NOMBRE DE LOS ESTUDIANTES QUE HAN LLEVADO ALGUN CURSO QUE HA SIDO IMPARTIDO POR ALGUNO DE LOS CATEDRATICOSQUE ALGUNA VEZ LE HAN DADO CLASE A ALGUNO DE LOS ESTUDIANTES QUE GANO ALGUN CURSO CON ALGUNO DE LOS CATEDRATICOS QUE HAN IMPARTIDO AL MENOS UNA VEZ EL CURSO DE BASE DE DATOS A ALGUNO DE LO LOS ESTUDIANTES QUE NO HAN GANADO EL CURSO DE SISTEMAS OPERATIVOS PERO SI LO HAN LLEVADO AL MENOS UNA VEZ

Obtenemos estudiante tal que tenga un curso asingado que exista en la seccion dado el mismo anio y ciclo de asignacion y tal que el catedratico que dio el curso tal que existan dos secciones una de base de datos y otra de SO de la misma carrera que el estudiante y que esten aprobadas

*/
SELECT E1.CARNET, E1.PRIMER_NOMBRE || ' ' || E1.PRIMER_APELLIDO
FROM ESTUDIANTE E1
WHERE EXISTS(
	SELECT 1
	FROM CURSO CU1
	WHERE EXISTS(
		SELECT 1
		FROM ASIGNACION AS1
		WHERE AS1.CARNET = E1.CARNET
		AND AS1.CODIGO = CU1.CURSO
		AND EXISTS(
			SELECT 1
			FROM SECCION SE1
			WHERE SE1.CODIGO = AS1.CODIGO
			AND AS1.ANIO = SE1.ANIO
			AND AS1.CICLO = SE1.CICLO
			AND EXISTS(
				SELECT 1
				FROM CATEDRATICO CAT1
				WHERE SE1.CATEDRATICO = CAT1.CATEDRATICO
				AND EXISTS(
					SELECT 1
					FROM ASIGNACION A2, ASIGNACION A3, PLAN PL1, CARRERA CA1, APROBACION AP1
					WHERE A2.CODIGO = (
						SELECT CU1.CURSO FROM CURSO CU2 WHERE CU2.NOMBRE = '%BASES DE DATOS%'
					)
					AND A3.CODIGO = (
						SELECT CU1.CURSO FROM CURSO CU2 WHERE CU2.NOMBRE = '%SISTEMAS OPERATIVOS%'
					)
					AND A3.CARNET IN (
						SELECT E3.CARNET
						FROM ESTUDIANTE E3
						WHERE E3.CARNET = A3.CARNET
					)
					AND PL1.CARRERA = E1.CARRERA
					AND CA1.CARRERA = E1.CARRERA
					AND ((PL1.ANIO_INICIO = A3.ANIO AND PL1.CICLO_INICIO <= A3.CICLO)
						OR (PL1.ANIO_FIN = A3.ANIO AND PL1.CICLO_FIN >= A3.CICLO)
						OR (PL1.ANIO_INICIO < A3.ANIO AND PL1.ANIO_FIN > A3.ANIO)
					)
					AND AP1.PLAN = PL1.PLAN
					AND AP1.CARRERA = PL1.CARRERA
					AND AP1.CICLO = A3.CICLO
					AND A3.NOTA >= AP1.NOTA_APROBACION
					AND A3.ZONA >= AP1.ZONA_MINIMA
				)
			)
		)		
	)
);


/**CONSULTA 5*/
/*
DAR LOS DATOS GENERALES DE LOS ESTUDIANTES QUE HABIENDOSE ASIGNADO EXACTAMENTE LOS MISMOS CURSOS EN LA MISMA SECCION, SIEMPRE HAN APROBADO O REPROBADO A LA VEZ CADA CURSO.

Obtenemos una pareja de estudiantes que esten asignados en la misma seccion y que hayan aprobado o reprobado el mismo curso asignado el mismo ciclo
*/
SELECT DISTINCT E1.CARNET, E2.CARNET
FROM ESTUDIANTE E1, ESTUDIANTE E2, ASIGNACION A1, ASIGNACION A2, APROBACION AP1, APROBACION AP2, PLAN PL1, PLAN PL2
WHERE E1.CARNET = A1.CARNET
AND E2.CARNET = A2.CARNET
AND A1.SECCION = A2.SECCION
AND A1.CODIGO = A2.CODIGO
AND PL1.CARRERA = E1.CARRERA
AND ((PL1.ANIO_INICIO = A1.ANIO AND PL1.CICLO_INICIO <= A1.CICLO)
	OR (PL1.ANIO_FIN = A1.ANIO AND PL1.CICLO_FIN >= A1.CICLO)
	OR (PL1.ANIO_INICIO < A1.ANIO AND PL1.ANIO_FIN > A1.ANIO)
)
AND PL2.CARRERA = E2.CARRERA
AND ((PL2.ANIO_INICIO = A2.ANIO AND PL2.CICLO_INICIO <= A2.CICLO)
	OR (PL2.ANIO_FIN = A2.ANIO AND PL2.CICLO_FIN >= A2.CICLO)
	OR (PL2.ANIO_INICIO < A2.ANIO AND PL2.ANIO_FIN > A2.ANIO)
)
AND AP1.PLAN = PL1.PLAN
AND AP1.CARRERA = PL1.CARRERA
AND AP1.CICLO = A1.CICLO
AND AP2.PLAN = PL2.PLAN
AND AP2.CARRERA = PL2.CARRERA
AND AP2.CICLO = A2.CICLO
AND (   (
	A1.NOTA < AP1.NOTA_APROBACION
	AND A1.ZONA < AP1.ZONA_MINIMA
	AND A2.NOTA < AP2.NOTA_APROBACION
	AND A2.NOTA < AP2.ZONA_MINIMA
	) OR (
	A1.NOTA >= AP1.NOTA_APROBACION
	AND A1.ZONA >= AP1.ZONA_MINIMA
	AND A2.NOTA >= AP2.NOTA_APROBACION
	AND A2.NOTA >= AP2.ZONA_MINIMA
	)
);

/**CONSULTA 6*/
/*
DAR LA LISTA DE CURSOS PARA AQUELLLOS CURSOSQUE EN EL PRESENTE PLAN TIENEN MAS CURSOS PERREQUISITO QUE POSTREQUISITO

Obtenemos todos los cursos tal que sus prerrequisitos sean mas que sus postrequisitos utilizando tablas como select anidados
*/
SELECT DISTINCT CU1.*, POSTPRE, POSTCOD"Cursos Postrrequisito", PREPRE"Cursos Prerrequisito"
FROM CURSO CU1, ( 
	SELECT  P4.CARRERA"POSTCAR", P4.PLAN "POSTPLAN", P4.PRERREQUISITO"POSTPRE", COUNT(DISTINCT P4.CODIGO)"POSTCOD"
	FROM PRERREQUISITO P4
	GROUP BY P4.CARRERA, P4.PLAN, P4.PRERREQUISITO
	) , ( 
	SELECT  P5.CARRERA"PRECAR", P5.PLAN "PREPLAN", P5.CODIGO"PRECOD", COUNT(DISTINCT P5.PRERREQUISITO)"PREPRE"
	FROM PRERREQUISITO P5
	GROUP BY P5.CARRERA, P5.PLAN, P5.CODIGO
	) , PLAN PL1
WHERE
	PL1.PLAN = POSTPLAN
	AND PL1.CARRERA = POSTCAR
	AND PL1.PLAN = PREPLAN
	AND PL1.CARRERA = PRECAR
	AND PL1.ANIO_FIN >= 2007
	AND PL1.CICLO_FIN >= 1
	AND CU1.CURSO = POSTPRE
	AND CU1.CURSO = PRECOD
	AND POSTCOD < PREPRE
;


/**CONSULTA 7*/
/*
DAR LA LISTA DE LOS CATEDRATICOS PONCAHDORES QUE EN CADA CARRERA SE CARACTERIZAN POR TENER LA MAYOR CANTIDAD DE ALUMNOR REPROBADOS

Obtenemos  todos los catedraticos que tengan mayor numero de promedio de estudiantes reprobados por carrera usando vista REPROBADOS_POR_CAT_CAR
*/
SELECT CAT.CATEDRATICO,CAT.NOMBRE,CA1.CARRERA,CA1.NOMBRE,MAX(PROM_REP)
FROM CATEDRATICO CAT, CARRERA CA1, (
	SELECT R.CARR"RCARRERA",R.CAT"RCATED",AVG(NUM_REPROBADOS)"PROM_REP"
	FROM REPROBADOS_POR_CAT_CAR R
	GROUP BY R.CARR,R.CAT
	),CARRERA CAR
WHERE CA1.CARRERA = RCARRERA
AND RCATED = CAT.CATEDRATICO
GROUP BY CAT.CATEDRATICO,CAT.NOMBRE,CA1.CARRERA,CA1.NOMBRE
;



/**CONSULTA 8*/
/*
Dar el nombre de los estudiantes que en este semestre cada dia que vienen a la u no tienen periodos libres

es decir todos los estudiantes que para cualquier curso asignado en el semsetre actual no exista un dia habil que no este asignado en su horario y no exista algun periodo que dado el horario dado no exita mas de 2 periodos con horario_inicial<> horario_final
*/
SELECT *
FROM ESTUDIANTE E
WHERE EXISTS(
	SELECT A.CARNET
	FROM ASIGNACION A
	WHERE A.CARNET = E.CARNET
	AND A.ANIO = 2007
	AND A.CICLO = 1
	AND NOT EXISTS(
		SELECT DIA
		FROM DIA_HABIL D
		WHERE NOT EXISTS(
			SELECT 1
			FROM HORARIO H
			WHERE H.ANIO = A.ANIO
			AND H.CICLO = A.CICLO
			AND D.DIA <> H.DIA
		)
	)
	AND NOT EXISTS(
		SELECT A.ANIO,A.CICLO,H1.DIA
		FROM HORARIO H1, PERIODO P1
		WHERE H1.ANIO = A.ANIO
		AND H1.CICLO = A.CICLO
		AND P1.PERIODO = H1.PERIODO
		AND EXISTS(
			SELECT *
			FROM HORARIO H2, PERIODO P2
			WHERE H2.ANIO = A.ANIO
			AND H2.CICLO = A.CICLO
			AND P2.PERIODO = H2.PERIODO
			AND H1.DIA = H2.DIA	
			AND P2.PERIODO <> P1.PERIODO
			AND P1.HORA_INICIO <> P2.HORA_FIN
		)
		GROUP BY A.ANIO,A.CICLO,H1.DIA
		HAVING COUNT(*) > 1
	)
);


/**CONSULTA 9*/
/*
Dar el nombre de los catedraticos que este semestre vienen todos los dias habiles para impartir exactamente una clase

es decir los catedraticos tal que exista cualquier catedratico exista en una seccion tal que no exista un dia que exista en el horario tal que no de clase en su seccion en el mismo dia de la semana y tal que en ese dia dado imparta exactamente una clase
*/
SELECT *
FROM CATEDRATICO CAT
WHERE EXISTS(
	SELECT DISTINCT *
	FROM SECCION SEC
	WHERE SEC.CATEDRATICO = CAT.CATEDRATICO
	AND SEC.ANIO = 2007
	AND SEC.CICLO = 1
	AND NOT EXISTS(
		SELECT 1
		FROM DIA_HABIL D
		WHERE NOT EXISTS(
			SELECT 1
			FROM HORARIO H
			WHERE H.ANIO = SEC.ANIO
			AND H.CICLO = SEC.CICLO
			AND H.SECCION = SEC.SECCION
			AND H.DIA <> D.DIA
		)
		AND NOT EXISTS(
			SELECT H.DIA
			FROM HORARIO H, SECCION S1
			WHERE H.ANIO = SEC.ANIO
			AND H.CICLO = SEC.CICLO
			AND H.DIA = D.DIA
			AND S1.CATEDRATICO = CAT.CATEDRATICO
			AND H.SECCION = S1.SECCION
			GROUP BY H.DIA
			HAVING COUNT(H.DIA) = 1
		)
	)
);


/**CONSULTA 10*/
/*
Dar el nombre de las parejas de hermanos gemelos que estan estudiando en este semestre en alguna clase comun.

Obtenemos los datos de una pareja de estudiantes tal que concuerden sus apelllidos y su fecha de nacimiento y que exista alguna asignacion que hayan llevado juntos.
*/
SELECT E1.PRIMER_NOMBRE||' Y '||E2.PRIMER_NOMBRE||' '||E1.PRIMER_APELLIDO
FROM ESTUDIANTE E1,ESTUDIANTE E2
WHERE E1.PRIMER_APELLIDO = E2.PRIMER_APELLIDO
AND E1.SEGUNDO_APELLIDO = E2.SEGUNDO_APELLIDO
AND E1.FECHA_NACIMIENTO = E2.FECHA_NACIMIENTO
AND E1.CARNET > E2.CARNET
AND  EXISTS(
	SELECT 1
	FROM ASIGNACION A1, ASIGNACION A2
	WHERE A1.CARNET = E1.CARNET
	AND A2.CARNET = E2.CARNET
	AND A1.CODIGO = A2.CODIGO
	AND A1.SECCION = A2.SECCION
	AND A1.CICLO = A2.CICLO
	AND A1.ANIO = A2.ANIO
);

/**CONSULTA 12*/
/*
DAR EL NOMBRE DE LOS ESTUDIANTES QUE MAS VECES HAN LLEVADO ALGUN CURSO

Obtenemos todos los estudiantes  tal que tenga el mayor numero de veces repetido algun crurso
*/
SELECT CODIGO,E1.CARNET,E1.PRIMER_NOMBRE||' '||E1.PRIMER_APELLIDO,MAX(VECES)
FROM ESTUDIANTE E1,(
	SELECT CARNET"CARNET1",CODIGO,COUNT(CODIGO)"VECES"
	FROM ASIGNACION
	GROUP BY CARNET,CODIGO
)
WHERE E1.CARNET = CARNET1
GROUP BY CODIGO,E1.CARNET,E1.PRIMER_NOMBRE,E1.PRIMER_APELLIDO;


/**CONSULTA 13*/
/*
dar el nombre de los estudiantes que pueden consederarse candidatos a mejores setudantes de cada carrera en el presente plan, para ser candidato a mojr estudiante de una carrera debe tenerse en este momento el mejor promedio de su promocion y carrera, no haber perdido ninguna vez un curso, tener mas creditos aprobados que el resto de estudiantes de su promocion y carrera

Obtenemos todos los estudiantes tal que alguno de estos tenga el maximo promedio y que no exista algun  curso que haya perdido y que exista que para su carrera haya aprobado el numero de creditos dados.
*/
SELECT ES.CARNET,ES.PRIMER_NOMBRE||' '||ES.PRIMER_APELLIDO,CA.NOMBRE
FROM PLAN PL, CARRERA CA, ESTUDIANTE ES
WHERE CA.CARRERA = ES.CARRERA
AND PL.CARRERA = CA.CARRERA
AND EXISTS (
	SELECT CARNET1,MAX(PROM)
	FROM(
		SELECT AS1.CARNET"CARNET1", AVG(NOTA)"PROM"
		FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1
		WHERE (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
		)
		/*WHERE PL1.ANIO_INICIO <= AS1.ANIO
		AND PL1.ANIO_FIN > AS1.ANIO
		AND PL1.CICLO_INICIO <= AS1.CICLO
		AND PL1.CICLO_FIN > AS1.CICLO*/
		AND AP1.PLAN = PL1.PLAN
		AND AP1.CARRERA = PL1.CARRERA
		AND AP1.CICLO = AS1.CICLO
		AND AS1.NOTA >= AP1.NOTA_APROBACION
		AND AS1.ZONA >= AP1.ZONA_MINIMA	
		GROUP BY AS1.CARNET
	)
	GROUP BY CARNET1
	HAVING CARNET1 = ES.CARNET
) AND NOT EXISTS(
	SELECT 1
	FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1
	WHERE AS1.CARNET = ES.CARNET
	AND PL1.ANIO_INICIO <= AS1.ANIO
	AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
	)
	/*AND PL1.ANIO_FIN > AS1.ANIO
	AND PL1.CICLO_INICIO <= AS1.CICLO
	AND PL1.CICLO_FIN > AS1.CICLO
	*/
	AND AP1.PLAN = PL1.PLAN
	AND AP1.CARRERA = PL1.CARRERA
	AND AP1.CICLO = AS1.CICLO
	AND AS1.NOTA < AP1.NOTA_APROBACION
	AND AS1.ZONA < AP1.ZONA_MINIMA	
) AND EXISTS(
	SELECT CARRERA,MAX(NUM_CREDITOS)
	FROM (
		SELECT DISTINCT AS1.CARNET"CARNET", E2.CARRERA, COUNT(CU1.CREDITOS)"NUM_CREDITOS", SUBSTR(TO_CHAR(AS1.CARNET),1,4)"PROMO"
		FROM ASIGNACION AS1, APROBACION AP1, PLAN PL1,CARRERA CA2, ESTUDIANTE E2, PENSUM PE1,CURSO CU1
		WHERE E2.CARNET = AS1.CARNET
		AND CA2.CARRERA = E2.CARRERA
		AND PE1.CARRERA = E2.CARRERA
		AND AS1.CODIGO = PE1.CODIGO
		AND CU1.CURSO = AS1.CODIGO
		AND PE1.PLAN = PL1.PLAN
		AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
		)
		/*AND PL1.ANIO_INICIO <= AS1.ANIO
		AND PL1.ANIO_FIN > AS1.ANIO
		AND PL1.CICLO_INICIO <= AS1.CICLO
		AND PL1.CICLO_FIN > AS1.CICLO*/
		AND AP1.PLAN = PL1.PLAN
		AND AP1.CARRERA = PL1.CARRERA
		AND AP1.CICLO = AS1.CICLO
		AND AS1.NOTA >= AP1.NOTA_APROBACION
		AND AS1.ZONA >= AP1.ZONA_MINIMA
		GROUP BY AS1.CARNET,E2.CARRERA
	)
	WHERE CARNET = ES.CARNET
	GROUP BY CARRERA
);


/**CONSULTA 14*/
/*
Excluyendo los estudiantes de ingenieria quimica, e ingenieria civil, dar el nombre y promedio de los estudiantes que tienen mejor promedio que el promedio de los estudiantes de quimica pero peor promedio que el promedio de los estudiantes de civil y una edad menor que la edad promedio de los estudiantes de civil pero mayor que la edad promedio de los estudiantes de quimica

estudiantes que en el pensum de su carrera no exista algun curso obligatorio que no exista en los cursos que ya gano y que tenga un conteo de creditos > creditos_cierre de carrera
*/
SELECT E1.CARNET,E1.PRIMER_NOMBRE ||' '||E1.PRIMER_APELLIDO,MAX(ANUM_CREDITOS)/*,MAX(ANUM_CURSOS)*/
FROM LISTADO_ESTUDIANTES_CIERRE C1, ESTUDIANTE E1, (
	SELECT AS1.CARNET"ACARNET",SUM(CU1.CREDITOS)"ANUM_CREDITOS"
	FROM ASIGNACION AS1, PLAN PL1, APROBACION AP1, CURSO CU1
	WHERE AS1.CODIGO = CU1.CURSO
	AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
	)
	/*AND PL1.ANIO_INICIO <= AS1.ANIO
	AND PL1.ANIO_FIN > AS1.ANIO
	AND PL1.CICLO_INICIO <= AS1.CICLO
	AND PL1.CICLO_FIN > AS1.CICLO*/
	AND AP1.PLAN = PL1.PLAN
	AND AP1.CARRERA = PL1.CARRERA
	AND AP1.CICLO = AS1.CICLO
	AND AS1.NOTA >= AP1.NOTA_APROBACION
	AND AS1.ZONA >= AP1.ZONA_MINIMA	
	GROUP BY AS1.CARNET
	)
WHERE E1.CARNET = ACARNET
GROUP BY E1.CARNET,E1.PRIMER_NOMBRE,E1.PRIMER_APELLIDO;


/**CONSULTA 15*/
/*
Excluyendo los estudiantes de ingenieria quimica, e ingenieria civil, dar el nombre y promedio de los estudiantes que tienen mejor promedio que el promedio de los estudiantes de quimica pero peor promedio que el promedio de los estudiantes de civil y una edad menor que la edad promedio de los estudiantes de civil pero mayor que la edad promedio de los estudiantes de quimica

Obtenemos promedios y edades de todos los estudiantes de quimica y civil y los comparamos entre si, para los promedios se utilizo la tabla ESTUDIANTE_CARR_PROM_EDAD

*/
SELECT EC3.CARNET,E1.PRIMER_NOMBRE||' '||E1.PRIMER_APELLIDO,EC3.PROM
FROM ESTUDIANTE_CARR_PROM_EDAD EC3, ESTUDIANTE E1
WHERE EC3.CARNET = E1.CARNET
AND EC3.CARRERA NOT LIKE '%civil%'
AND EC3.CARRERA NOT LIKE '%quimica%'
AND EC3.EDAD > (
	SELECT AVG(EC1.PROM)
	FROM ESTUDIANTE_CARR_PROM_EDAD EC1	
	WHERE EC1.CARRERA LIKE '%quimica%'
	GROUP BY EC1.CARRERA
)
AND EC3.EDAD < (
	SELECT AVG(EC1.PROM)
	FROM ESTUDIANTE_CARR_PROM_EDAD EC1	
	WHERE EC1.CARRERA LIKE '%civil%'
	GROUP BY EC1.CARRERA
)
AND EC3.PROM > (
	SELECT AVG(EC1.EDAD)
	FROM ESTUDIANTE_CARR_PROM_EDAD EC1	
	WHERE EC1.CARRERA LIKE '%quimica%'
 	gROUP BY EC1.CARRERA
)
AND EC3.PROM < (
	SELECT AVG(EC1.EDAD)
	FROM ESTUDIANTE_CARR_PROM_EDAD EC1	
	WHERE EC1.CARRERA LIKE '%civil%'
	GROUP BY EC1.CARRERA
)
;
	

/**CONSULTA 16*/
/*
Dar el nombre de los estudiantes, su ingreso en numeros y letras para todos los estudiatnes que tienen un ingreso familar mayor a 10000.

Obtenemos el ingreso de los estudiantes en letras y numeros usando un Stored Procedure que convierte de numeros a letras.

*/
SELECT CARNET,CONCAT(PRIMER_NOMBRE,' ')||PRIMER_APELLIDO,INGRESO_FAMILIAR,NUMALET(INGRESO_FAMILIAR)
FROM ESTUDIANTE
WHERE INGRESO_FAMILIAR >= 10000
;


/**CONSULTA 17*/
/*
Dar el nombre de los estudiantes y del curso quese han registrado por lo menos 3 veces en un mismo curso

Obtenemos todos aquiellos estudiatnes tal que se el conteo de veces asignadas sea >=3
*/
SELECT AS1.CARNET,C.NOMBRE,CONCAT(E.PRIMER_NOMBRE,E.PRIMER_APELLIDO),COUNT(AS1.CODIGO)
FROM ASIGNACION AS1, ESTUDIANTE E, CURSO C
WHERE AS1.CARNET = E.CARNET
AND AS1.CODIGO = C.CURSO
GROUP BY AS1.CARNET,C.NOMBRE,CONCAT(E.PRIMER_NOMBRE,E.PRIMER_APELLIDO)
HAVING COUNT(AS1.CODIGO) >= 3
;

/**CONSULTA 19*/
/*
Listado de curso/catedratico/auxiliar donde los alumnos tengan mejor nota promedio que otra seccion del mismo anio y ciclo anterior tal que no haya sido el mismo catedratico

Obtenemos el curso, catedratico, auxiliar, y promocion tal que en un par de secciones dadas por diferente catedratico exista mejor promedio, se uso vista PROM_POR_CUR_SEC_ANIO_CICLO.
*/
SELECT DISTINCT SEC1.CODIGO,CAT1.NOMBRE,AUX1.AUXILIAR,P1.PROM,P2.PROM
FROM SECCION SEC1, SECCION SEC2, CATEDRATICO CAT1, CATEDRATICO CAT2, AUXILIAR AUX1, AUXILIAR AUX2,PROM_POR_CUR_SEC_ANIO_CICLO P1, PROM_POR_CUR_SEC_ANIO_CICLO P2
WHERE P1.SECCION = SEC1.SECCION
AND P1.CICLO = SEC1.CICLO
AND P1.CURSO = SEC1.CODIGO
AND P2.SECCION = SEC2.SECCION
AND P2.CICLO = SEC2.CICLO
AND P2.CURSO = SEC2.CODIGO
AND SEC1.AUXILIAR = AUX1.AUXILIAR
AND SEC2.AUXILIAR = AUX2.AUXILIAR
AND SEC1.CATEDRATICO = CAT1.CATEDRATICO
AND SEC2.CATEDRATICO = CAT2.CATEDRATICO
AND SEC1.CATEDRATICO <> SEC2.CATEDRATICO
AND SEC1.AUXILIAR <> SEC2.AUXILIAR
AND P1.PROM > P2.PROM
;

/**CONSULTA 20*/
/*
Listado de catedraticos/cursos que han reprobado en promedio mas alumnos que todos los otros catedraticos que hayan impartido el mismo curso, tomando en cuenta solo los alumnos que no han sido repitentes del curso.

Obtenemos los catedraticos y los cursos tal que exista algun curso que tenga un promedio de reprobados por seccion mayor al del otro catedratico. se utilizo la vista num_rep_per_sec.
*/
SELECT DISTINCT CA1.NOMBRE, CU1.NOMBRE
FROM CATEDRATICO CA1, CATEDRATICO CA2, SECCION SA1, SECCION SA2, CURSO CU1, CURSO CU2
WHERE CA1.CATEDRATICO = SA1.CATEDRATICO
AND CA2.CATEDRATICO = SA2.CATEDRATICO
AND CA1.CATEDRATICO <> CA2.CATEDRATICO
AND CU1.CURSO = SA1.CODIGO
AND CU2.CURSO = SA2.CODIGO
AND CU1.CURSO = CU2.CURSO
AND EXISTS (
	SELECT CU3.CURSO, AVG(N1.REPROB), AVG(N2.REPROB)
	FROM NUM_REPROB_NREP_PER_SEC N1, NUM_REPROB_NREP_PER_SEC N2, CURSO CU3
	WHERE SA1.ANIO = N1.ANIO
	AND SA2.ANIO = N2.ANIO
	AND N1.CURSO = CU1.CURSO
	AND N2.CURSO = CU2.CURSO
	AND SA1.CODIGO = CU1.CURSO
	AND SA2.CODIGO = CU2.CURSO	
	AND SA1.CICLO = N1.CICLO
	AND SA2.CICLO = N2.CICLO
	AND SA1.SECCION = N1.SECCION
	AND SA2.SECCION = N2.SECCION
	AND CU3.CURSO = N1.CURSO
	AND CU3.CURSO = N2.CURSO
	GROUP BY CU3.CURSO
	HAVING AVG(N1.REPROB) > AVG(N2.REPROB)
);


/**CONSULTA 21*/
/*
Para el proximo ciclo, debe insertar una asignacion automatica en la seccion A de Bases de datos 2 para todos los estudiantes que han aprobado los prerrequisitos necesarios del curso en algunos de los ciclos anteriores

Insertamos una nueva asignacion para el ciclo 2007,2 del curso base de datos 2 tal que no exista lgun prerrequisito de este curso que no este ganado en las asignaciones.
*/
INSERT INTO ASIGNACION (ANIO,CICLO,CODIGO,SECCION,CARNET,ZONA,NOTA) (
	SELECT '2007','2',CU1.CURSO,'A',E1.CARNET,'0','0'
	FROM CURSO CU1, ESTUDIANTE E1
	WHERE CU1.NOMBRE = '%BASES DE DATOS 2%'
	AND NOT EXISTS(
		SELECT 1
		FROM PRERREQUISITO PR1
		WHERE PR1.CARRERA = E1.CARRERA
		AND PR1.CODIGO = CU1.CURSO
		AND NOT EXISTS(
			SELECT 1
			FROM APROBACION AP1, PLAN PL1, ASIGNACION AS1
			WHERE E1.CARNET = AS1.CARNET
			AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
			)
			/*AND PL1.ANIO_INICIO <= AS1.ANIO
			AND PL1.ANIO_FIN > AS1.ANIO
			AND PL1.CICLO_INICIO <= AS1.CICLO
			AND PL1.CICLO_FIN > AS1.CICLO
			*/
			AND PL1.CARRERA = E1.CARRERA
			AND AP1.PLAN = PL1.PLAN
			AND AP1.CARRERA = PL1.CARRERA
			AND AP1.CICLO = AS1.CICLO
			AND AS1.NOTA >= AP1.NOTA_APROBACION
			AND AS1.ZONA >= AP1.ZONA_MINIMA			
		)
	)
);


/**CONSULTA 22*/
/*
Eliminar todas las a signaciones que se han hecho en las cuales los estudiantes no habian aprobado previamente los prerrequisitos del curso

Borramos de la tabla asignacion si existe algun curso asignado donde exista algun prerrequisito de la carrera de algun estudiante tal que no exista un curso que no haya ganado
*/
DELETE FROM ASIGNACION AS1
WHERE EXISTS(
	SELECT 1
	FROM CURSO CU1, ESTUDIANTE E1
	WHERE CU1.CURSO = AS1.CODIGO
	AND EXISTS(
		SELECT 1
		FROM PRERREQUISITO PR1
		WHERE PR1.CARRERA = E1.CARRERA
		AND PR1.CODIGO = CU1.CURSO
		AND NOT EXISTS(
			SELECT 1
			FROM APROBACION AP1, PLAN PL1, ASIGNACION AS1
			WHERE E1.CARNET = AS1.CARNET
			AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
			)
			/*AND PL1.ANIO_INICIO <= AS1.ANIO
			AND PL1.ANIO_FIN > AS1.ANIO
			AND PL1.CICLO_INICIO <= AS1.CICLO
			AND PL1.CICLO_FIN > AS1.CICLO*/
			AND PL1.CARRERA = E1.CARRERA
			AND AP1.PLAN = PL1.PLAN
			AND AP1.CARRERA = PL1.CARRERA
			AND AP1.CICLO = AS1.CICLO
			AND AS1.NOTA >= AP1.NOTA_APROBACION
			AND AS1.ZONA >= AP1.ZONA_MINIMA			
		)
	)
);


/**CONSULTA 23*/
/*
Normalizar las notas de todos los cursos asumiendo que la nueva nota minima de aprobacion sera de 75 independientemente del ciclo en que se eaprobo el curso.

Actualiza utilizando formula AS1.NOTA +(75-(nota_aprobacion actual))) todas las notas ganadas de cualquier asignacion dada
*/
UPDATE ASIGNACION AS1
	SET AS1.NOTA = AS1.NOTA +(75-(
		SELECT UNIQUE AP1.NOTA_APROBACION"NOTA_APROBRACION"
		FROM APROBACION AP1, PLAN PL1, ESTUDIANTE E1
		WHERE E1.CARNET = AS1.CARNET
		AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
			OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
			OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
		)
		/*
		AND PL1.ANIO_INICIO <= AS1.ANIO
		AND PL1.ANIO_FIN > AS1.ANIO
		AND PL1.CICLO_INICIO <= AS1.CICLO
		AND PL1.CICLO_FIN > AS1.CICLO*/
		AND PL1.CARRERA = E1.CARRERA
		AND AP1.PLAN = PL1.PLAN
		AND AP1.CARRERA = PL1.CARRERA
		AND AP1.CICLO = AS1.CICLO
		))
	WHERE
	AS1.NOTA < 100 - (75 - 
		(
		SELECT UNIQUE AP1.NOTA_APROBACION"NOTA_APROBRACION"
		FROM APROBACION AP1, PLAN PL1, ESTUDIANTE E1
		WHERE E1.CARNET = AS1.CARNET
		AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
		)
		/*AND PL1.ANIO_INICIO <= AS1.ANIO
		AND PL1.ANIO_FIN > AS1.ANIO
		AND PL1.CICLO_INICIO <= AS1.CICLO
		AND PL1.CICLO_FIN > AS1.CICLO*/
		AND PL1.CARRERA = E1.CARRERA
		AND AP1.PLAN = PL1.PLAN
		AND AP1.CARRERA = PL1.CARRERA
		AND AP1.CICLO = AS1.CICLO
		)
	)
;


/**CONSULTA 24*/
/*
Dar el nombre de los estudiantes y su promedio, para los estudiantes que tienen el promedio mas alto de su promocion y carrera

Obtenemos el carnet, promociion, carrera y el maximo promedio por la carrera y promocion de algun estudiante desde la vista prom_por_promo_carrera
*/
SELECT DISTINCT E.CARNET, P.PROMO,P.CARRERA,MAX(P.PROMEDIO)
FROM ESTUDIANTE E, PROM_POR_PROMO_CARRERA P
WHERE E.CARNET = P.CARNET
AND E.CARRERA = P.CARRERA
GROUP BY E.CARNET,P.PROMO, P.CARRERA;


/**CONSULTA 25*/
/*
Dar el nombre de los cursos que tienen el promedio de repitentes mas alto.

Obtenemos el curso, y el maximo del promedio de repeitentes de la vista count_rep_curso_per_ciclo agrupado por curso
*/
SELECT CURSO,MAX(AVG_REP)"CONTEO MAXIMO REPITENTES"
FROM(
	SELECT CURSO,AVG(COUNT_REP)"AVG_REP"
	FROM COUNT_REP_CURSO_PER_CICLO
	GROUP BY CURSO
)
GROUP BY CURSO;


/**CONSULTA 26**/
/*
Dar el nombre de los estudiantes que han llevado más cursos en un ciclo, habiéndolos ganado todos y ninguno de los culaes se habia asignado antes, y tenia el prerrequisito aprobado.

Obtenemos el maximo de cursos que un estudiiante se haya asignado tal que no exista algun curso asignado que no exista como curso ganado previamente y nno exista ninguna otra asignacion tque no sea del mismo ciclo que la asignacion anterior y quen o exista algun prerequisito   que no haya aprobado en alguna asignacion.
*/
SELECT CARNET,ANIO,CICLO, MAX(NUM_CURSOS)
FROM(
	SELECT AS1.CARNET"CARNET", AS1.ANIO"ANIO", AS1.CICLO"CICLO", COUNT(AS1.CODIGO) "NUM_CURSOS"
	FROM ASIGNACION AS1
	WHERE NOT EXISTS
	(
		SELECT 1
		FROM CURSO CU1
		WHERE CU1.CURSO = AS1.CODIGO
		AND NOT EXISTS(
			SELECT 1
			FROM ASIGNACION AS2, PLAN PL1, APROBACION AP1, ESTUDIANTE E1
			WHERE AS2.CARNET=AS1.CARNET
			AND (	(PL1.ANIO_INICIO = AS2.ANIO AND PL1.CICLO_INICIO <= AS2.CICLO)
				OR (PL1.ANIO_FIN = AS2.ANIO AND PL1.CICLO_FIN >= AS2.CICLO)
				OR (PL1.ANIO_INICIO < AS2.ANIO AND PL1.ANIO_FIN > AS2.ANIO)
			)
			/*AND PL1.ANIO_INICIO <= AS2.ANIO
			AND PL1.ANIO_FIN > AS2.ANIO
			AND PL1.CICLO_INICIO <= AS2.CICLO
			AND PL1.CICLO_FIN > AS2.CICLO*/
			AND E1.CARNET = AS2.CARNET
			AND PL1.CARRERA = E1.CARRERA
			AND AP1.PLAN = PL1.PLAN
			AND AP1.CARRERA = PL1.CARRERA
			AND AP1.CICLO = AS2.CICLO
			AND AS2.NOTA >= AP1.NOTA_APROBACION
			AND AS2.ZONA >= AP1.ZONA_MINIMA
		)
	)
	AND NOT EXISTS
	(
		SELECT 1
		FROM ASIGNACION AS3
		WHERE
		( 
		AS3.CICLO <> AS1.CICLO
		AND AS3.ANIO = AS1.ANIO
		)
		OR 
		(
		AS3.ANIO <> AS1.ANIO
		AND AS3.CARNET = AS1.CARNET
		AND AS3.CODIGO = AS1.CODIGO
		)		
	)
	AND NOT EXISTS
	(
		SELECT 1
		FROM PRERREQUISITO PR1, ESTUDIANTE E2
		WHERE PR1.CODIGO = AS1.CODIGO
		AND E2.CARNET = AS1.CARNET
		AND PR1.CARRERA = E2.CARRERA
		AND NOT EXISTS(
			SELECT 1
			FROM ASIGNACION AS4, PLAN PL2, APROBACION AP2			
			WHERE AS4.CARNET = AS1.CARNET
			AND AS4.CODIGO = PR1.PRERREQUISITO
			AND (	(PL2.ANIO_INICIO = AS4.ANIO AND PL2.CICLO_INICIO <= AS4.CICLO)
				OR (PL2.ANIO_FIN = AS4.ANIO AND PL2.CICLO_FIN >= AS4.CICLO)
				OR (PL2.ANIO_INICIO < AS4.ANIO AND PL2.ANIO_FIN > AS4.ANIO)
			)
			/*AND PL2.ANIO_INICIO <= AS4.ANIO
			AND PL2.ANIO_FIN > AS4.ANIO
			AND PL2.CICLO_INICIO <= AS4.CICLO
			AND PL2.CICLO_FIN > AS4.CICLO*/
			AND E2.CARNET = AS4.CARNET
			AND PL2.CARRERA = E2.CARRERA
			AND AP2.PLAN = PL2.PLAN
			AND AP2.CARRERA = PL2.CARRERA
			AND AP2.CICLO = AS4.CICLO
			AND AS4.NOTA >= AP2.NOTA_APROBACION
			AND AS4.ZONA >= AP2.ZONA_MINIMA
		)
	)
	GROUP BY AS1.CARNET,AS1.ANIO,AS1.CICLO
)
GROUP BY CARNET,ANIO,CICLO;



/**CONSULTA 27**/
/*
Para cada carrera, dar el nombre de los estudiantes que han cerrado pensum en menos tiempo.

Obtenemos datos de estudiante y carrera y los relacionamos con la vista Listado_estudiantes_cierre que contiene el listado de estudiantes de cierre y el tiempo tardado en cerrar.
*/

SELECT E.CARRERA,C.NOMBRE, E.PRIMER_NOMBRE || E.PRIMER_APELLIDO
FROM ESTUDIANTE E, CARRERA C
WHERE EXISTS (
	SELECT CARNET, MAX(DELTAT)
	FROM LISTADO_ESTUDIANTES_CIERRE
	WHERE E.CARNET = CARNET
	GROUP BY E.CARRERA
)
AND C.CARRERA = E.CARRERA
;


/**CONSULTA 28**/
/*
Indicar cuantos estudiantes de cada carrera no han ganando ningun curso.

Obtenemos datos del estudiante y relacionamoes este con el pensum y el plan de tal manera que no exista algun curso tal que no se haya asignado el curso y lo haya perdido.

*/
SELECT E1.CARRERA, COUNT(DISTINCT E1.CARNET)
FROM ESTUDIANTE E1
WHERE EXISTS(
	SELECT *
	FROM PENSUM PE1, PLAN PL1
	WHERE PE1.CARRERA = E1.CARRERA 	
	AND PL1.PLAN = PE1.PLAN
	AND PL1.CARRERA = PE1.CARRERA
	AND NOT EXISTS (
		SELECT 1
		FROM CURSO CU1
		WHERE CU1.CURSO = PE1.CODIGO
		AND NOT EXISTS (
			SELECT 1
			FROM ASIGNACION AS2 ,APROBACION AP1
			WHERE PL1.CARRERA = PE1.CARRERA	
			AND AS2.CARNET = E1.CARNET	
			AND AS2.CODIGO = CU1.CURSO
			AND (	(PL1.ANIO_INICIO = AS2.ANIO AND PL1.CICLO_INICIO <= AS2.CICLO)
				OR (PL1.ANIO_FIN = AS2.ANIO AND PL1.CICLO_FIN >= AS2.CICLO)
				OR (PL1.ANIO_INICIO < AS2.ANIO AND PL1.ANIO_FIN > AS2.ANIO)
			)
			/*AND PL1.ANIO_INICIO <= AS2.ANIO
			AND PL1.ANIO_FIN > AS2.ANIO
			AND PL1.CICLO_INICIO <= AS2.CICLO
			AND PL1.CICLO_FIN > AS2.CICLO*/
			AND AP1.PLAN = PL1.PLAN
			AND AP1.CARRERA = PL1.CARRERA
			AND AP1.CICLO = AS2.CICLO
			AND AS2.ZONA < AP1.ZONA_MINIMA
			AND AS2.NOTA < AP1.NOTA_APROBACION
		)
	)
)
GROUP BY E1.CARRERA;






/********************************************** VIEWS ************************************/

/**Vista Count_Rep_Curso_Per_Ciclo

Usada en: Query 25

Devuelve el anio, ciclo, curso y numero de repitentes que ha tenido dicho curso en cualquier anio y ciclo.

*/
CREATE VIEW COUNT_REP_CURSO_PER_CICLO AS (
	SELECT A.ANIO "ANIO", A.CICLO "CICLO", A.CODIGO "CURSO", COUNT(DISTINCT A.CARNET)"COUNT_REP"
	FROM ASIGNACION A, ESTUDIANTE E, APROBACION AP, PLAN PL
	WHERE A.CARNET = E.CARNET
	AND PL.CARRERA = E.CARRERA
	AND (	(PL.ANIO_INICIO = A.ANIO AND PL.CICLO_INICIO <= A.CICLO)
				OR (PL.ANIO_FIN = A.ANIO AND PL.CICLO_FIN >= A.CICLO)
				OR (PL.ANIO_INICIO < A.ANIO AND PL.ANIO_FIN > A.ANIO)
	)
/*	AND PL.ANIO_INICIO <= A.ANIO
	AND PL.ANIO_FIN > A.ANIO
	AND PL.CICLO_INICIO <= A.CICLO
	AND PL.CICLO_FIN > A.CICLO
*/	AND AP.PLAN = PL.PLAN
	AND AP.CARRERA = PL.CARRERA
	AND AP.CICLO = A.CICLO
	AND A.ZONA < AP.ZONA_MINIMA
	AND A.NOTA < AP.NOTA_APROBACION
	GROUP BY A.ANIO , A.CICLO , A.CODIGO
);

/**Vista prom_por_promo_carrera

Usada en: Query 24

Devuelve carnet, promocion (como los primeros 4 digitos del carnet), carrera, promedio de notas
agrupados por promocion y carrera

*/
CREATE VIEW PROM_POR_PROMO_CARRERA AS(
SELECT CARNET,PROMO,CARRERA,AVG(NOTA)"PROMEDIO"
FROM(
	SELECT DISTINCT E.CARNET"CARNET",SUBSTR(E.CARNET,1,4)"PROMO",E.CARRERA"CARRERA",AS2.NOTA"NOTA"
	FROM ESTUDIANTE E, ASIGNACION AS2, PLAN PL1, APROBACION AP1
		WHERE AS2.CARNET = E.CARNET
		AND (	(PL1.ANIO_INICIO = AS2.ANIO AND PL1.CICLO_INICIO <= AS2.CICLO)
				OR (PL1.ANIO_FIN = AS2.ANIO AND PL1.CICLO_FIN >= AS2.CICLO)
				OR (PL1.ANIO_INICIO < AS2.ANIO AND PL1.ANIO_FIN > AS2.ANIO)
			)
		/*AND PL1.ANIO_INICIO <= AS2.ANIO
		AND PL1.ANIO_FIN > AS2.ANIO
		AND PL1.CICLO_INICIO <= AS2.CICLO
		AND PL1.CICLO_FIN > AS2.CICLO*/
		AND PL1.CARRERA = E.CARRERA
		AND AP1.PLAN = PL1.PLAN
		AND AP1.CARRERA = PL1.CARRERA
		AND AP1.CICLO = AS2.CICLO
		AND AS2.NOTA >= AP1.NOTA_APROBACION
		AND AS2.ZONA >= AP1.ZONA_MINIMA
)
GROUP BY CARNET,PROMO,CARRERA
);

/**Vista num_reprob_nrep_per_sec

Usada en: Query 20

Devuelve anio, ciclo, curso, seccion y el numero de reprobados tal que no se hayan asignado este curso previamente( no repitentes)
*/

CREATE VIEW NUM_REPROB_NREP_PER_SEC AS (
	SELECT AS1.ANIO"ANIO", AS1.CICLO"CICLO", AS1.CODIGO"CURSO",AS1.SECCION"SECCION",COUNT(DISTINCT AS1.CARNET)"REPROB"
	FROM ASIGNACION AS1, ESTUDIANTE E1, PLAN PL1, APROBACION AP1
	WHERE E1.CARNET = AS1.CARNET
	AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
	)
	/*AND PL1.ANIO_INICIO <= AS1.ANIO
	AND PL1.ANIO_FIN > AS1.ANIO
	AND PL1.CICLO_INICIO <= AS1.CICLO
	AND PL1.CICLO_FIN > AS1.CICLO*/
	AND PL1.CARRERA = E1.CARRERA
	AND AP1.PLAN = PL1.PLAN
	AND AP1.CARRERA = PL1.CARRERA
	AND AP1.CICLO = AS1.CICLO
	AND AS1.NOTA < AP1.NOTA_APROBACION
	AND AS1.ZONA < AP1.ZONA_MINIMA	
	GROUP BY AS1.ANIO,AS1.CICLO,AS1.CODIGO,AS1.SECCION	
);

/**Vista prom_por_cur_sec_anio_ciclo

Usada en: Query 19

Devuelve curso, seccion anio, ciclo y primedio de notas de la asigancion, agrupado por curso, seccion anio, ciclo
*/

CREATE VIEW PROM_POR_CUR_SEC_ANIO_CICLO AS (
	SELECT AS1.CODIGO"CURSO",AS1.SECCION"SECCION",AS1.ANIO"ANIO",AS1.CICLO"CICLO", AVG(AS1.NOTA)"PROM"
	FROM ASIGNACION AS1	
	GROUP BY AS1.CODIGO,AS1.SECCION,AS1.ANIO,AS1.CICLO	
);

/**Vista ESTUDIANTE_CARR_PROM_EDAD

Usada en: Query 15

Devuelve carrera, carnet, promedio y edad de los estudiantes.
*/
CREATE VIEW ESTUDIANTE_CARR_PROM_EDAD AS(
	SELECT E1.CARRERA"CARRERA", E1.CARNET"CARNET", AVG(AS1.NOTA)"PROM",EXTRACT(YEAR FROM(SYSDATE - E1.FECHA_NACIMIENTO) YEAR TO MONTH)"EDAD"
	FROM ESTUDIANTE E1, CARRERA C1, ASIGNACION AS1,APROBACION AP1, PLAN PL1
	WHERE E1.CARNET = AS1.CARNET AND E1.CARRERA = C1.CARRERA	
	AND PL1.CARRERA = E1.CARRERA
	AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
	)
	/*AND PL1.ANIO_INICIO <= AS1.ANIO
	AND PL1.ANIO_FIN > AS1.ANIO
	AND PL1.CICLO_INICIO <= AS1.CICLO
	AND PL1.CICLO_FIN > AS1.CICLO*/
	AND PL1.CARRERA = E1.CARRERA
	AND AP1.PLAN = PL1.PLAN
	AND AP1.CARRERA = PL1.CARRERA
	AND AP1.CICLO = AS1.CICLO
	AND AS1.NOTA >= AP1.NOTA_APROBACION
	AND AS1.ZONA >= AP1.ZONA_MINIMA	
	GROUP BY E1.CARRERA,E1.CARNET,E1.FECHA_NACIMIENTO
); 

/**Vista LISTADO_ESTUDIANTES_CIERRE

Usada en: Query 27,14

Devuelve los estudiantes que han cerrado alguna carrera*/

create view listado_estudiantes_cierre as(
	SELECT ES1.CARNET"CARNET", (MAX(AS0.ANIO)-MIN(AS0.ANIO))"DELTAT",ES1.CARRERA"CARRERA"
	FROM ESTUDIANTE ES1, CARRERA CA1, ASIGNACION AS0
	WHERE CA1.CARRERA = ES1.CARRERA AND AS0.CARNET = ES1.CARNET
	AND EXISTS( /**OBLIGATORIEDAD*/
		SELECT 1
		FROM PENSUM PE1, PLAN PL1
		WHERE PE1.CARRERA = CA1.CARRERA 
		AND PL1.CARRERA = CA1.CARRERA 
		AND PE1.PLAN = PL1.PLAN
		AND PE1.OBLIGATORIO = 1
		AND NOT EXISTS(
			SELECT 1
			FROM CURSO CU1
			WHERE PE1.CODIGO = CU1.CURSO
			AND NOT EXISTS(
				SELECT 1
				FROM ASIGNACION AS1, APROBACION AP1
				WHERE AS1.CARNET = ES1.CARNET
				AND AS1.CODIGO = CU1.CURSO
				AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
					OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
					OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
				)
				/*AND PL1.ANIO_INICIO <= AS1.ANIO
				AND PL1.ANIO_FIN > AS1.ANIO
				AND PL1.CICLO_INICIO <= AS1.CICLO
				AND PL1.CICLO_FIN > AS1.CICLO*/
				AND AP1.PLAN = PL1.PLAN
				AND AP1.CARRERA = PL1.CARRERA
				AND AP1.CICLO = AS1.CICLO
				AND AS1.NOTA >= AP1.NOTA_APROBACION
				AND AS1.ZONA >= AP1.ZONA_MINIMA	
			)
		)
	)
	AND EXISTS( /**CONTEO CREDITOS*/
		SELECT 1
		FROM PENSUM PE1, PLAN PL1
		WHERE PE1.CARRERA = CA1.CARRERA
		AND PL1.PLAN = PE1.PLAN
		AND PL1.CARRERA = PE1.CARRERA
		AND EXISTS(
			SELECT 1
			FROM ASIGNACION AS1, APROBACION AP1, CURSO CU1			
			WHERE AS1.CARNET = ES1.CARNET
			AND AS1.CODIGO = CU1.CURSO
			AND (	(PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
				OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
				OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
			)
			/*AND PL1.ANIO_INICIO <= AS1.ANIO
			AND PL1.ANIO_FIN > AS1.ANIO
			AND PL1.CICLO_INICIO <= AS1.CICLO
			AND PL1.CICLO_FIN > AS1.CICLO*/
			AND AP1.PLAN = PL1.PLAN
			AND AP1.CARRERA = PL1.CARRERA
			AND AP1.CICLO = AS1.CICLO
			AND AS1.NOTA >= AP1.NOTA_APROBACION
			AND AS1.ZONA >= AP1.ZONA_MINIMA	
			GROUP BY AS1.CARNET
			HAVING SUM(CU1.CREDITOS) >= CA1.CREDITOS_CIERRE
		)
	)
	GROUP BY ES1.CARRERA,ES1.CARNET
);

/**Vista REPROBADOS_POR_CAT_CAR

Usada en: Query 07

Devuelve un promedio de estudiantes reprobados por catedratico y carrera*/
CREATE VIEW REPROBADOS_POR_CAT_CAR AS (
	SELECT CAR.CARRERA"CARR", CAT.CATEDRATICO"CAT",AS1.CODIGO,COUNT(DISTINCT EST.CARNET)"NUM_REPROBADOS"
	FROM CATEDRATICO CAT, CARRERA CAR, ASIGNACION AS1, SECCION SEC, ESTUDIANTE EST, PLAN PL1, APROBACION AP1
	WHERE SEC.CATEDRATICO = CAT.CATEDRATICO
	AND SEC.ANIO = AS1.ANIO
	AND SEC.CICLO = AS1.CICLO
	AND SEC.CODIGO = AS1.CODIGO
	AND SEC.SECCION = AS1.SECCION
	AND EST.CARNET = AS1.CARNET
	AND EST.CARRERA = CAR.CARRERA
	AND PL1.CARRERA = EST.CARRERA
	AND ((PL1.ANIO_INICIO = AS1.ANIO AND PL1.CICLO_INICIO <= AS1.CICLO)
		OR (PL1.ANIO_FIN = AS1.ANIO AND PL1.CICLO_FIN >= AS1.CICLO)
		OR (PL1.ANIO_INICIO < AS1.ANIO AND PL1.ANIO_FIN > AS1.ANIO)
	)
/*	AND PL1.ANIO_INICIO <= AS1.ANIO
	AND PL1.ANIO_FIN > AS1.ANIO
	AND PL1.CICLO_INICIO <= AS1.CICLO
	AND PL1.CICLO_FIN > AS1.CICLO*/
	AND AP1.CICLO = AS1.CICLO
	AND AP1.PLAN = PL1.PLAN
	AND AP1.CARRERA = PL1.CARRERA
	AND (AS1.ZONA <= AP1.ZONA_MINIMA
	OR AS1.NOTA <= AP1.NOTA_APROBACION
	)
	GROUP BY CAR.CARRERA,CAT.CATEDRATICO,AS1.CODIGO
);









