/*
 * Proceso.java
 *
 * Created on August 8, 2007, 4:10 PM
 */

package dekker;

import javax.swing.*;
/**
 * Abstraccion de un proceso usando threads, utiliza metodo run
 * @author  Erik Giron
 */
public class Proceso extends javax.swing.JPanel implements Runnable {
    private int id; // ID del proceso
    
    private boolean stopped = false;
    
    public CriticalSection getCs() {
        return cs;
    }

    private int estado = 0; // estado 0 libre, 1 esperando, 2 activo, -1 bloqueado

    public int getId() {
        return id;
    }
    private int tiempo = 0; // tiempo activo
    /**Asigna region critica*/
    public void setCs(CriticalSection cs) {
        this.cs = cs;
    }
    
    private static int modo = 0; // Modo de Dekker, 1 ... 5 segun el algoritmo dado
    
    private Proceso other; // el otro proceso con que se compite    
    
    
    private static int v; //variable para el metodo 1 de dekker, indica el numero de proceso en ejecucion

    private static boolean[] vi = new boolean[2];
    
    public void setOther(Proceso other) {
        this.other = other;
    }

    public Proceso getOther() {
        return other;
    }
    
    private static CriticalSection cs; // Seccion Critica
    
    private static Thread csThread = new Thread(cs, "Region Critica");
    
    /** Creates new form Proceso */
    public Proceso() {
        initComponents();
    }
    
    public Proceso(int i) {
        initComponents();
        id = i;
        title.setText("Proceso No. " + id);
    }
    
    
    /**Implementacion del metodo RUN*/
    public void run()
    {
        
        switch (modo){             
            case 1:
                v = 1;
                while(true && !stopped){
                    while(v!=id);
                    enterCritical();
                    v = other.getId();
                    exitCritical();                
                }
            case 2:
                vi[0] = false;
                vi[1] = false;
                while(true && !stopped){
                    while(vi[other.getId() - 1] != false);
                    vi[this.getId() - 1] = true;
                    enterCritical();
                    vi[this.getId() - 1] = false;
                    exitCritical();
                }
            case 3:
                while(true && !stopped){
                    vi[this.getId() - 1] = true;
                    while(vi[other.getId() - 1] != false);
                    enterCritical();
                    vi[this.getId() - 1] = false;
                    exitCritical();
                }
            case 4:
                while(true && !stopped){
                    vi[this.getId() - 1] = true;
                    do{
                        vi[this.getId() - 1] = true;
                        vi[this.getId() - 1] = false;
                    }
                    while(vi[other.getId() - 1] == true);
                    enterCritical();
                    vi[this.getId() - 1] = false;
                    exitCritical();
                }
            case 5:
                vi[0] = false;
                vi[1] = false;
                v = this.id;
                while(true && !stopped){
                    vi[this.id - 1] = true;
                    while(true){
                        if(vi[other.id - 1] == false) break;
                        if(v == other.getId()){
                            vi[this.id - 1] = false;
                            while( v != this.id);
                            vi[this.id - 1] = true;
                        }
                    }
                    enterCritical();
                    vi[this.id - 1] = false;
                    v = other.id;
                    exitCritical();                   
                }
                        
            default:
            try{
                while(true && !stopped){
                    for(int i = 0; i < 100 && !stopped; i++){
                        statusLabel.setText("iteracion " + i);                    
                        Thread.currentThread().sleep(500);                                        
    //                    Thread.currentThread().wait();
    //                    Thread.currentThread().notifyAll();

                    }
                    Thread.currentThread().join();
                }
            }
            catch(InterruptedException e){
                statusLabel.setText("stopped");
            }
            finally{

            }
        }
        // exiting the run method terminates the thread
     }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        statusLabel = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        jPanelImg = new javax.swing.JPanel();
        Img = new javax.swing.JLabel();

        statusLabel.setText("Estado:");

        title.setText("Proceso No.");

        javax.swing.GroupLayout jPanelImgLayout = new javax.swing.GroupLayout(jPanelImg);
        jPanelImg.setLayout(jPanelImgLayout);
        jPanelImgLayout.setHorizontalGroup(
            jPanelImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelImgLayout.createSequentialGroup()
                .addComponent(Img)
                .addContainerGap(170, Short.MAX_VALUE))
        );
        jPanelImgLayout.setVerticalGroup(
            jPanelImgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelImgLayout.createSequentialGroup()
                .addComponent(Img)
                .addContainerGap(142, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(title)
                    .addComponent(statusLabel))
                .addContainerGap(98, Short.MAX_VALUE))
            .addComponent(jPanelImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Img;
    private javax.swing.JPanel jPanelImg;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    
    
    /**obtiene el estado actual del proceso*/
    public int getEstado() {
        return estado;
    }
    
    /**Asigna estado al proceso*/
    public void setEstado(int estado) {
        this.estado = estado;
    }
    
    
    /**
     * Obtiene el tiempo del proceso actual
     */
    public int getTiempo() {
        return tiempo;
    }

    /**
     * Asigna el tiempo para el proceso actual
     */
    public void setTiempo(int timer) {
        this.tiempo = timer;
    }

    private void enterCritical() {
        cs.setOwner(this);
        //cs.repaint();
        this.statusLabel.setText("Estado: Usando!");
        try{
               Thread.sleep(tiempo * 1000);            
        }
        catch(Exception e){
            
        }
        finally{
            }
        
        //Thread.yield();
    }
    

    public int getModo() {
        return modo;
    }

    private void exitCritical() {
        cs.setOwner(null);
        this.statusLabel.setText("Estado: Libre");        
    }
    

    public boolean isStopped() {
        return stopped;
    }

    public void setStopped(boolean stop) {
        this.stopped = stop;
    }
    

    public static void setModo(int m) {
        modo = m;
    }
    
    public void setImg(String name){
        ImageIcon s = new ImageIcon(name);        
        Img.setIcon(s);
    }
    
    public JPanel getPanelImg(){
        return this.jPanelImg;
    }
}
