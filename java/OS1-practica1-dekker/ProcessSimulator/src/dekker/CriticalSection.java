/*
 * CriticalSection.java
 *
 * Created on August 9, 2007, 10:19 PM
 */

package dekker;
import javax.swing.*;
/**
 * Abstraccion de la region critica
 * @author  Erik Giron
 */
public class CriticalSection extends javax.swing.JPanel implements Runnable {
    
    Proceso owner; // Quien tiene el proceso actualmente
    
    int estado; // estado de la region critica, 0 desocupado, 1 ocupado

    public synchronized void setOwner(Proceso owner) {
        this.owner = owner;
        if(owner == null){
            this.Title.setText("No usa");
        }
        else{
            if(owner.getId() == 1)
                this.Title.setText("Tragando...");           
            else{
                this.Title.setText("Inhalando...");           
            }
                
            //this.Title.setText("Usado por " + owner.getId());           
//            try{
//                estado = 1;        
//                Thread.currentThread().sleep(owner.getTiempo() * 1000);            
//                owner.notify();
//                estado = 0;
//            }
//            catch(InterruptedException e){
//                System.out.println("Excepcion en thread RC " + e);
//            }
        }
    }

    public Proceso getOwner() {
        return owner;
    }
    
    /** Creates new form CriticalSection */
    public CriticalSection() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        Title = new javax.swing.JLabel();
        Img = new javax.swing.JLabel();

        Title.setText("Region Critica");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Title)
                    .addComponent(Img))
                .addContainerGap(65, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Title)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Img)
                .addContainerGap(122, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Img;
    private javax.swing.JLabel Title;
    // End of variables declaration//GEN-END:variables

    /**Variable de ejecucion*/
    public void run() {
        try{
            while(owner!= null){
                owner.getPanelImg().setVisible(false);
                Thread.currentThread().sleep(200);
                owner.getPanelImg().setVisible(true);         
            }
        }
        catch(InterruptedException e){
            
        }
        finally{
            owner.getPanelImg().setVisible(true);
        }
        
//        try{
//            estado = 1;        
//            Thread.currentThread().sleep(owner.getTiempo() * 1000);            
//            estado = 0;
//        }
//        catch(InterruptedException e){
//            System.out.println("Excepcion en thread RC " + e);
//        }
    }
    
    

    public int getEstado() {
        return estado;
    }

    public void setEstado(int estado) {
        this.estado = estado;
    }
    
    public void setImg(String name){
        ImageIcon s = new ImageIcon(name);        
        Img.setIcon(s);
    }
}
