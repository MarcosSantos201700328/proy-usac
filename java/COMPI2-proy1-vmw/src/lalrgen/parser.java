
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Mar 19 14:38:12 CST 2007
//----------------------------------------------------

package lalrgen;

import java_cup.runtime.*;
import java.util.*;
import vmw.*;
import lalrgen.*;
import errormanager.*;

/** CUP v0.10k generated parser.
  * @version Mon Mar 19 14:38:12 CST 2007
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\003\005\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\006\000\002\005\005" +
    "\000\002\005\007\000\002\005\006\000\002\015\005\000" +
    "\002\015\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\006\003\000\002\020\004\000\002\020" +
    "\003\000\002\007\007\000\002\007\006\000\002\007\006" +
    "\000\002\007\005\000\002\011\003\000\002\012\003\000" +
    "\002\021\003\000\002\017\004\000\002\017\003\000\002" +
    "\013\003\000\002\013\005\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\006\011\005\012\007\001\002\000\010\004" +
    "\ufffe\011\ufffe\012\ufffe\001\002\000\012\015\020\016\016" +
    "\017\015\020\017\001\002\000\010\004\027\011\005\012" +
    "\007\001\002\000\004\011\012\001\002\000\004\002\011" +
    "\001\002\000\004\002\000\001\002\000\012\015\020\016" +
    "\016\017\015\020\017\001\002\000\004\020\017\001\002" +
    "\000\006\013\022\014\021\001\002\000\004\020\ufff5\001" +
    "\002\000\004\020\ufff6\001\002\000\006\013\ufff8\014\ufff8" +
    "\001\002\000\004\020\ufff7\001\002\000\004\020\023\001" +
    "\002\000\010\004\ufffa\011\ufffa\012\ufffa\001\002\000\006" +
    "\013\ufff9\014\ufff9\001\002\000\006\013\025\014\021\001" +
    "\002\000\010\004\ufffb\011\ufffb\012\ufffb\001\002\000\010" +
    "\004\uffff\011\uffff\012\uffff\001\002\000\004\020\034\001" +
    "\002\000\006\002\ufff2\020\ufff2\001\002\000\004\005\037" +
    "\001\002\000\004\002\001\001\002\000\004\005\uffed\001" +
    "\002\000\004\005\uffec\001\002\000\006\002\ufff4\020\034" +
    "\001\002\000\006\002\ufff3\020\ufff3\001\002\000\010\007" +
    "\040\013\044\020\045\001\002\000\004\021\056\001\002" +
    "\000\004\013\055\001\002\000\010\007\uffeb\013\uffeb\020" +
    "\045\001\002\000\006\007\040\013\052\001\002\000\006" +
    "\002\uffee\020\uffee\001\002\000\012\006\047\007\uffe8\013" +
    "\uffe8\020\uffe8\001\002\000\010\007\uffe9\013\uffe9\020\uffe9" +
    "\001\002\000\004\020\050\001\002\000\010\007\uffe7\013" +
    "\uffe7\020\uffe7\001\002\000\004\013\053\001\002\000\006" +
    "\002\uffef\020\uffef\001\002\000\006\002\ufff1\020\ufff1\001" +
    "\002\000\010\007\uffea\013\uffea\020\uffea\001\002\000\006" +
    "\002\ufff0\020\ufff0\001\002\000\004\010\057\001\002\000" +
    "\004\013\uffe6\001\002\000\004\020\017\001\002\000\006" +
    "\013\062\014\021\001\002\000\010\004\ufffc\011\ufffc\012" +
    "\ufffc\001\002\000\006\013\064\014\021\001\002\000\010" +
    "\004\ufffd\011\ufffd\012\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\010\003\007\004\005\005\003\001\001\000" +
    "\002\001\001\000\006\015\060\022\057\001\001\000\004" +
    "\005\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\013\022\012\001\001\000\004" +
    "\015\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\031" +
    "\007\027\011\030\012\032\020\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\011\030\012\032\001" +
    "\001\000\002\001\001\000\012\013\045\014\040\017\041" +
    "\021\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\053\001\001\000\004\014\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected static Vacc engine = new Vacc(); /**Instancia de vacc*/
	/**Asignacion de motor*/
	public static void setEngine(Vacc eng){
		engine = eng;
	}

	public static Vacc getEngine(){
		return engine;
	}	
	public void syntax_error(Symbol cur_token){
		Lexer yylex = (Lexer) getScanner();
		ErrorManager.agregarErrorSintactico(yylex.getLine(),yylex.getChar(),"Error de sintaxis.");
		report_error("Error de Sintaxis en linea " + yylex.getLine() + ", Posicion " + yylex.getChar(), cur_token);
	}
	/**Manipulacion de errores*/
	public void report_error(String message, Object info){
		
		System.out.println("Error: " + message);		
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

	
	//static Vacc engine;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // accion ::= TK_APARPUN STR_SENTENCIAS TK_CPARPUN 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s.toString());
              CUP$parser$result = new java_cup.runtime.Symbol(10/*accion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simbolo ::= TK_ID TK_DOSPUNTOS TK_ID 
            {
              Simbolo RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue i1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i2 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			Simbolo s = parser.getEngine().buscarSimbolo(i1.toString());
			Simbolo s1;
			if (s != null){
				s1 = new Simbolo(s);						
				s1.setSemId(i2.toString());	
				RESULT = s1;	
				//s.setSemId(i2.toString());
				//RESULT = s;
				
			}
			else 
				ErrorManager.agregarErrorSemantico(
								-1,
								-1,
								"Imposible agregar simbolo el simbolo" + i1.toString() + "no se ha declarado."
								);
			
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simbolo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simbolo ::= TK_ID 
            {
              Simbolo RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	
			Simbolo s = parser.getEngine().buscarSimbolo(i1.toString());
			Simbolo s1;
			if (s  != null)	{
				s1 = new Simbolo(s);						
				RESULT = s1;
				//RESULT = s;
			}
			else 
				ErrorManager.agregarErrorSemantico(
								-1,
								-1,
								"Imposible agregar simbolo, el simbolo" + i1.toString() + "no se ha declarado."
								);
				//throw new Exception("Error semantico");
			
              CUP$parser$result = new java_cup.runtime.Symbol(9/*simbolo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // listasimbolo ::= simbolo 
            {
              Vector RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Simbolo s1 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			Vector tmplista = new Vector();
				tmplista.add(s1);
				RESULT = tmplista;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*listasimbolo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // listasimbolo ::= listasimbolo simbolo 
            {
              Vector RESULT = null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ls = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Simbolo s1 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		ls.add(s1); RESULT = ls;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*listasimbolo*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ld ::= listasimbolo 
            {
              LadoDerecho RESULT = null;
		int vlsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vlsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector vls = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LadoDerecho ld = new LadoDerecho();
			ld.setSimbolos(vls);
			RESULT = ld;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*ld*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nterm ::= TK_ID 
            {
              Simbolo RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		Simbolo s = parser.getEngine().buscarSimbolo(i1.toString());
		Simbolo snew;
		if (s!= null){
			snew = new NoTerminal(s);
			snew.setSemId("RESULT");	
			//s.setSemId("RESULT");
			//RESULT = s;
			RESULT = snew;
		}
		else 
			ErrorManager.agregarErrorSemantico(
								-1,
								-1,
								"Imposible agregar simbolo para no terminal del lado izquierdo, el simbolo" + i1.toString() + "no se ha declarado."
								);
//throw new Exception("Error semantico");
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*nterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // li ::= nterm 
            {
              Simbolo RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Simbolo n1 = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = n1;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*li*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // prod ::= li TK_PRODUCE TK_PUNCOMA 
            {
              Elemento RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Simbolo i = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Elemento e = new Elemento(i,new String(""));
					if (parser.getEngine().buscarElemento(e) == null)
						//RESULT = e;
						parser.getEngine().insertarElemento(e);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*prod*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // prod ::= li TK_PRODUCE ld TK_PUNCOMA 
            {
              Elemento RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo i = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LadoDerecho d = (LadoDerecho)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Elemento e = new Elemento(i,d,new String(""));
					if (parser.getEngine().buscarElemento(e) == null)
						//RESULT = e;
						parser.getEngine().insertarElemento(e);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*prod*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // prod ::= li TK_PRODUCE accion TK_PUNCOMA 
            {
              Elemento RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Simbolo i = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Elemento e = new Elemento(i,a.toString());
					if (parser.getEngine().buscarElemento(e) == null)
						//RESULT = e;
						parser.getEngine().insertarElemento(e);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*prod*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // prod ::= li TK_PRODUCE ld accion TK_PUNCOMA 
            {
              Elemento RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Simbolo i = (Simbolo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LadoDerecho d = (LadoDerecho)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Elemento e = new Elemento(i,d,a.toString());
					if (parser.getEngine().buscarElemento(e) == null)
						//RESULT = e;
						parser.getEngine().insertarElemento(e);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*prod*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaprod ::= prod 
            {
              Vector RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Elemento p1 = (Elemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	Vector<Elemento> tmplista = new Vector<Elemento>();
				tmplista.add(p1);
				RESULT = tmplista;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*listaprod*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaprod ::= listaprod prod 
            {
              Vector RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector lp = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Elemento p1 = (Elemento)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		lp.add(p1); RESULT = lp;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*listaprod*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // grammar ::= listaprod 
            {
              Gramatica RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector lp = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		parser.getEngine().insertarProducciones(lp);
              CUP$parser$result = new java_cup.runtime.Symbol(4/*grammar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoterm ::= KW_STR 
            {
              Integer RESULT = null;
		RESULT = new Integer(3);
              CUP$parser$result = new java_cup.runtime.Symbol(16/*tipoterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipoterm ::= KW_REAL 
            {
              Integer RESULT = null;
		RESULT = new Integer(2);
              CUP$parser$result = new java_cup.runtime.Symbol(16/*tipoterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipoterm ::= KW_INT 
            {
              Integer RESULT = null;
		RESULT = new Integer(1);
              CUP$parser$result = new java_cup.runtime.Symbol(16/*tipoterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lterm ::= TK_ID 
            {
              ArrayList RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue id1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	if (parser.getEngine().buscarSimbolo(id1.toString()) == null){
				ArrayList tmplista = new ArrayList();
				tmplista.add(new String(id1.toString()));
				RESULT = tmplista;
			} else 	
				ErrorManager.agregarErrorSemantico(
								-1,
								-1,
								"Imposible agregar simbolo " + id1.toString() + " pues ya ha sido declarado previamente."
								);
				//throw new Exception("Error semantico");
				
              CUP$parser$result = new java_cup.runtime.Symbol(11/*lterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lterm ::= lterm TK_COMA TK_ID 
            {
              ArrayList RESULT = null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList lt = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue id1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		if (parser.getEngine().buscarSimbolo(id1.toString()) == null){
					lt.add(new String(id1.toString())); RESULT = lt;
				}
				else 
					ErrorManager.agregarErrorSemantico(
								-1,
								-1,
								"Imposible agregar simbolo " + lt.toString() + " pues ya ha sido declarado previamente."
								);
					
					//throw new Exception("Error semantico");
				
              CUP$parser$result = new java_cup.runtime.Symbol(11/*lterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defterms ::= KW_NO KW_TERM lterm TK_PUNCOMA 
            {
              Object RESULT = null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList lista = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.getEngine().insertarNoTerminales(0,lista);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*defterms*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defterms ::= KW_NO KW_TERM tipoterm lterm TK_PUNCOMA 
            {
              Object RESULT = null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer tipo = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList lista = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		parser.getEngine().insertarNoTerminales(tipo.intValue(),lista);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*defterms*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // defterms ::= KW_TERM lterm TK_PUNCOMA 
            {
              Object RESULT = null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList lista = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.getEngine().insertarTerminales(0,lista);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*defterms*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // defterms ::= KW_TERM tipoterm lterm TK_PUNCOMA 
            {
              Object RESULT = null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer tipo = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList lista = (ArrayList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				parser.getEngine().insertarTerminales(tipo.intValue(),lista);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*defterms*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ldefterms ::= defterms 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*ldefterms*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ldefterms ::= ldefterms defterms 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*ldefterms*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= ldefterms TK_SEPARATOR grammar 
            {
              Object RESULT = null;
		/* Vmw.setVacc(engine);*/
              CUP$parser$result = new java_cup.runtime.Symbol(1/*inicio*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

