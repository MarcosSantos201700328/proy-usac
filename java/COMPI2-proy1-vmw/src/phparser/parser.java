
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Mar 20 20:47:57 CST 2007
//----------------------------------------------------

package phparser;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import errormanager.*;

/** CUP v0.10k generated parser.
  * @version Tue Mar 20 20:47:57 CST 2007
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\022\006\000\002\023\007\000\002" +
    "\006\012\000\002\005\003\000\002\033\005\000\002\033" +
    "\003\000\002\027\005\000\002\027\003\000\002\034\004" +
    "\000\002\034\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\007\015\000\002\026\003\000\002\026\004\000\002\031" +
    "\005\000\002\031\007\000\002\020\003\000\002\020\006" +
    "\000\002\035\005\000\002\035\003\000\002\030\003\000" +
    "\002\030\004\000\002\024\011\000\002\024\007\000\002" +
    "\025\007\000\002\032\003\000\002\032\005\000\002\013" +
    "\005\000\002\013\003\000\002\014\005\000\002\014\003" +
    "\000\002\014\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\006\000\002\015\006\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\005" +
    "\000\002\011\003\000\002\012\005\000\002\012\003\000" +
    "\002\016\005\000\002\016\003\000\002\016\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\020\004\012\005\006\033\004\034\022\037" +
    "\010\040\023\041\005\001\002\000\004\004\150\001\002" +
    "\000\004\017\205\001\002\000\004\024\177\001\002\000" +
    "\022\002\ufffb\004\ufffb\005\ufffb\033\ufffb\034\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\001\002\000\020\004\032\005\026\006" +
    "\044\007\040\010\037\017\054\036\034\001\002\000\022" +
    "\002\173\004\012\005\006\033\004\034\022\037\010\040" +
    "\023\041\005\001\002\000\004\017\170\001\002\000\022" +
    "\002\ufffa\004\ufffa\005\ufffa\033\ufffa\034\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\001\002\000\022\002\ufffd\004\ufffd\005\ufffd" +
    "\033\ufffd\034\ufffd\037\ufffd\040\ufffd\041\ufffd\001\002\000" +
    "\022\002\ufffe\004\ufffe\005\ufffe\033\ufffe\034\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\001\002\000\022\002\ufffc\004\ufffc\005" +
    "\ufffc\033\ufffc\034\ufffc\037\ufffc\040\ufffc\041\ufffc\001\002" +
    "\000\022\002\ufff8\004\ufff8\005\ufff8\033\ufff8\034\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\001\002\000\022\002\ufff9\004\ufff9" +
    "\005\ufff9\033\ufff9\034\ufff9\037\ufff9\040\ufff9\041\ufff9\001" +
    "\002\000\022\002\uffff\004\uffff\005\uffff\033\uffff\034\uffff" +
    "\037\uffff\040\uffff\041\uffff\001\002\000\004\004\150\001" +
    "\002\000\004\017\024\001\002\000\020\004\032\005\026" +
    "\006\044\007\040\010\037\017\043\036\034\001\002\000" +
    "\034\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\020\uffc3" +
    "\023\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\001\002\000\034\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\020\uffbe\023\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\032\uffbe\001\002\000\020\020\uffd5\025\uffd5" +
    "\026\uffd5\027\075\030\072\031\076\032\074\001\002\000" +
    "\034\012\uffc7\013\uffc7\014\uffc7\015\060\016\uffc7\020\uffc7" +
    "\023\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\001\002\000\006\020\120\025\064\001\002\000\004" +
    "\017\107\001\002\000\032\012\uffc9\013\uffc9\014\056\016" +
    "\uffc9\020\uffc9\023\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\001\002\000\034\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\020\uffe3\023\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\001\002\000\024\012" +
    "\052\013\051\020\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\001\002\000\010\020\uffd7\025\uffd7\026" +
    "\066\001\002\000\034\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\020\uffbf\023\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\001\002\000\034\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\020\uffc0\023\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\001\002\000\034" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\023" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\001\002\000\034\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\020\uffc5\023\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\001\002\000\020\004\032\005\026\006" +
    "\044\007\040\010\037\017\043\036\034\001\002\000\034" +
    "\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\020\uffc1\023" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\001\002\000\020\020\073\025\uffd5\026\uffd5\027\075\030" +
    "\072\031\076\032\074\001\002\000\006\020\063\025\064" +
    "\001\002\000\024\012\052\013\051\020\050\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\001\002\000\034" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\023" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\001\002\000\020\004\032\005\026\006\044\007\040\010" +
    "\037\017\054\036\034\001\002\000\020\004\032\005\026" +
    "\006\044\007\040\010\037\017\054\036\034\001\002\000" +
    "\032\012\uffcb\013\uffcb\014\056\016\uffcb\020\uffcb\023\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\001" +
    "\002\000\020\004\032\005\026\006\044\007\040\010\037" +
    "\017\054\036\034\001\002\000\010\012\052\013\051\020" +
    "\050\001\002\000\020\004\032\005\026\006\044\007\040" +
    "\010\037\017\054\036\034\001\002\000\034\012\uffc8\013" +
    "\uffc8\014\uffc8\015\060\016\uffc8\020\uffc8\023\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\001\002\000" +
    "\020\004\032\005\026\006\044\007\040\010\037\017\054" +
    "\036\034\001\002\000\034\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\020\uffc6\023\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\001\002\000\032\012\uffca\013" +
    "\uffca\014\056\016\uffca\020\uffca\023\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\032\uffca\001\002\000\010\020" +
    "\uffd4\025\uffd4\026\uffd4\001\002\000\020\004\032\005\026" +
    "\006\044\007\040\010\037\017\043\036\034\001\002\000" +
    "\010\020\uffd8\025\uffd8\026\066\001\002\000\020\004\032" +
    "\005\026\006\044\007\040\010\037\017\070\036\034\001" +
    "\002\000\020\020\uffd6\025\uffd6\026\uffd6\027\075\030\072" +
    "\031\076\032\074\001\002\000\020\004\032\005\026\006" +
    "\044\007\040\010\037\017\070\036\034\001\002\000\014" +
    "\020\073\027\075\030\072\031\076\032\074\001\002\000" +
    "\022\004\032\005\026\006\044\007\040\010\037\017\054" +
    "\031\104\036\034\001\002\000\020\020\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\001\002\000\020" +
    "\004\032\005\026\006\044\007\040\010\037\017\054\036" +
    "\034\001\002\000\022\004\032\005\026\006\044\007\040" +
    "\010\037\017\054\031\100\036\034\001\002\000\020\004" +
    "\032\005\026\006\044\007\040\010\037\017\054\036\034" +
    "\001\002\000\024\012\052\013\051\020\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\001\002\000\020" +
    "\004\032\005\026\006\044\007\040\010\037\017\054\036" +
    "\034\001\002\000\024\012\052\013\051\020\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\001\002\000" +
    "\024\012\052\013\051\020\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\001\002\000\024\012\052\013" +
    "\051\020\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\001\002\000\020\004\032\005\026\006\044\007" +
    "\040\010\037\017\054\036\034\001\002\000\024\012\052" +
    "\013\051\020\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\001\002\000\024\012\052\013\051\020\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\001" +
    "\002\000\022\004\032\005\026\006\044\007\040\010\037" +
    "\011\110\017\054\036\034\001\002\000\004\005\117\001" +
    "\002\000\006\020\114\023\115\001\002\000\012\012\052" +
    "\013\051\020\uffdf\023\uffdf\001\002\000\006\020\uffe0\023" +
    "\uffe0\001\002\000\034\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\020\uffe2\023\uffe2\025\uffe2\026\uffe2\027\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\001\002\000\022\004\032\005\026" +
    "\006\044\007\040\010\037\011\110\017\054\036\034\001" +
    "\002\000\006\020\uffe1\023\uffe1\001\002\000\006\020\uffde" +
    "\023\uffde\001\002\000\020\004\125\005\006\021\123\036" +
    "\034\037\010\040\023\041\005\001\002\000\032\002\uffed" +
    "\004\uffed\005\uffed\022\uffed\033\uffed\034\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\041\uffed\042\uffed\001\002\000\004" +
    "\016\146\001\002\000\016\004\125\005\006\036\034\037" +
    "\010\040\023\041\005\001\002\000\032\002\uffdc\004\uffdc" +
    "\005\uffdc\022\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\140\001\002\000\004\017\134" +
    "\001\002\000\032\002\uffe9\004\uffe9\005\uffe9\022\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\001\002\000\032\002\uffe7\004\uffe7\005\uffe7\022" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\001\002\000\032\002\uffea\004\uffea\005" +
    "\uffea\022\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\001\002\000\032\002\uffeb\004" +
    "\uffeb\005\uffeb\022\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002\000\032\002" +
    "\uffec\004\uffec\005\uffec\022\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\001\002\000" +
    "\032\002\uffda\004\uffda\005\uffda\022\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\001" +
    "\002\000\022\004\032\005\026\006\044\007\040\010\037" +
    "\011\110\017\054\036\034\001\002\000\006\020\136\023" +
    "\115\001\002\000\004\016\uffe2\001\002\000\032\002\uffe4" +
    "\004\uffe4\005\uffe4\022\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\001\002\000\020" +
    "\004\125\005\006\021\123\036\034\037\010\040\023\041" +
    "\005\001\002\000\032\002\uffdd\004\uffdd\005\uffdd\022\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041" +
    "\uffdd\042\uffdd\001\002\000\020\004\125\005\006\022\144" +
    "\036\034\037\010\040\023\041\005\001\002\000\022\004" +
    "\uffee\005\uffee\022\uffee\035\uffee\036\uffee\037\uffee\040\uffee" +
    "\041\uffee\001\002\000\032\002\uffd9\004\uffd9\005\uffd9\022" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\001\002\000\022\004\uffef\005\uffef\022" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\001\002" +
    "\000\032\002\uffe6\004\uffe6\005\uffe6\022\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\001\002\000\004\017\151\001\002\000\004\017\ufff4\001" +
    "\002\000\004\005\153\001\002\000\006\020\157\023\160" +
    "\001\002\000\010\020\ufff0\023\ufff0\024\155\001\002\000" +
    "\006\020\ufff2\023\ufff2\001\002\000\012\005\026\006\044" +
    "\007\040\010\037\001\002\000\006\020\ufff1\023\ufff1\001" +
    "\002\000\004\021\162\001\002\000\004\005\153\001\002" +
    "\000\006\020\ufff3\023\ufff3\001\002\000\016\004\125\005" +
    "\006\036\034\037\010\040\023\041\005\001\002\000\020" +
    "\004\125\005\006\035\164\036\034\037\010\040\023\041" +
    "\005\001\002\000\020\004\032\005\026\006\044\007\040" +
    "\010\037\017\054\036\034\001\002\000\010\012\052\013" +
    "\051\016\166\001\002\000\004\022\167\001\002\000\022" +
    "\002\uffe8\004\uffe8\005\uffe8\033\uffe8\034\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\001\002\000\022\004\032\005\026\006\044" +
    "\007\040\010\037\011\110\017\054\036\034\001\002\000" +
    "\006\020\172\023\115\001\002\000\004\016\137\001\002" +
    "\000\004\002\000\001\002\000\022\002\001\004\001\005" +
    "\001\033\001\034\001\037\001\040\001\041\001\001\002" +
    "\000\010\012\052\013\051\016\176\001\002\000\032\002" +
    "\uffe5\004\uffe5\005\uffe5\022\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\001\002\000" +
    "\022\004\032\005\026\006\044\007\040\010\037\011\200" +
    "\017\054\036\034\001\002\000\004\005\203\001\002\000" +
    "\010\012\052\013\051\016\202\001\002\000\032\002\ufff7" +
    "\004\ufff7\005\ufff7\022\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\001\002\000\004" +
    "\016\204\001\002\000\032\002\ufff6\004\ufff6\005\ufff6\022" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\001\002\000\020\004\032\005\026\006" +
    "\044\007\040\010\037\017\043\036\034\001\002\000\006" +
    "\020\207\025\064\001\002\000\020\004\125\005\006\021" +
    "\123\036\034\037\010\040\023\041\005\001\002\000\032" +
    "\002\uffdb\004\uffdb\005\uffdb\022\uffdb\033\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\001\002" +
    "\000\004\017\212\001\002\000\004\005\153\001\002\000" +
    "\006\020\214\023\160\001\002\000\004\021\215\001\002" +
    "\000\016\004\125\005\006\036\034\037\010\040\023\041" +
    "\005\001\002\000\020\004\125\005\006\022\217\036\034" +
    "\037\010\040\023\041\005\001\002\000\022\002\ufff5\004" +
    "\ufff5\005\ufff5\033\ufff5\034\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\024\003\010\004\020\006\015\007\006\022" +
    "\014\023\013\024\017\025\016\031\012\001\001\000\004" +
    "\005\210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\010\174\011\032\012\027\016\041" +
    "\020\024\021\040\001\001\000\022\004\173\006\015\007" +
    "\006\022\014\023\013\024\017\025\016\031\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\146\001\001\000" +
    "\002\001\001\000\024\010\034\011\032\012\027\013\030" +
    "\014\035\015\026\016\041\020\024\021\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\046\011\032\012\027\013\045" +
    "\014\035\015\044\016\041\020\024\021\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\011\061\012\027\016" +
    "\041\020\024\021\040\001\001\000\014\011\052\012\027" +
    "\016\041\020\024\021\040\001\001\000\002\001\001\000" +
    "\016\010\054\011\032\012\027\016\041\020\024\021\040" +
    "\001\001\000\002\001\001\000\012\012\056\016\041\020" +
    "\024\021\040\001\001\000\002\001\001\000\010\016\060" +
    "\020\024\021\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\034\011\032\012\027" +
    "\014\064\015\026\016\041\020\024\021\040\001\001\000" +
    "\002\001\001\000\020\010\034\011\032\012\027\015\066" +
    "\016\041\020\024\021\040\001\001\000\002\001\001\000" +
    "\020\010\046\011\032\012\027\015\070\016\041\020\024" +
    "\021\040\001\001\000\002\001\001\000\016\010\104\011" +
    "\032\012\027\016\041\020\024\021\040\001\001\000\002" +
    "\001\001\000\016\010\102\011\032\012\027\016\041\020" +
    "\024\021\040\001\001\000\016\010\100\011\032\012\027" +
    "\016\041\020\024\021\040\001\001\000\016\010\076\011" +
    "\032\012\027\016\041\020\024\021\040\001\001\000\002" +
    "\001\001\000\016\010\101\011\032\012\027\016\041\020" +
    "\024\021\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\010\105\011\032\012\027\016" +
    "\041\020\024\021\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\111\011\032\012\027\016\041\020" +
    "\024\021\040\030\112\035\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\111\011\032\012\027\016\041" +
    "\020\024\021\040\030\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\017\132\020\121\022\127\023\125" +
    "\024\131\025\130\026\120\031\126\032\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\017\142\020\121" +
    "\022\127\023\125\024\131\025\130\026\120\031\126\034" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\111" +
    "\011\032\012\027\016\041\020\024\021\040\030\112\035" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\017\132\020\121\022\127\023\125\024" +
    "\131\025\130\026\120\031\126\032\140\001\001\000\002" +
    "\001\001\000\022\017\144\020\121\022\127\023\125\024" +
    "\131\025\130\026\120\031\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\153\033\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\160\001\001\000\002\001\001\000" +
    "\024\017\142\020\121\022\127\023\125\024\131\025\130" +
    "\026\120\031\126\034\162\001\001\000\022\017\144\020" +
    "\121\022\127\023\125\024\131\025\130\026\120\031\126" +
    "\001\001\000\016\010\164\011\032\012\027\016\041\020" +
    "\024\021\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\111\011\032\012\027\016" +
    "\041\020\024\021\040\030\112\035\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\200" +
    "\011\032\012\027\016\041\020\024\021\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\034\011\032\012" +
    "\027\013\205\014\035\015\026\016\041\020\024\021\040" +
    "\001\001\000\002\001\001\000\024\017\132\020\121\022" +
    "\127\023\125\024\131\025\130\026\120\031\126\032\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\153\033\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\017\142\020\121\022\127\023\125\024\131\025" +
    "\130\026\120\031\126\034\215\001\001\000\022\017\144" +
    "\020\121\022\127\023\125\024\131\025\130\026\120\031" +
    "\126\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static void main(String args[]){
		if(args[0] != null){
			try{
			parser p = new parser(new Lexer(new FileReader(args[0])));
			p.debug_parse();
			}
			catch(Exception e){
				System.out.println(e);
			}
		}
	}
	
	public static String ambitoActual = new String("$root");


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

	
	//static Vacc engine;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // literal ::= TK_IDVAR 
            {
              NodoAst RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		// SymTab.SymTabEntry s;  if((s = PhParser.getTablaSimbolos().get(t1.toString())) != null)
			 	 	RESULT = Ast.crearNodo(Ast.N_SYMTABENTRY,null,null,t1.toString(),-1);
				//else{
				//	ErrorManager.agregarErrorSemantico(-1,-1,"Variable " + t1.toString() + " no existe.");
				//	parser.report_fatal_error("Imposible continuar con el analisis", null);
				//}
					
			/*System.out.println("SSs: " + t1 + "\n");*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // literal ::= TK_FLOAT 
            {
              NodoAst RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_LIT_FLOAT,null,null,new Float(Float.parseFloat(t1.toString())),-1);
			/*System.out.println("SSs: " + t1 + "\n");*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // literal ::= TK_STRING 
            {
              NodoAst RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_LIT_STRING,null,null,t1.toString(),-1);
/*System.out.println("SSs: " + t1 + "\n");*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= TK_INTEGER 
            {
              NodoAst RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue t1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_LIT_INT,null,null,new Integer(Integer.parseInt(t1.toString())),-1);
					/*System.out.println("SSs: " + t1 + "\n");*/
              CUP$parser$result = new java_cup.runtime.Symbol(15/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operando ::= literal 
            {
              NodoAst RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst l1 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l1;
              CUP$parser$result = new java_cup.runtime.Symbol(12/*operando*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operando ::= callFunc 
            {
              NodoAst RESULT = null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst cf = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = cf; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*operando*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operando ::= TK_APAREN opArit TK_CPAREN 
            {
              NodoAst RESULT = null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = oa;
              CUP$parser$result = new java_cup.runtime.Symbol(12/*operando*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // opDiv ::= operando 
            {
              NodoAst RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = o;
              CUP$parser$result = new java_cup.runtime.Symbol(8/*opDiv*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // opDiv ::= opDiv TK_SLASH operando 
            {
              NodoAst RESULT = null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst o1 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o2 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPARIT,o1,o2,null,Ast.OP_DIV); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*opDiv*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // opMul ::= opDiv 
            {
              NodoAst RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = o;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*opMul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // opMul ::= opMul TK_STAR opDiv 
            {
              NodoAst RESULT = null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst o1 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o2 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPARIT,o1,o2,null,Ast.OP_MUL); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*opMul*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opArit ::= opMul 
            {
              NodoAst RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = o;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*opArit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opArit ::= opArit TK_MENOS opMul 
            {
              NodoAst RESULT = null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst o1 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o2 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPARIT,o1,o2,null,Ast.OP_MENOS); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*opArit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opArit ::= opArit TK_MAS opMul 
            {
              NodoAst RESULT = null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst o1 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o2 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPARIT,o1,o2,null,Ast.OP_MAS); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*opArit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opComp ::= opArit 
            {
              NodoAst RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = o;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opComp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opComp ::= TK_APAREN opComp TK_CPAREN 
            {
              NodoAst RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = o;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opComp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opComp ::= opComp TK_GT opArit 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPCOMP,oc,oa,null,Ast.OP_GT); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opComp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opComp ::= opComp TK_LT opArit 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPCOMP,oc,oa,null,Ast.OP_LT); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opComp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opComp ::= opComp TK_GT TK_EQ opArit 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPCOMP,oc,oa,null,Ast.OP_GTE); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opComp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opComp ::= opComp TK_LT TK_EQ opArit 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPCOMP,oc,oa,null,Ast.OP_LTE); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opComp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opComp ::= opComp TK_NOTEQ opArit 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPCOMP,oc,oa,null,Ast.OP_NE); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opComp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opComp ::= opComp TK_EQ opArit 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPCOMP,oc,oa,null,Ast.OP_EQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opComp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opAnd ::= TK_APAREN opCond TK_CPAREN 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = oc;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*opAnd*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opAnd ::= opComp 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = oc;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*opAnd*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opAnd ::= opAnd TK_AND opComp 
            {
              NodoAst RESULT = null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPCOND,oa,oc,null,Ast.OP_AND); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*opAnd*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opCond ::= opAnd 
            {
              NodoAst RESULT = null;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = oa;
              CUP$parser$result = new java_cup.runtime.Symbol(9/*opCond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opCond ::= opCond TK_OR opAnd 
            {
              NodoAst RESULT = null;
		int ocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ocright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst oc = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst oa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodo(Ast.N_OPCOND,oc,oa,null,Ast.OP_OR); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*opCond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloque ::= TK_ALLAVE listaSentencias TK_CLLAVE 
            {
              LinkedList RESULT = null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ls = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ls;
              CUP$parser$result = new java_cup.runtime.Symbol(24/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloque ::= sentenciaSimple 
            {
              LinkedList RESULT = null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst ss = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<NodoAst> nodos = new LinkedList<NodoAst>();
					nodos.add(ss); RESULT = nodos;
              CUP$parser$result = new java_cup.runtime.Symbol(24/*bloque*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bucle ::= KW_WHILE TK_APAREN opCond TK_CPAREN bloque 
            {
              NodoAst RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst cond = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sTrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sTrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList sTrue = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = Ast.crearNodoWhile(Ast.N_WHILE,cond,sTrue);
              CUP$parser$result = new java_cup.runtime.Symbol(19/*bucle*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= KW_IF TK_APAREN opCond TK_CPAREN bloque 
            {
              NodoAst RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst cond = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sTrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sTrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList sTrue = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = Ast.crearNodoIf(Ast.N_IF,cond,sTrue,null);
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= KW_IF TK_APAREN opCond TK_CPAREN bloque KW_ELSE bloque 
            {
              NodoAst RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoAst cond = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sTrueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sTrueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList sTrue = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sFalseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sFalseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList sFalse = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = Ast.crearNodoIf(Ast.N_IF,cond,sTrue,sFalse);
              CUP$parser$result = new java_cup.runtime.Symbol(18/*condicion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arg ::= TK_AMP TK_IDVAR 
            {
              NodoAst RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodoParam(Ast.N_PARAMBYREF,new String(id.toString()),null); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arg ::= opArit 
            {
              NodoAst RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodoParam(Ast.N_PARAMBYVAL,null,o);
              CUP$parser$result = new java_cup.runtime.Symbol(22/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaArgs ::= arg 
            {
              LinkedList RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				LinkedList<NodoAst> largs = new LinkedList<NodoAst>();
				largs.add(o); RESULT = largs;
			
              CUP$parser$result = new java_cup.runtime.Symbol(27/*listaArgs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaArgs ::= listaArgs TK_COMA arg 
            {
              LinkedList RESULT = null;
		int laleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList la = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		la.add(o); RESULT = la;
              CUP$parser$result = new java_cup.runtime.Symbol(27/*listaArgs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // callFunc ::= TK_ID TK_APAREN listaArgs TK_CPAREN 
            {
              NodoAst RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList args = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Ast.crearNodoCallFunc(Ast.N_CALL,new String(id.toString()),args);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*callFunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // callFunc ::= KW_GET 
            {
              NodoAst RESULT = null;
		RESULT = Ast.crearNodoCallFunc(Ast.N_CALL,new String("@get"),null);
              CUP$parser$result = new java_cup.runtime.Symbol(14/*callFunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // callProc ::= TK_ID TK_APAREN listaArgs TK_CPAREN TK_PUNTOCOMA 
            {
              NodoAst RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList args = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = Ast.crearNodoCallFunc(Ast.N_CALL,new String(id.toString()),args);
              CUP$parser$result = new java_cup.runtime.Symbol(23/*callProc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // callProc ::= KW_ECHO opArit TK_PUNTOCOMA 
            {
              NodoAst RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoAst o = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			LinkedList<NodoAst> listaTemp = new LinkedList<NodoAst>();
			listaTemp.add(o);
RESULT = Ast.crearNodoCallFunc(Ast.N_CALL,new String("@echo"),listaTemp);
              CUP$parser$result = new java_cup.runtime.Symbol(23/*callProc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // callSimple ::= callFunc TK_PUNTOCOMA 
            {
              NodoAst RESULT = null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoAst cf = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cf; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*callSimple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // callSimple ::= callProc 
            {
              NodoAst RESULT = null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst cp = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = cp; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*callSimple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcion ::= KW_FUNCTION nombrefunproc TK_APAREN listaParam TK_CPAREN TK_ALLAVE listaSentencias KW_RETURN opArit TK_PUNTOCOMA TK_CLLAVE 
            {
              NodoAst RESULT = null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList lp = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList ls = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoAst ret = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
RESULT = Ast.crearNodoFuncion(Ast.N_FUNC,nombre,lp,ls,ret);
parser.ambitoActual = new String("$root"); 
	
              CUP$parser$result = new java_cup.runtime.Symbol(5/*funcion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciaSimple ::= asignacionRef 
            {
              NodoAst RESULT = null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst ar = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = ar;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentenciaSimple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciaSimple ::= asignacionVal 
            {
              NodoAst RESULT = null;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst av = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = av;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentenciaSimple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciaSimple ::= bucle 
            {
              NodoAst RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = b;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentenciaSimple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentenciaSimple ::= condicion 
            {
              NodoAst RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst c = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = c;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentenciaSimple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentenciaSimple ::= callSimple 
            {
              NodoAst RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst cs = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT = cs;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*sentenciaSimple*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listaSentencias ::= sentenciaSimple 
            {
              LinkedList RESULT = null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst ss = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		LinkedList<NodoAst> nodos = new LinkedList<NodoAst>();
					nodos.add(ss); RESULT = nodos;
              CUP$parser$result = new java_cup.runtime.Symbol(26/*listaSentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaSentencias ::= listaSentencias sentenciaSimple 
            {
              LinkedList RESULT = null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ls = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst ss = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		ls.add(ss); RESULT = ls;
              CUP$parser$result = new java_cup.runtime.Symbol(26/*listaSentencias*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param ::= TK_IDVAR 
            {
              NodoAst RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodoParam(Ast.N_PARAM,new String(id.toString()),null); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= TK_IDVAR TK_IGUAL literal 
            {
              NodoAst RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst li = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Ast.crearNodoParam(Ast.N_PARAM,new String(id.toString()),li); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*param*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaParam ::= param 
            {
              LinkedList RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst pa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				LinkedList<NodoAst> p = new LinkedList<NodoAst>();
			   	p.add(pa); RESULT = p; 
				
              CUP$parser$result = new java_cup.runtime.Symbol(25/*listaParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listaParam ::= listaParam TK_COMA param 
            {
              LinkedList RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList lp = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst pa = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 lp.add(pa); RESULT = lp;
              CUP$parser$result = new java_cup.runtime.Symbol(25/*listaParam*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nombrefunproc ::= TK_ID 
            {
              String RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TokenValue i1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.ambitoActual = new String(i1.toString()); RESULT = new String(i1.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*nombrefunproc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedimiento ::= KW_PROCEDURE nombrefunproc TK_APAREN listaParam TK_CPAREN TK_ALLAVE listaSentencias TK_CLLAVE 
            {
              NodoAst RESULT = null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList lp = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList ls = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
RESULT = Ast.crearNodoFuncion(Ast.N_FUNC,nombre,lp,ls,null);
parser.ambitoActual = new String("$root"); 
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*procedimiento*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asignacionRef ::= TK_IDVAR TK_IGUAL TK_AMP TK_IDVAR TK_PUNTOCOMA 
            {
              NodoAst RESULT = null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TokenValue var1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TokenValue var2 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Ast.crearNodoAsignacion(Ast.N_ASIGREF,null,var1.toString(),var2.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*asignacionRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asignacionVal ::= TK_IDVAR TK_IGUAL opArit TK_PUNTOCOMA 
            {
              NodoAst RESULT = null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenValue var1 = (TokenValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoAst o1 = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = Ast.crearNodoAsignacion(Ast.N_ASIGVAL,o1,var1.toString(),null);
              CUP$parser$result = new java_cup.runtime.Symbol(16/*asignacionVal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentenciaInit ::= bucle 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst b = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		Ast.ejecutarWhile(b,parser.ambitoActual);
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sentenciaInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentenciaInit ::= condicion 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst a = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		Ast.ejecutarIf(a,parser.ambitoActual);
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sentenciaInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentenciaInit ::= callProc 
            {
              Object RESULT = null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst cp = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		Ast.ejecutarFuncion(cp,parser.ambitoActual);
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sentenciaInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentenciaInit ::= funcion 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*sentenciaInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciaInit ::= procedimiento 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*sentenciaInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentenciaInit ::= asignacionRef 
            {
              Object RESULT = null;
		int arleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst ar = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			try{Ast.asignarReferencia(ar,parser.ambitoActual);}
					catch(Exception e){System.out.println(e);
						parser.report_fatal_error("Imposible continuar con el analisis", null);} 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sentenciaInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentenciaInit ::= asignacionVal 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodoAst a = (NodoAst)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		Ast.asignarValor(a,parser.ambitoActual);
              CUP$parser$result = new java_cup.runtime.Symbol(2/*sentenciaInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // php ::= sentenciaInit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*php*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= php EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // php ::= php sentenciaInit 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*php*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

