
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 29 12:41:10 CST 2007
//----------------------------------------------------

package optimizer;

import IlGen.*;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import errormanager.*;

/** CUP v0.10k generated parser.
  * @version Tue May 29 12:41:10 CST 2007
  */
public class OptParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public OptParser() {super();}

  /** Constructor which sets the default scanner. */
  public OptParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\017\004\000\002\023" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\004" +
    "\000\002\005\006\000\002\006\005\000\002\007\004\000" +
    "\002\007\003\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\003\000\002\010\003\000\002\011\010\000\002\011\010" +
    "\000\002\011\007\000\002\011\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\013\012" +
    "\000\002\016\004\000\002\014\003\000\002\015\005\000" +
    "\002\022\003\000\002\022\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\004\uffff\001\002\000\004\004\012\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\002\000\004\012\001\002\000\004\027\016\001" +
    "\002\000\006\002\ufffd\004\ufffd\001\002\000\004\005\013" +
    "\001\002\000\004\006\014\001\002\000\004\007\015\001" +
    "\002\000\004\027\ufffb\001\002\000\016\005\033\010\031" +
    "\031\023\032\035\041\021\042\022\001\002\000\006\002" +
    "\ufffc\004\ufffc\001\002\000\004\010\113\001\002\000\020" +
    "\005\uffde\010\uffde\030\uffde\031\uffde\032\uffde\041\uffde\042" +
    "\uffde\001\002\000\020\005\uffdd\010\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\041\uffdd\042\uffdd\001\002\000\004\006\076\001" +
    "\002\000\020\005\033\010\031\030\074\031\023\032\035" +
    "\041\021\042\022\001\002\000\004\010\073\001\002\000" +
    "\020\005\ufff8\010\ufff8\030\ufff8\031\ufff8\032\ufff8\041\ufff8" +
    "\042\ufff8\001\002\000\004\010\072\001\002\000\004\010" +
    "\071\001\002\000\020\005\ufff2\010\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\041\ufff2\042\ufff2\001\002\000\004\011\070\001" +
    "\002\000\012\006\040\011\uffe0\012\037\014\041\001\002" +
    "\000\020\005\ufff1\010\ufff1\030\ufff1\031\ufff1\032\ufff1\041" +
    "\ufff1\042\ufff1\001\002\000\004\005\036\001\002\000\004" +
    "\010\uffe1\001\002\000\014\005\055\016\042\017\043\020" +
    "\047\043\046\001\002\000\004\007\053\001\002\000\014" +
    "\005\044\016\042\017\043\020\047\043\046\001\002\000" +
    "\036\007\uffeb\010\uffeb\013\uffeb\015\uffeb\021\uffeb\022\uffeb" +
    "\023\uffeb\024\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\001\002\000\036\007\uffea\010\uffea\013\uffea" +
    "\015\uffea\021\uffea\022\uffea\023\uffea\024\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\001\002\000\024" +
    "\007\uffec\010\uffec\015\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\001\002\000\004\015\050\001\002" +
    "\000\036\007\uffe8\010\uffe8\013\uffe8\015\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\001\002\000\036\007\uffe9\010\uffe9\013" +
    "\uffe9\015\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\001\002\000" +
    "\004\012\051\001\002\000\014\005\044\016\042\017\043" +
    "\020\047\043\046\001\002\000\004\010\uffef\001\002\000" +
    "\004\010\uffdf\001\002\000\016\010\uffed\013\061\021\062" +
    "\022\065\023\064\024\063\001\002\000\020\010\uffec\013" +
    "\uffec\014\056\021\uffec\022\uffec\023\uffec\024\uffec\001\002" +
    "\000\014\005\044\016\042\017\043\020\047\043\046\001" +
    "\002\000\004\015\060\001\002\000\004\010\ufff0\001\002" +
    "\000\014\005\uffe3\016\uffe3\017\uffe3\020\uffe3\043\uffe3\001" +
    "\002\000\014\005\uffe7\016\uffe7\017\uffe7\020\uffe7\043\uffe7" +
    "\001\002\000\014\005\uffe4\016\uffe4\017\uffe4\020\uffe4\043" +
    "\uffe4\001\002\000\014\005\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\043\uffe5\001\002\000\014\005\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\043\uffe6\001\002\000\014\005\044\016\042\017\043" +
    "\020\047\043\046\001\002\000\004\010\uffee\001\002\000" +
    "\020\005\ufff5\010\ufff5\030\ufff5\031\ufff5\032\ufff5\041\ufff5" +
    "\042\ufff5\001\002\000\020\005\ufff3\010\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\041\ufff3\042\ufff3\001\002\000\020\005\ufff7" +
    "\010\ufff7\030\ufff7\031\ufff7\032\ufff7\041\ufff7\042\ufff7\001" +
    "\002\000\020\005\ufff6\010\ufff6\030\ufff6\031\ufff6\032\ufff6" +
    "\041\ufff6\042\ufff6\001\002\000\006\002\ufffa\004\ufffa\001" +
    "\002\000\020\005\ufff9\010\ufff9\030\ufff9\031\ufff9\032\ufff9" +
    "\041\ufff9\042\ufff9\001\002\000\014\005\044\016\042\017" +
    "\043\020\047\043\046\001\002\000\016\033\103\034\105" +
    "\035\100\036\106\037\101\040\102\001\002\000\014\005" +
    "\uffda\016\uffda\017\uffda\020\uffda\043\uffda\001\002\000\014" +
    "\005\uffd8\016\uffd8\017\uffd8\020\uffd8\043\uffd8\001\002\000" +
    "\014\005\uffd7\016\uffd7\017\uffd7\020\uffd7\043\uffd7\001\002" +
    "\000\014\005\uffdc\016\uffdc\017\uffdc\020\uffdc\043\uffdc\001" +
    "\002\000\014\005\044\016\042\017\043\020\047\043\046" +
    "\001\002\000\014\005\uffdb\016\uffdb\017\uffdb\020\uffdb\043" +
    "\uffdb\001\002\000\014\005\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\043\uffd9\001\002\000\004\007\110\001\002\000\004\032" +
    "\111\001\002\000\004\005\112\001\002\000\004\010\uffe2" +
    "\001\002\000\020\005\ufff4\010\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\041\ufff4\042\ufff4\001\002\000\006\002\ufffe\004\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\017\004\023\003\001\001\000\010\003" +
    "\006\004\010\005\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\113\005\007\001\001\000\004\006" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\023\010\025\011\026\013\024\014\031\015\027\016\017" +
    "\022\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\010\074\011\026\013\024\014\031\015\027\016\017\022" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\053\001\001\000\002\001" +
    "\001\000\004\012\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\065\001\001\000\002\001\001\000\004\012\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\076\001\001\000\004\021\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$OptParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$OptParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$OptParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(java_cup.runtime.Symbol cur_token){
		//TokenValue tk = (TokenValue) cur_token.value;
		//if(cur_token.value == null){
			ErrorManager.agregarErrorSintactico(((TokenValue)cur_token.value).getPosLine(),((TokenValue)cur_token.value).getPosChar(),"Error de Sintaxis al leer " + cur_token.value + " esto no va aqui");
			System.out.println("(" + ((TokenValue)cur_token.value).getPosLine() + "," + ((TokenValue)cur_token.value).getPosChar() + "): Error de Sintaxis al leer " + cur_token.value + " esto no va aqui");
	//	}
	//	else{
	//		ErrorManager.agregarErrorSintactico(tk.getPosLine(),tk.getPosChar(),"Error de Sintaxis en simbolo " + tk.toString());
	//		System.out.println("Error de Sintaxis");
	//	}
		//report_fatal_error("Error de Sintaxis", tk);
		done_parsing();
	}

	public static void main(String args[]){
		if(args[0] != null){
			try{
				OptParser p = new OptParser(new OptLexer(new FileReader(args[0])));
				p.debug_parse();
				//p.parse();
 			}
 			catch(Exception e){
 				System.out.println(e);
 			}
 			//finally{
 			//	Output.close();
 			//}
 		}
// 		if(args[0] != null){
// 			try{
// 			Output.setOutputFile("/home/kreig/test","outtest");
// 			CppParser p = new CppParser(new CppLexer(new FileReader(args[0])));
// 			p.debug_parse();
// 			//p.parse();
// 			}
// 			catch(Exception e){
// 				System.out.println(e);
// 			}
// 			finally{
// 				Output.close();
// 			}
// 		}
	}
	
	public static String a_bitoActual = new String("$root");


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$OptParser$actions {

	
	//static Vacc engine;


  private final OptParser parser;

  /** Constructor */
  CUP$OptParser$actions(OptParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$OptParser$do_action(
    int                        CUP$OptParser$act_num,
    java_cup.runtime.lr_parser CUP$OptParser$parser,
    java.util.Stack            CUP$OptParser$stack,
    int                        CUP$OptParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$OptParser$result;

      /* select the action based on the action number */
      switch (CUP$OptParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_comp ::= GT 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_GT); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(15/*op_comp*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_comp ::= LT 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_LT); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(15/*op_comp*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_comp ::= NE 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_NE); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(15/*op_comp*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_comp ::= EQ 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_EQ); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(15/*op_comp*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_comp ::= GE 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_GE); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(15/*op_comp*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_comp ::= LE 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_LE); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(15/*op_comp*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // iostmt ::= SCANF 
            {
              String RESULT = null;
		int sfleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int sfright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue sf = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addIgnoreString(sf.toString(),sf.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(16/*iostmt*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // iostmt ::= PRINTF 
            {
              String RESULT = null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue pf = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addIgnoreString(pf.toString(),pf.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(16/*iostmt*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // callstmt ::= IDENTIFIER APAR CPAR 
            {
              TokenValue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).value;
		Optimizer.addIgnoreString(
						new String(id + "();")
						,id.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(11/*callstmt*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // label ::= IDENTIFIER 
            {
              TokenValue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addLabel(id.toString(),id.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(10/*label*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // gotostmt ::= GOTO IDENTIFIER 
            {
              TokenValue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addGoto(id.toString(),id.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(12/*gotostmt*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ifstmt ::= IF APAR id_num op_comp id_num CPAR GOTO IDENTIFIER 
            {
              TokenValue RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).right;
		TokenValue id1 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-4)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue id3 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addIf(id1.toString(),op.intValue(),id2.toString(),id3.toString(),id1.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(9/*ifstmt*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arit_op ::= PERCENT 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_MOD); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(14/*arit_op*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // arit_op ::= SLASH 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_DIV); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(14/*arit_op*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arit_op ::= ASTERISK 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_MULT); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(14/*arit_op*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // arit_op ::= MINUS 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_MINUS); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(14/*arit_op*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // arit_op ::= PLUS 
            {
              Integer RESULT = null;
		RESULT = new Integer(Optimizer.OP_PLUS); 
              CUP$OptParser$result = new java_cup.runtime.Symbol(14/*arit_op*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // id_num ::= STRING_LITERAL 
            {
              TokenValue RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue sl = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		 RESULT = sl;
              CUP$OptParser$result = new java_cup.runtime.Symbol(8/*id_num*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // id_num ::= FLOATING_LITERAL 
            {
              TokenValue RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue fl = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		 RESULT = fl;
              CUP$OptParser$result = new java_cup.runtime.Symbol(8/*id_num*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // id_num ::= CHAR_LITERAL 
            {
              TokenValue RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue cl = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		 RESULT = cl;
              CUP$OptParser$result = new java_cup.runtime.Symbol(8/*id_num*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // id_num ::= INTEGER_LITERAL 
            {
              TokenValue RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue il = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		 RESULT = il;
              CUP$OptParser$result = new java_cup.runtime.Symbol(8/*id_num*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // id_num ::= IDENTIFIER 
            {
              TokenValue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		 RESULT = id;
              CUP$OptParser$result = new java_cup.runtime.Symbol(8/*id_num*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // asig ::= IDENTIFIER EQUALS id_num 
            {
              TokenValue RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).right;
		TokenValue id1 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addScalarAsig(id1.toString(),id2.toString(),id1.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(7/*asig*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asig ::= IDENTIFIER EQUALS id_num arit_op id_num 
            {
              TokenValue RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-4)).right;
		TokenValue id1 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue id3 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addAritOp(id1.toString(),id2.toString(),id3.toString(),op.intValue(),id1.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(7/*asig*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asig ::= IDENTIFIER ACOR id_num CCOR EQUALS id_num 
            {
              TokenValue RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).right;
		TokenValue id1 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue id3 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addMatAsig(id1.toString(),id2.toString(),id3.toString(),id1.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(7/*asig*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asig ::= IDENTIFIER EQUALS IDENTIFIER ACOR id_num CCOR 
            {
              TokenValue RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).right;
		TokenValue id1 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).right;
		TokenValue id3 = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).value;
		Optimizer.addDesRef(id1.toString(),id2.toString(),id3.toString(),id1.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(7/*asig*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= iostmt 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= SEMICOLON 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= callstmt SEMICOLON 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= gotostmt SEMICOLON 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= label COLON 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= ifstmt SEMICOLON 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= asig SEMICOLON 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statements ::= statement 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(5/*statements*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statements ::= statements statement 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(5/*statements*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proc_body ::= ALLAVE statements CLLAVE 
            {
              TokenValue RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue cl = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		 RESULT = cl;
              CUP$OptParser$result = new java_cup.runtime.Symbol(4/*proc_body*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_head ::= VOID IDENTIFIER APAR CPAR 
            {
              TokenValue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-2)).value;
		Optimizer.addBeginProc(id.toString(),id.getPosLine()); RESULT = id;
              CUP$OptParser$result = new java_cup.runtime.Symbol(3/*proc_head*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // proc ::= proc_head proc_body 
            {
              TokenValue RESULT = null;
		int phleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left;
		int phright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).right;
		TokenValue ph = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right;
		TokenValue pb = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).value;
		Optimizer.addEndProc(ph.toString(),pb.getPosLine());
              CUP$OptParser$result = new java_cup.runtime.Symbol(2/*proc*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // optimizer ::= proc 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(1/*optimizer*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // optimizer ::= optimizer proc 
            {
              TokenValue RESULT = null;

              CUP$OptParser$result = new java_cup.runtime.Symbol(1/*optimizer*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // setup ::= 
            {
              String RESULT = null;
		Optimizer.init();
              CUP$OptParser$result = new java_cup.runtime.Symbol(17/*setup*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= setup optimizer 
            {
              TokenValue RESULT = null;
		 Optimizer.naranjas(); //debug

              CUP$OptParser$result = new java_cup.runtime.Symbol(13/*initial*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          return CUP$OptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).right;
		TokenValue start_val = (TokenValue)((java_cup.runtime.Symbol) CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).value;
		RESULT = start_val;
              CUP$OptParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$OptParser$stack.elementAt(CUP$OptParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$OptParser$parser.done_parsing();
          return CUP$OptParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

