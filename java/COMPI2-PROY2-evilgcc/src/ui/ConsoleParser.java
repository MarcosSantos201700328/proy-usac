
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 29 19:19:22 CST 2007
//----------------------------------------------------

package ui;

import java_cup.runtime.*;
import errormanager.*;
import java.util.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Tue May 29 19:19:22 CST 2007
  */
public class ConsoleParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConsoleParser() {super();}

  /** Constructor which sets the default scanner. */
  public ConsoleParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\006\004\000\002\006\004\000\002\006" +
    "\004\000\002\007\004\000\002\007\003\000\002\010\004" +
    "\000\002\010\003\000\002\011\004\000\002\011\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\005\000\002" +
    "\012\004\000\002\013\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\014\004" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\015\004\000\002\015\004\000\002\016" +
    "\004\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\024\004\012\005\004\006\007\007\010\010" +
    "\023\011\024\012\011\013\015\014\013\001\002\000\026" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\001\002\000\026\002\000" +
    "\004\012\005\004\006\007\007\010\010\023\011\024\012" +
    "\011\013\015\014\013\001\002\000\026\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\001\002\000\026\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\001\002\000\030\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\020" +
    "\070\001\002\000\010\020\045\021\046\026\043\001\002" +
    "\000\010\015\037\017\041\020\040\001\002\000\006\015" +
    "\035\020\036\001\002\000\026\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\001\002\000\006\015\033\020\034\001\002\000\004" +
    "\002\032\001\002\000\026\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc" +
    "\001\002\000\026\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\001\002" +
    "\000\026\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\001\002\000\026" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\001\002\000\030\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\020\031\001\002\000\006\015\027" +
    "\020\030\001\002\000\026\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\001\002\000\026\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\001\002" +
    "\000\026\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\001\002\000\026" +
    "\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\001\002\000\026\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\001\002\000\004\002\001\001\002" +
    "\000\026\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\001\002\000\026" +
    "\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\001\002\000\026\002\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\001\002\000\026\002\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013" +
    "\uffd8\014\uffd8\001\002\000\026\002\ufff4\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\001\002\000\026\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\001" +
    "\002\000\026\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\001\002\000" +
    "\026\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\001\002\000\036\002" +
    "\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\013\uffde\014\uffde\015\061\027\063\030\062\031" +
    "\064\001\002\000\030\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\026" +
    "\043\001\002\000\026\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\001" +
    "\002\000\014\015\047\022\052\023\053\024\051\025\050" +
    "\001\002\000\030\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\026\uffe7" +
    "\001\002\000\004\015\057\001\002\000\004\015\056\001" +
    "\002\000\004\015\055\001\002\000\004\015\054\001\002" +
    "\000\030\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\026\uffe5\001\002" +
    "\000\030\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\026\uffe6\001\002" +
    "\000\030\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\026\uffe4\001\002" +
    "\000\030\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\026\uffe3\001\002" +
    "\000\026\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\001\002\000\026" +
    "\002\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\001\002\000\030\002\uffdc" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\067\001\002\000\030\002\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\066\001\002\000\030\002\uffdb" +
    "\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012" +
    "\uffdb\013\uffdb\014\uffdb\015\065\001\002\000\026\002\uffdf" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\001\002\000\026\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\001\002\000\026\002\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\001\002\000\026\002\ufff1\004\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\001" +
    "\002\000\026\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff" +
    "\010\uffff\011\uffff\012\uffff\013\uffff\014\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\026\003\015\004\004\005\025\006\024\007" +
    "\016\010\005\011\017\012\021\015\013\016\020\001\001" +
    "\000\002\001\001\000\022\005\070\006\024\007\016\010" +
    "\005\011\017\012\021\015\013\016\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\043\014\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConsoleParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConsoleParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConsoleParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  	public void syntax_error(java_cup.runtime.Symbol cur_token){
		MainWindow.getConsolaActual().writeLn("(" + ((TokenValue)cur_token.value).getPosLine() + "," + ((TokenValue)cur_token.value).getPosChar() +"): Error de Sintaxis al leer " + cur_token.value + " esto no va aqui");
		done_parsing();
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConsoleParser$actions {

	
	Consola actual = MainWindow.getConsolaActual();

  private final ConsoleParser parser;

  /** Constructor */
  CUP$ConsoleParser$actions(ConsoleParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ConsoleParser$do_action(
    int                        CUP$ConsoleParser$act_num,
    java_cup.runtime.lr_parser CUP$ConsoleParser$parser,
    java.util.Stack            CUP$ConsoleParser$stack,
    int                        CUP$ConsoleParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConsoleParser$result;

      /* select the action based on the action number */
      switch (CUP$ConsoleParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // run_comando ::= MV FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.run(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(12/*run_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // run_comando ::= MV HELP 
            {
              Object RESULT = null;
		 actual.helpRun(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(12/*run_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // compile_comando ::= MVC FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.compile(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(11/*compile_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // compile_comando ::= MVC HELP 
            {
              Object RESULT = null;
		 actual.helpCompile(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(11/*compile_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // show_err ::= SS SE 
            {
              Object RESULT = null;
		 actual.showSemErrors(null); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(10/*show_err*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // show_err ::= SS SX 
            {
              Object RESULT = null;
		 actual.showSynErrors(null); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(10/*show_err*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // show_err ::= SS LX 
            {
              Object RESULT = null;
		 actual.showLexErrors(null); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(10/*show_err*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // show_err ::= SS 
            {
              Object RESULT = null;
		 actual.showAllErrors(null); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(10/*show_err*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // show_err ::= SS SE FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.showSemErrors(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(10/*show_err*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // show_err ::= SS SX FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.showSynErrors(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(10/*show_err*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // show_err ::= SS LX FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.showLexErrors(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(10/*show_err*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // show_err ::= SS FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.showAllErrors(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(10/*show_err*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // show_opts ::= SO SI FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(9/*show_opts*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // show_opts ::= SO ST FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.showTransOpt(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(9/*show_opts*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // show_opts ::= SO SP FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.showPropOpt(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(9/*show_opts*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // show_opts ::= SO SR FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.showExpOpt(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(9/*show_opts*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // show_opts ::= SO FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.showAllOpts(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(9/*show_opts*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // show_comando ::= SHOW HELP 
            {
              Object RESULT = null;
		 actual.helpShow(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(8/*show_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // show_comando ::= SHOW show_opts show_err 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(8/*show_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // show_comando ::= SHOW show_err 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(8/*show_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // show_comando ::= SHOW show_opts 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(8/*show_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // load_comando ::= ARROBA HELP 
            {
              Object RESULT = null;
		 actual.helpLoad(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(7/*load_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // load_comando ::= ARROBA FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.load(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(7/*load_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // new_comando ::= NEW 
            {
              Object RESULT = null;
		 actual.addTab();; 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(6/*new_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // new_comando ::= NEW HELP 
            {
              Object RESULT = null;
		 actual.helpNew(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(6/*new_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clear_comando ::= CLEAR 
            {
              Object RESULT = null;
		 actual.clear(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(5/*clear_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clear_comando ::= CLEAR HELP 
            {
              Object RESULT = null;
		 actual.helpClear(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(5/*clear_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dir_comando ::= CD DOTDOT 
            {
              Object RESULT = null;
		 actual.cambiarDirSup(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(4/*dir_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dir_comando ::= CD HELP 
            {
              Object RESULT = null;
		 actual.helpDir(); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(4/*dir_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dir_comando ::= CD FILENAME 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).value;
		 actual.cambiarDir(f.toString()); 
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(4/*dir_comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comando ::= CLOSE 
            {
              Object RESULT = null;
		 MainWindow.cerrarTab();
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comando ::= EXIT 
            {
              Object RESULT = null;
		 Consola.salir();
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comando ::= run_comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comando ::= compile_comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comando ::= show_comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comando ::= load_comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comando ::= new_comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comando ::= clear_comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // comando ::= dir_comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(3/*comando*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // comandos ::= comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(2/*comandos*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // comandos ::= comandos comando 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(2/*comandos*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // goal ::= comandos 
            {
              Object RESULT = null;

              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(1/*goal*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          return CUP$ConsoleParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).value;
		RESULT = start_val;
              CUP$ConsoleParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$ConsoleParser$stack.elementAt(CUP$ConsoleParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ConsoleParser$parser.done_parsing();
          return CUP$ConsoleParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

