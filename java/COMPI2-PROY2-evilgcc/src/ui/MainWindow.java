/*
 * MainWindow.java
 *
 * Created on 1 de mayo de 2007, 10:56 AM
 */

package ui;



import javax.swing.*;
/**
 * Ventana principal de la interfaz de usuario, en esta se encuentra el punto de entrada principal de la aplicacion
 * @author  kreig
 */
public class MainWindow extends javax.swing.JFrame {
    private static int tabActual = 0;
    
    
    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
        initTabs();
    }
    /**Inicializa las consolas*/
    private static void initTabs(){
        addTab();
    }
    
    /**Agrega una nueva consola al tab*/
    public static void addTab(){
        Consola nuevo = new Consola();
        consoleTabs.addTab("Consola " + consoleTabs.getTabCount(),nuevo);
        //if(consoleTabs.getTabCount() > 1)
            consoleTabs.setSelectedIndex(consoleTabs.getTabCount() -1);
        tabActual = consoleTabs.getSelectedIndex();
        
    }
    
    /**Devuelve la consola del tab actual*/
    protected static Consola getConsolaActual(){
        return (Consola) consoleTabs.getSelectedComponent();
    }
    
    public static void cerrarTab(){
        Consola.flush();
        if(consoleTabs.getTabCount() > 1){
            consoleTabs.remove(consoleTabs.getSelectedIndex());
            tabActual = consoleTabs.getSelectedIndex();
        }
        else
            ((Consola)consoleTabs.getSelectedComponent()).writeLn("No se pueden cerrar mas pestanas");
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jTextField1 = new javax.swing.JTextField();
        consoleTabs = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuArchivo = new javax.swing.JMenu();
        jMenuNewTab = new javax.swing.JMenuItem();
        jMenuAbrir = new javax.swing.JMenuItem();
        jMenuChdir = new javax.swing.JMenuItem();
        jMenuClear = new javax.swing.JMenuItem();
        jSeparator = new javax.swing.JSeparator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuCompile = new javax.swing.JMenu();
        jMenuItemCompile = new javax.swing.JMenuItem();
        jMenuEjecutar = new javax.swing.JMenu();
        jMenuItemRun = new javax.swing.JMenuItem();
        jMenuItemError = new javax.swing.JMenuItem();
        jMenuAyuda = new javax.swing.JMenu();
        jMenuUserGuide = new javax.swing.JMenuItem();
        jMenuTechGuide = new javax.swing.JMenuItem();
        jMenuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EvilGCC CLI");
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel1.setText("Comandos:");

        jMenuArchivo.setMnemonic('a');
        jMenuArchivo.setText("Archivo");
        jMenuNewTab.setMnemonic('n');
        jMenuNewTab.setText("Nueva Pesta\u00f1a");
        jMenuNewTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNewTabActionPerformed(evt);
            }
        });

        jMenuArchivo.add(jMenuNewTab);

        jMenuAbrir.setMnemonic('a');
        jMenuAbrir.setText("Abrir Script...");
        jMenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAbrirActionPerformed(evt);
            }
        });

        jMenuArchivo.add(jMenuAbrir);

        jMenuChdir.setMnemonic('d');
        jMenuChdir.setText("Cambiar Directorio...");
        jMenuChdir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuChdirActionPerformed(evt);
            }
        });

        jMenuArchivo.add(jMenuChdir);

        jMenuClear.setMnemonic('l');
        jMenuClear.setText("Limpiar");
        jMenuClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuClearActionPerformed(evt);
            }
        });

        jMenuArchivo.add(jMenuClear);

        jMenuArchivo.add(jSeparator);

        jMenuItemExit.setMnemonic('s');
        jMenuItemExit.setText("Salir");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });

        jMenuArchivo.add(jMenuItemExit);

        jMenuBar.add(jMenuArchivo);

        jMenuCompile.setMnemonic('c');
        jMenuCompile.setText("Compilar");
        jMenuItemCompile.setMnemonic('c');
        jMenuItemCompile.setText("Compilar");
        jMenuItemCompile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCompileActionPerformed(evt);
            }
        });

        jMenuCompile.add(jMenuItemCompile);

        jMenuBar.add(jMenuCompile);

        jMenuEjecutar.setMnemonic('e');
        jMenuEjecutar.setText("Ejecutar");
        jMenuItemRun.setMnemonic('i');
        jMenuItemRun.setText("Interpretar");
        jMenuItemRun.setEnabled(false);
        jMenuItemRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRunActionPerformed(evt);
            }
        });

        jMenuEjecutar.add(jMenuItemRun);

        jMenuItemError.setMnemonic('e');
        jMenuItemError.setText("Errores");
        jMenuItemError.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemErrorActionPerformed(evt);
            }
        });

        jMenuEjecutar.add(jMenuItemError);

        jMenuBar.add(jMenuEjecutar);

        jMenuAyuda.setMnemonic('?');
        jMenuAyuda.setText("?");
        jMenuUserGuide.setMnemonic('u');
        jMenuUserGuide.setText("Manual de Usuario");
        jMenuUserGuide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuUserGuideActionPerformed(evt);
            }
        });

        jMenuAyuda.add(jMenuUserGuide);

        jMenuTechGuide.setMnemonic('t');
        jMenuTechGuide.setText("Manual Tecnico");
        jMenuTechGuide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTechGuideActionPerformed(evt);
            }
        });

        jMenuAyuda.add(jMenuTechGuide);

        jMenuAbout.setMnemonic('a');
        jMenuAbout.setText("Acerca de...");
        jMenuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAboutActionPerformed(evt);
            }
        });

        jMenuAyuda.add(jMenuAbout);

        jMenuBar.add(jMenuAyuda);

        setJMenuBar(jMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, consoleTabs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(consoleTabs, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuTechGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTechGuideActionPerformed
        Process p;
        try{
            p = Runtime.getRuntime().exec("firefox ../doc/techmanual.pdf");
        }
        catch(Exception e){
            this.getConsolaActual().writeLn("Error al abrir manual: " + e.toString());
        }
    }//GEN-LAST:event_jMenuTechGuideActionPerformed

    private void jMenuUserGuideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuUserGuideActionPerformed
        Process p;
        try{
            p = Runtime.getRuntime().exec("firefox ../doc/usermanual.pdf");
        }
        catch(Exception e){
            this.getConsolaActual().writeLn("Error al abrir manual: " + e.toString());
        }
    }//GEN-LAST:event_jMenuUserGuideActionPerformed

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        if(evt.getKeyCode() == evt.VK_ENTER){
            this.getConsolaActual().ejecutar(jTextField1.getText());
            jTextField1.setText(null);
        }        
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jMenuItemErrorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemErrorActionPerformed
        this.getConsolaActual().ejecutar("show -s");
    }//GEN-LAST:event_jMenuItemErrorActionPerformed

    private void jMenuItemRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRunActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this.getContentPane());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                chooser.getSelectedFile().getName());
            try{
                this.getConsolaActual().ejecutar("mv " + chooser.getSelectedFile().getName());
            }
            catch (Exception e){
                System.out.println("Imposible abrir archivo " + e);
            }
        }
    }//GEN-LAST:event_jMenuItemRunActionPerformed

    private void jMenuItemCompileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCompileActionPerformed
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this.getContentPane());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                chooser.getSelectedFile().getName());
            try{
                this.getConsolaActual().ejecutar("mvc " + chooser.getSelectedFile().getPath());
            }
            catch (Exception e){
                System.out.println("Imposible abrir archivo " + e);
            }
        }
    }//GEN-LAST:event_jMenuItemCompileActionPerformed

    private void jMenuChdirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuChdirActionPerformed
         JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this.getContentPane());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                chooser.getSelectedFile().getName());
            try{
                this.getConsolaActual().ejecutar("cd " + chooser.getCurrentDirectory());
            }
            catch (Exception e){
                System.out.println("Imposible abrir directorio " + e);
            }
        }
    }//GEN-LAST:event_jMenuChdirActionPerformed

    private void jMenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAbrirActionPerformed
        abrirScript();
            
    }//GEN-LAST:event_jMenuAbrirActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuNewTabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNewTabActionPerformed
        addTab();
    }//GEN-LAST:event_jMenuNewTabActionPerformed

    private void jMenuClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuClearActionPerformed
        this.getConsolaActual().clear();
    }//GEN-LAST:event_jMenuClearActionPerformed

    private void jMenuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAboutActionPerformed
        this.getConsolaActual().writeLn("\nAcerca de: EvilGCC:");
        this.getConsolaActual().writeLn("EvilGCC - Erik's Visual Intermediate Language Generator and Compiler Collection");
        this.getConsolaActual().writeLn("===============================================================================");
        this.getConsolaActual().writeLn("Disenado y programado por Erik Giron (C#200313492)");
        this.getConsolaActual().writeLn("Para el segundo proyecto del curso Compiladores 2");
        this.getConsolaActual().writeLn("FACULTAD DE INGENIERIA, USAC");
        this.getConsolaActual().writeLn("(c) Erik Giron 2007");
        this.getConsolaActual().writeLn("Distribuido bajo los terminos de la licencia GNU GPL v2 o posterior, para mas informacion ver license.txt\n");
    }//GEN-LAST:event_jMenuAboutActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
                
            }
        });
    }

    private void abrirScript() {
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this.getContentPane());
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println("You chose to open this file: " +
                chooser.getSelectedFile().getName());
            try{
                this.getConsolaActual().ejecutar("@" + chooser.getSelectedFile().getName());
            }
            catch (Exception e){
                System.out.println("Imposible abrir archivo " + e);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTabbedPane consoleTabs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuAbout;
    private javax.swing.JMenuItem jMenuAbrir;
    private javax.swing.JMenu jMenuArchivo;
    private javax.swing.JMenu jMenuAyuda;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jMenuChdir;
    private javax.swing.JMenuItem jMenuClear;
    private javax.swing.JMenu jMenuCompile;
    private javax.swing.JMenu jMenuEjecutar;
    private javax.swing.JMenuItem jMenuItemCompile;
    private javax.swing.JMenuItem jMenuItemError;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemRun;
    private javax.swing.JMenuItem jMenuNewTab;
    private javax.swing.JMenuItem jMenuTechGuide;
    private javax.swing.JMenuItem jMenuUserGuide;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
    
}
