/*
 * Consola.java
 *
 * Created on 1 de mayo de 2007, 11:01 AM
 */

package ui;

import java.io.*;
import IlGen.*;
import errormanager.*;
import optimizer.*;
/**
 * Panel que conforma la salida de datos de la consola
 * @author  kreig
 */
public class Consola extends javax.swing.JPanel {
    
    private static final int CPP = 0;
    private static final int PASCAL = 1;
    private static final int JAVA = 2;
    
    protected int compiladorPredet = -1;
    
    private String dirActual = new String(System.getProperty("user.dir"));
    
    /** Creates new form Consola */
    public Consola() {
        initComponents();
        this.jLabelDirActual.setText(dirActual);
    }
    
    public void setDirActual(String dir){
        dirActual = dir;
        this.jLabelDirActual.setText(dirActual);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jFrameChooseFileType = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabelDirActual = new javax.swing.JLabel();

        jFrameChooseFileType.setTitle("Seleccionar lenguaje...");
        jFrameChooseFileType.setAlwaysOnTop(true);
        jFrameChooseFileType.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLabel2.setText("En que lenguaje esta escrito el codigo fuente?");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "en C++", "En Pascal", "en Java" }));

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jFrameChooseFileTypeLayout = new org.jdesktop.layout.GroupLayout(jFrameChooseFileType.getContentPane());
        jFrameChooseFileType.getContentPane().setLayout(jFrameChooseFileTypeLayout);
        jFrameChooseFileTypeLayout.setHorizontalGroup(
            jFrameChooseFileTypeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jFrameChooseFileTypeLayout.createSequentialGroup()
                .addContainerGap()
                .add(jFrameChooseFileTypeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jFrameChooseFileTypeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jComboBox1, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
                .addContainerGap())
        );
        jFrameChooseFileTypeLayout.setVerticalGroup(
            jFrameChooseFileTypeLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jFrameChooseFileTypeLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextArea.setBackground(new java.awt.Color(51, 51, 51));
        jTextArea.setColumns(20);
        jTextArea.setEditable(false);
        jTextArea.setFont(new java.awt.Font("Courier New", 1, 12));
        jTextArea.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea.setLineWrap(true);
        jTextArea.setRows(5);
        jTextArea.setWrapStyleWord(true);
        jTextArea.setSelectedTextColor(new java.awt.Color(255, 102, 102));
        jTextArea.setSelectionColor(new java.awt.Color(51, 204, 255));
        jScrollPane1.setViewportView(jTextArea);

        jLabel1.setText("Directorio Actual:");

        jLabelDirActual.setForeground(new java.awt.Color(0, 0, 255));
        jLabelDirActual.setText("jLabel2");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelDirActual, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabelDirActual)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.compiladorPredet = jComboBox1.getSelectedIndex();
        this.jFrameChooseFileType.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**Escribe mensaje a consola*/
    public void write(String s){        
        this.jTextArea.append(s);
    }
    
    /**manera segura de salir de la aplicacion*/
    public static void salir(){
        flush();
        System.exit(0);
    }
    
    /**Cierra streams que hayan quedado abiertos*/
    public static void flush(){
        Output.close();
    }
    /**Escribe mensaje a consola con cambio de linea*/
    public void writeLn(String s){
        this.jTextArea.append(s + "\n");     
        System.out.println(s);
    }
    /**Limpia el tab actual*/
    public void clear(){
        this.jTextArea.setText(null);
    }
    /**Ejecuta un comando dado*/
    void ejecutar(String string) {
        //this.writeLn(string);
        StringReader sr = new StringReader(string);		
        int i = 0;
        if(string != null){
            try{
                    ConsoleParser p = new ConsoleParser(new ConsoleLexer(new BufferedReader(sr)));
                    p.parse();                    
                    i++;
                }
                catch(Exception e){
                    //this.writeLn(e.toString());
                    System.out.println(e.toString());                    
            }
	}
    }

    /**Ejecuta el archivo paquete de IL dado*/
    void  run(String filename) {
        throw new UnsupportedOperationException("Comando todavia no implementado...");
    }

    /**Muestra ayuda del comando run*/
    void helpRun() {
        this.writeLn("\n AYUDA DEL COMANDO \"mv\"");
        this.writeLn(" =======================");
        this.writeLn(" Descripcion: Ejecuta el paquete dado\n");
        this.writeLn(" Parametros:");
        this.writeLn(" -h: muestra esta ayuda");
        this.writeLn(" [archivo_paquete]: Ejecuta el paquete especificado");
        //throw new UnsupportedOperationException("Comando todavia no implementado...");
    }

    /**compila el archivo dado y genera un paquete*/
    void compile(String filename) {
        int indice = filename.lastIndexOf(".");
        String extension;
        // Asignamos archivo de salida.
        String fname = getNameFromFilename(filename);
        try{
            Output.setOutputFile(dirActual,fname);
        }
        catch(Exception e){
            this.writeLn("Imposible escribir a archivo, el error fue: " + e.toString());
        }
//        Output.setFilename(fname);
//        Output.setPath(dirActual);
        if(indice != -1){
            extension = filename.substring(indice);
            if(extension != null && extension.equalsIgnoreCase(".cpp")){
                compilar(filename,CPP);
            }
            else if(extension != null && extension.equalsIgnoreCase(".java")){
                compilar(filename,JAVA);
            }
            else if(extension != null && extension.equalsIgnoreCase(".pas")){
                compilar(filename,PASCAL);
            }
            else{
                //compilar(filename,preguntaExtension());
                this.writeLn("Aviso: Extension desconocida, la extension debe ser .cpp para c++, .java para java, .pas. para pascal.");
 //               compilar(filename,CPP);
            }
        }
        else{
            //compilar(filename,preguntaExtension());
            this.writeLn("Aviso: Extension desconocida, la extension debe ser .cpp para c++, .java para java, .pas. para pascal.");
 //           compilar(filename,CPP);
        }
    }

    /**Muestra ayuda del comando compile*/
    void  helpCompile() {
        this.writeLn("\n AYUDA DEL COMANDO \"mvc\"");
        this.writeLn(" ========================");
        this.writeLn(" Descripcion: Compila la fuente dada\n");
        this.writeLn(" Parametros:");
        this.writeLn(" -h: muestra esta ayuda");
        this.writeLn(" [archivo_fuente]: Compila este archivo y genera un paquete del mismo nombre en el directorio actual");
    }

    /**Muestra errores semanticos y los guarda en archivo*/
    void  showSemErrors(String filename) {
        this.write(ErrorManager.printErroresSemanticos());
        //throw new UnsupportedOperationException("Comando todavia no implementado...");
    }

    /**Muestra errores sintacticos y los guarda en archivo*/
    void showSynErrors(String filename) {
        this.write(ErrorManager.printErroresSintaticos());
    }

    /**Muestra errores lexicos y los guarda en archivo*/
    void showLexErrors(String filename) {
        this.write(ErrorManager.printErroresLexicos());
    }

    /**Muestra todo tipo de errores y los guarda en archivo*/
    void showAllErrors(String string) {
        this.write(ErrorManager.printAll());
    }
    
    /**Optimiza codigo de 3 direcciones usando transformaciones aritmeticas y muestra resultado*/
    void showTransOpt(String filename) {      
        try{
            Optimizer.optimizar(filename,3);
            this.writeLn("La optimizacion por transformaciones aritmeticas fue existosa...");
            this.writeLn("puede ver el resultado en "+ filename + ".htm");
            this.writeLn("y en " + filename + ".opt");
        }
        catch(Exception e){
            System.out.println("Imposible optimizar, el error fue: " + e.toString());
        }
    }
    
    /**Optimiza codigo de 3 direcciones reutilizando expresiones comunes y muestra resultado*/
    void showExpOpt(String filename) {
        try{
            Optimizer.optimizar(filename,1);
            this.writeLn("La optimizacion por reutilizacion de exp. comunes fue existosa...");
            this.writeLn("puede ver el resultado en "+ filename + ".htm");
            this.writeLn("y en " + filename + ".opt");
        }
        catch(Exception e){
            System.out.println("Imposible optimizar, el error fue: " + e.toString());
        }
    }
    
    /**Optimiza codigo de 3 direcciones por propagacion de copias y muestra resultado*/
    void showPropOpt(String filename) {
        try{
            Optimizer.optimizar(filename,2);
            this.writeLn("La optimizacion por propagacion de copias fue existosa...");
            this.writeLn("puede ver el resultado en "+ filename + ".htm");
            this.writeLn("y en " + filename + ".opt");
        }
        catch(Exception e){
            System.out.println("Imposible optimizar, el error fue: " + e.toString());
        }
    }
    
    /**Optimiza codigo de 3 direcciones usando todas los tipos de optimizacion y muestra resultado*/
    void showAllOpts(String filename) {
        try{
            Optimizer.optimizar(filename,0);
            this.writeLn("La optimizacion fue existosa...");
            this.writeLn("puede ver el resultado en "+ filename + ".htm");
            this.writeLn("y en " + filename + ".opt");
        }
        catch(Exception e){
            System.out.println("Imposible optimizar, el error fue: " + e.toString());
        }
    }
    
    /**Muestra ayuda del comando load*/
    void helpLoad() {
        this.writeLn("\n AYUDA DEL COMANDO \"@\"");
        this.writeLn(" ========================");
        this.writeLn(" Descripcion: Ejecuta un script de comandos dado\n");
        this.writeLn(" Parametros:");
        this.writeLn(" -h: muestra esta ayuda");
        this.writeLn(" [archivo_script]: ejecuta el script de comandos desde esta consola");    }

    /**Muestra ayuda del comando new*/
    void  helpNew() {
        this.writeLn("\n AYUDA DEL COMANDO \"new\"");
        this.writeLn(" ========================");
        this.writeLn(" Descripcion: Crea una nueva pestana de consola\n");
        this.writeLn(" Parametros:");
        this.writeLn(" -h: muestra esta ayuda");
    }

    /**Muestra ayuda del comando clear*/
    void  helpClear() {        
        this.writeLn("\n AYUDA DEL COMANDO \"clrscr\"");
        this.writeLn(" ===========================");
        this.writeLn(" Descripcion: Limpia todo el texto de la consola en la pestana actual.\n");
        this.writeLn(" Parametros:");
        this.writeLn(" -h: muestra esta ayuda");
    }

    /**cambia de directorio al directorio superior inmediato*/
    void cambiarDirSup() {
        String dirtmp = this.dirActual;
        int idx = dirActual.lastIndexOf(java.io.File.separator);
        if (idx == -1)
            idx = dirActual.lastIndexOf("\\");
        if(idx != -1)
           dirtmp = dirActual.substring(0,idx);        
        this.writeLn("Cambiando directorio a " + dirtmp);
        setDirActual(dirtmp);
        //throw new UnsupportedOperationException("Comando todavia no implementado...");
    }

    /**Muestra ayuda del comando dir*/
    void  helpDir() {
       this.writeLn("\n AYUDA DEL COMANDO \"cd\"");
        this.writeLn(" =======================");
        this.writeLn(" Descripcion: cambia el directorio actual de repositorio.\n");
        this.writeLn(" Parametros:");
        this.writeLn(" -h: muestra esta ayuda");
        this.writeLn(" [path]: Cambia hacia el directorio apuntado por path, para que los archivos compilados generen paquetes hacia aqui");    
    }

    /**cambia de directorio al directorio dado en el string*/
    void cambiarDir(String string) {
        this.writeLn("Cambiando directorio a " + string);
        setDirActual(string);
        //throw new UnsupportedOperationException("Comando todavia no implementado...");
    }
    
    /**Muestra ayuda del comando show*/
    void helpShow() {
        this.writeLn("\n AYUDA DEL COMANDO \"show\"");
        this.writeLn(" =======================");
        this.writeLn(" Descripcion: cambia el directorio actual de repositorio.\n");
        this.writeLn(" Parametros:");
        this.writeLn(" -h: muestra esta ayuda");
        this.writeLn(" -so <paquete>: Muestra un reporte con todas las optimizaciones realizadas");    
        this.writeLn(" -so sr <paquete>: Muestra un reporte de optimizaciones de tipo Reutilizacion de Expresiones");    
        this.writeLn(" -so sp <paquete>: Muestra un reporte de optimizaciones de tipo Propagacion de Copias");    
        this.writeLn(" -so st <paquete>: Muestra un reporte de optimizaciones de tipo Transformacion de Expresiones");    
        this.writeLn(" -so si <paquete>: Muestra un reporte de optimizaciones de tipo eliminacion de Saltos");    
        this.writeLn(" -s [<archivo>]: Muestra todos los errores de compilacion");    
        this.writeLn(" -s lx [ <archivo>]: Muestra solo los errores lexicos");    
        this.writeLn(" -s sx [<archivo>]: Muestra solo los errores sintacticos");    
        this.writeLn(" -s se [<archivo>]: Muestra solo los errores semanticos");            
    }
    /**Carga un nuevo script y lo ejecuta*/
    void load(String string) {
        FileReader sr;
        try{
            sr = new FileReader(string);		
            if(string != null){
                try{
                        ConsoleParser p = new ConsoleParser(new ConsoleLexer(new BufferedReader(sr)));
                        p.parse();                    
                    }
                    catch(Exception e){
                        //this.writeLn(e.toString());
                        System.out.println(e.toString());                    
                    }
                }
        }
        catch(FileNotFoundException e){
            this.writeLn("No se encontro archivo de script, asegurese que el nombre del archivo esta escrito correctamente");
            
        }
        catch(Exception e){
            System.out.println(e);
        }
                
    }
    /**Agrega un nuevo tab en la ventana principal*/
    void addTab() {
        MainWindow.addTab();
    }
    /**Compila el archivo fuente especificado, usando el lenguaje dado*/
    protected void compilar(String filename, int lenguaje){
        FileReader sr;
        CppParser cp;
        PascalParser pp;
        JavaParser jp;
        String name;
        try{
            sr = new FileReader(filename);		
            if(filename != null){                
                switch (lenguaje){
                   case CPP:
                       try{
                           cp = new CppParser(new CppLexer(new BufferedReader(sr)));
                           cp.parse();   
                           this.writeLn("Compilacion terminada satisfactoriamente, se genero el paquete en " + dirActual);
                       }
                       catch(Exception e){
                           this.writeLn(e.toString());
                           //System.out.println(e.toString());                    
                           }
                       finally{
                           Output.close();
                       }
                       break;
                   case JAVA:
                       try{
                           jp = new JavaParser(new JavaLexer(new BufferedReader(sr)));
                           jp.parse();                    
                           this.writeLn("Compilacion terminada satisfactoriamente, se genero el paquete en " + dirActual);
                       }
                       catch(Exception e){
                           this.writeLn(e.toString());
                           //System.out.println(e.toString());                    
                           }
                       finally{
                           Output.close();
                       }
                       break;
                   case PASCAL:
                       try{
                           pp = new PascalParser(new PascalLexer(new BufferedReader(sr)));
                           pp.parse();                    
                           this.writeLn("Compilacion terminada satisfactoriamente, se genero el paquete en " + dirActual);
                       }
                       catch(Exception e){
                           this.writeLn(e.toString());
                           //System.out.println(e.toString());                    
                           }
                       finally{
                           Output.close();
                       }
                       break;
                }
            }
        }
        catch(FileNotFoundException e){
            this.writeLn("No se encontro archivo fuente, asegurese que el nombre del archivo esta escrito correctamente");
            
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    /**Abre cuadro de dialogo para preguntar la extension del archivo*/
    private int preguntaExtension() {
        this.jFrameChooseFileType.setBounds(50,50,256,128);
        this.jFrameChooseFileType.setVisible(true);
        return this.compiladorPredet;
    }

    /**Devuelve un nombre de archivo con extension desde un filename dado*/
    private String getNameFromFilename(String filename) {
        String ret = new String();
        int inicio;
        if (filename != null){
            inicio = filename.lastIndexOf(java.io.File.separator);//"\\");
            if(inicio == -1)
                inicio = filename.lastIndexOf("/");
            if(inicio!= -1)
                ret = filename.substring(inicio + 1);
            else
                ret = new String("default");
        }
        return ret;
    }

    

    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JFrame jFrameChooseFileType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelDirActual;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    // End of variables declaration//GEN-END:variables
    
}
