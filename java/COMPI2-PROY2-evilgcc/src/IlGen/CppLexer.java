/* The following code was generated by JFlex 1.4.1 on 5/29/07 10:02 PM */

package IlGen;

import java_cup.runtime.*;  // definition of scanner/parser interface
import errormanager.*; // error manager





/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 5/29/07 10:02 PM from the specification file
 * <tt>cpp.l</tt>
 */
public class CppLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 3;
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 4;
  public static final int COMMENT2 = 2;
  public static final int COMMENT1 = 1;
  public static final int PREPROC_DIR = 2;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  7,  0,  6,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 30, 10, 33,  3, 13, 14, 34, 20, 21, 12, 16, 26,  4,  5, 11, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 18, 19, 29, 15, 17, 28, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 24,  9, 25, 32,  1, 
     0,  1, 38,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 36,  1, 
     1,  1, 37,  1, 35,  1,  1,  1,  1,  1,  1, 22, 27, 23, 31,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\0\1\2\1\3\1\4\1\2\1\5"+
    "\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\2\1\2\0\1\1\1\41"+
    "\1\42\1\43\1\0\1\44\1\42\1\45\1\0\1\46"+
    "\1\47\1\50\1\51\1\0\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\0\1\1\1\76\1\1\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\303\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\u0333\0\303"+
    "\0\u035a\0\u0381\0\303\0\u03a8\0\303\0\303\0\u03cf\0\u03f6"+
    "\0\u041d\0\u0444\0\303\0\u046b\0\u0492\0\303\0\u04b9\0\303"+
    "\0\303\0\303\0\u04e0\0\u0507\0\303\0\303\0\u052e\0\u0555"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\303"+
    "\0\303\0\303\0\303\0\303\0\u057c\0\303\0\303\0\303"+
    "\0\303\0\u05a3\0\303\0\303\0\u05ca\0\u05f1\0\303\0\u0618"+
    "\0\303\0\303\0\303\0\303\0\303\0\303\0\303\0\u04e0"+
    "\0\303\0\303\0\303\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\6\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\4\7\7\47\1\15\1\50\2\47\1\51"+
    "\1\52\32\47\7\53\2\54\36\53\7\55\1\56\1\55"+
    "\1\57\1\60\34\55\7\61\1\56\1\61\1\57\30\61"+
    "\1\62\4\61\50\0\2\7\40\0\4\7\2\0\1\10"+
    "\2\0\1\63\42\0\1\64\41\0\4\64\2\0\1\10"+
    "\1\0\1\65\12\0\1\66\1\0\1\67\32\0\1\70"+
    "\6\0\1\71\40\0\1\14\47\0\2\15\51\0\1\72"+
    "\1\73\2\0\1\74\46\0\1\75\46\0\1\76\45\0"+
    "\1\77\1\100\46\0\1\101\46\0\1\102\1\103\45\0"+
    "\1\104\1\0\1\105\47\0\1\106\43\0\1\107\13\0"+
    "\1\110\32\0\1\111\15\0\1\112\30\0\1\113\46\0"+
    "\1\114\27\0\7\47\1\0\3\47\1\51\1\115\41\47"+
    "\1\15\1\50\2\47\1\51\1\115\41\47\1\0\3\47"+
    "\1\116\1\0\41\47\1\0\3\47\1\117\1\120\32\47"+
    "\7\0\2\54\36\0\7\55\1\0\1\55\2\0\34\55"+
    "\11\0\1\121\1\122\27\0\1\123\1\124\1\125\1\126"+
    "\1\127\2\0\1\130\45\0\2\64\40\0\4\64\14\0"+
    "\1\131\37\0\1\132\60\0\1\133\46\0\1\134\27\0"+
    "\7\47\1\0\3\47\1\0\1\120\41\47\1\0\3\47"+
    "\1\116\1\115\41\47\1\0\3\47\1\51\1\120\32\47";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1599];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\0\1\11\7\1\1\11\10\1\10\11"+
    "\1\1\1\11\2\1\1\11\1\1\2\11\2\1\2\0"+
    "\1\11\2\1\1\11\1\0\3\11\1\0\1\1\2\11"+
    "\1\1\1\0\14\11\1\1\4\11\1\1\2\11\1\0"+
    "\1\1\1\11\1\1\7\11\1\1\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[92];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public String sourceFilename;
  
  public void init(){};
  public int getLine(){
	return yyline;
	}
public int getChar(){
	return yychar;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CppLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CppLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { yybegin(YYINITIAL);
		return new java_cup.runtime.Symbol(SymCpp.CHAR_LITERAL, new TokenValue(Utility.cadenaActual, yyline, yychar, sourceFilename));
          }
        case 75: break;
        case 74: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_SHL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 76: break;
        case 14: 
          { return new java_cup.runtime.Symbol(SymCpp.PLUS, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 77: break;
        case 49: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_AND, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 78: break;
        case 60: 
          { return new java_cup.runtime.Symbol(SymCpp.NE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 79: break;
        case 71: 
          { return new java_cup.runtime.Symbol(SymCpp.ARROW_STAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 80: break;
        case 6: 
          { return new java_cup.runtime.Symbol(SymCpp.PUNTO, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 81: break;
        case 46: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_MUL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 82: break;
        case 41: 
          { return new java_cup.runtime.Symbol(SymCpp.ARROW, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 83: break;
        case 11: 
          { return new java_cup.runtime.Symbol(SymCpp.PERCENT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 84: break;
        case 65: 
          { Utility.cadenaActual += "\'";
          }
        case 85: break;
        case 16: 
          { return new java_cup.runtime.Symbol(SymCpp.COLON, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 86: break;
        case 24: 
          { return new java_cup.runtime.Symbol(SymCpp.COMA, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 87: break;
        case 72: 
          { return new java_cup.runtime.Symbol(SymCpp.ELLIPSIS, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 88: break;
        case 40: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_SUB, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 89: break;
        case 26: 
          { return new java_cup.runtime.Symbol(SymCpp.QUEST, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 90: break;
        case 58: 
          { return new java_cup.runtime.Symbol(SymCpp.LE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 91: break;
        case 34: 
          { Utility.cadenaActual += yytext();
          }
        case 92: break;
        case 20: 
          { return new java_cup.runtime.Symbol(SymCpp.ALLAVE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 93: break;
        case 69: 
          { Utility.cadenaActual += "\b";
          }
        case 94: break;
        case 56: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_OR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 95: break;
        case 31: 
          { // Comentario
		yybegin(PREPROC_DIR);
          }
        case 96: break;
        case 64: 
          { Utility.cadenaActual += "\"";
          }
        case 97: break;
        case 18: 
          { return new java_cup.runtime.Symbol(SymCpp.APAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 98: break;
        case 28: 
          { return new java_cup.runtime.Symbol(SymCpp.NOTLOG, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 99: break;
        case 23: 
          { return new java_cup.runtime.Symbol(SymCpp.CCOR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 100: break;
        case 55: 
          { return new java_cup.runtime.Symbol(SymCpp.SCOPE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 101: break;
        case 4: 
          { return new java_cup.runtime.Symbol(SymCpp.INTEGER_LITERAL, new TokenValue(new String(yytext()), yyline, yychar, sourceFilename));
          }
        case 102: break;
        case 54: 
          { return new java_cup.runtime.Symbol(SymCpp.SHR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 103: break;
        case 32: 
          { Utility.cadenaActual = "";
		yybegin(CHARACTER);
          }
        case 104: break;
        case 52: 
          { return new java_cup.runtime.Symbol(SymCpp.INC, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 105: break;
        case 51: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_ADD, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 106: break;
        case 12: 
          { return new java_cup.runtime.Symbol(SymCpp.AMPERSAND, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 107: break;
        case 63: 
          { Utility.cadenaActual += "\\";
          }
        case 108: break;
        case 53: 
          { return new java_cup.runtime.Symbol(SymCpp.GE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 109: break;
        case 43: 
          { // Comentario
		yybegin(COMMENT2);
          }
        case 110: break;
        case 61: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_XOR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 111: break;
        case 44: 
          { // Comentario
		yybegin(COMMENT1);
          }
        case 112: break;
        case 57: 
          { return new java_cup.runtime.Symbol(SymCpp.LOG_OR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 113: break;
        case 27: 
          { return new java_cup.runtime.Symbol(SymCpp.LT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 114: break;
        case 1: 
          { yychar = 0;
          }
        case 115: break;
        case 8: 
          { Utility.cadenaActual = "";
		yybegin(STRING);
          }
        case 116: break;
        case 73: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_SHR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 117: break;
        case 21: 
          { return new java_cup.runtime.Symbol(SymCpp.CLLAVE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 118: break;
        case 29: 
          { return new java_cup.runtime.Symbol(SymCpp.NOTBIN, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 119: break;
        case 3: 
          { if (yytext().equals("NULL"))
		return new java_cup.runtime.Symbol(SymCpp.NULL_LITERAL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
	if (yytext().equals("sizeof"))
		return new java_cup.runtime.Symbol(SymCpp.SIZEOF, new TokenValue(yytext(), yyline, yychar, sourceFilename));
	if (yytext().equals("this"))
		return new java_cup.runtime.Symbol(SymCpp.THIS, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 
	if (yytext().equals("case"))
		return new java_cup.runtime.Symbol(SymCpp.CASE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 
	if (yytext().equals("default"))
		return new java_cup.runtime.Symbol(SymCpp.DEFAULT, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 
	if (yytext().equals("do"))
		return new java_cup.runtime.Symbol(SymCpp.DO, new TokenValue(yytext(), yyline, yychar, sourceFilename));
	if (yytext().equals("if"))
		return new java_cup.runtime.Symbol(SymCpp.IF, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 
	if (yytext().equals("while"))
		return new java_cup.runtime.Symbol(SymCpp.WHILE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 
	if (yytext().equals("else"))
		return new java_cup.runtime.Symbol(SymCpp.ELSE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("switch"))
		return new java_cup.runtime.Symbol(SymCpp.SWITCH, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("for"))
		return new java_cup.runtime.Symbol(SymCpp.FOR, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("continue"))
		return new java_cup.runtime.Symbol(SymCpp.CONTINUE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("break"))
		return new java_cup.runtime.Symbol(SymCpp.BREAK, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("return"))
		return new java_cup.runtime.Symbol(SymCpp.RETURN, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("typedef"))
		return new java_cup.runtime.Symbol(SymCpp.TYPEDEF, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("extern"))
		return new java_cup.runtime.Symbol(SymCpp.EXTERN, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("static"))
		return new java_cup.runtime.Symbol(SymCpp.STATIC, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("auto"))
		return new java_cup.runtime.Symbol(SymCpp.AUTO, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("register"))
		return new java_cup.runtime.Symbol(SymCpp.ELSE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("public"))
		return new java_cup.runtime.Symbol(SymCpp.PUBLIC, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("protected"))
		return new java_cup.runtime.Symbol(SymCpp.PROTECTED, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("private"))
		return new java_cup.runtime.Symbol(SymCpp.PRIVATE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("virtual"))
		return new java_cup.runtime.Symbol(SymCpp.VIRTUAL, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("inline"))
		return new java_cup.runtime.Symbol(SymCpp.INLINE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("bool"))
		return new java_cup.runtime.Symbol(SymCpp.BOOL, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("char"))
		return new java_cup.runtime.Symbol(SymCpp.CHAR, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("int"))
		return new java_cup.runtime.Symbol(SymCpp.INT, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("float"))
		return new java_cup.runtime.Symbol(SymCpp.FLOAT, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("const"))
		return new java_cup.runtime.Symbol(SymCpp.CONST, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("volatile"))
		return new java_cup.runtime.Symbol(SymCpp.VOLATILE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("void"))
		return new java_cup.runtime.Symbol(SymCpp.VOID, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("class"))
		return new java_cup.runtime.Symbol(SymCpp.CLASS, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("struct"))
		return new java_cup.runtime.Symbol(SymCpp.STRUCT, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("union"))
		return new java_cup.runtime.Symbol(SymCpp.UNION, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("FALSE"))
		return new java_cup.runtime.Symbol(SymCpp.FALSE, new TokenValue(new String("0"), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("TRUE"))
		return new java_cup.runtime.Symbol(SymCpp.TRUE, new TokenValue(new String("1"), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("new"))
		return new java_cup.runtime.Symbol(SymCpp.NEW, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("delete"))
		return new java_cup.runtime.Symbol(SymCpp.DELETE, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 	
	if (yytext().equals("scanf"))
		return new java_cup.runtime.Symbol(SymCpp.SCANF, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 
	if (yytext().equals("printf"))
		return new java_cup.runtime.Symbol(SymCpp.PRINTF, new TokenValue(yytext(), yyline, yychar, sourceFilename)); 
	return new java_cup.runtime.Symbol(SymCpp.IDENTIFIER, new TokenValue(new String(yytext()), yyline, yychar, sourceFilename));
          }
        case 120: break;
        case 45: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_DIV, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 121: break;
        case 62: 
          { yybegin(YYINITIAL);
          }
        case 122: break;
        case 38: 
          { return new java_cup.runtime.Symbol(SymCpp.IDENTIFIER, new TokenValue(new String(yytext()), yyline, yychar, sourceFilename));
          }
        case 123: break;
        case 30: 
          { return new java_cup.runtime.Symbol(SymCpp.CARET, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 124: break;
        case 13: 
          { return new java_cup.runtime.Symbol(SymCpp.EQUALS, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 125: break;
        case 39: 
          { return new java_cup.runtime.Symbol(SymCpp.DEC, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 126: break;
        case 66: 
          { Utility.cadenaActual += "\t";
          }
        case 127: break;
        case 48: 
          { return new java_cup.runtime.Symbol(SymCpp.LOG_AND, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 128: break;
        case 7: 
          { yychar++;
          }
        case 129: break;
        case 15: 
          { return new java_cup.runtime.Symbol(SymCpp.GT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 130: break;
        case 17: 
          { return new java_cup.runtime.Symbol(SymCpp.SEMICOLON, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 131: break;
        case 22: 
          { return new java_cup.runtime.Symbol(SymCpp.ACOR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 132: break;
        case 68: 
          { Utility.cadenaActual += "\r";
          }
        case 133: break;
        case 33: 
          { yybegin(YYINITIAL);   
		yychar = 0;
          }
        case 134: break;
        case 47: 
          { return new java_cup.runtime.Symbol(SymCpp.ASS_MOD, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 135: break;
        case 50: 
          { return new java_cup.runtime.Symbol(SymCpp.EQ, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 136: break;
        case 9: 
          { return new java_cup.runtime.Symbol(SymCpp.SLASH, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 137: break;
        case 70: 
          { return new java_cup.runtime.Symbol(SymCpp.FLOATING_LITERAL, new TokenValue(new String(yytext()), yyline, yychar, sourceFilename));
          }
        case 138: break;
        case 36: 
          { yybegin(YYINITIAL);
		return new java_cup.runtime.Symbol(SymCpp.STRING_LITERAL, new TokenValue(Utility.cadenaActual, yyline, yychar, sourceFilename));
          }
        case 139: break;
        case 59: 
          { return new java_cup.runtime.Symbol(SymCpp.SHL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 140: break;
        case 35: 
          { //errorLexico()
		//throw new Exception("Error semantico, no puede haber cambio de linea dentro de una literal de cadena");
          }
        case 141: break;
        case 5: 
          { return new java_cup.runtime.Symbol(SymCpp.MINUS, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 142: break;
        case 42: 
          { return new java_cup.runtime.Symbol(SymCpp.DOT_STAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 143: break;
        case 19: 
          { return new java_cup.runtime.Symbol(SymCpp.CPAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 144: break;
        case 2: 
          { ErrorManager.agregarErrorLexico(yyline,yychar, "Error lexico: Simbolo " + yytext() + " Invalido");
		System.out.println("Error lexico: Simbolo " + yytext() + " Invalido en " + yyline + ", " +yychar +".");
          }
        case 145: break;
        case 67: 
          { Utility.cadenaActual += "\n";
          }
        case 146: break;
        case 25: 
          { return new java_cup.runtime.Symbol(SymCpp.BAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 147: break;
        case 10: 
          { return new java_cup.runtime.Symbol(SymCpp.ASTERISK, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 148: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new java_cup.runtime.Symbol(SymCpp.EOF, new TokenValue(yytext(), yyline, yychar, sourceFilename));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
