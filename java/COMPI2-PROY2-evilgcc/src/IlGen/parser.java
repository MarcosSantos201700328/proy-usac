
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Apr 20 22:03:55 CST 2007
//----------------------------------------------------

package IlGen;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import errormanager.*;

/** CUP v0.10k generated parser.
  * @version Fri Apr 20 22:03:55 CST 2007
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\376\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\006\000\002\005\004\000\002\005\007" +
    "\000\002\006\005\000\002\006\003\000\002\007\010\000" +
    "\002\010\006\000\002\011\005\000\002\011\002\000\002" +
    "\012\005\000\002\012\003\000\002\013\003\000\002\014" +
    "\004\000\002\014\002\000\002\015\004\000\002\015\003" +
    "\000\002\016\006\000\002\017\003\000\002\017\005\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\005\000\002\022\004\000\002\022\003\000\002\023" +
    "\003\000\002\023\005\000\002\024\003\000\002\024\005" +
    "\000\002\024\003\000\002\024\004\000\002\025\003\000" +
    "\002\025\004\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\030\004\000\002\030\002\000\002\031\004" +
    "\000\002\031\003\000\002\032\006\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\005\000\002\037\005\000\002\040\003\000\002\040\004" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\042\010\000\002\043\005\000\002" +
    "\043\003\000\002\044\003\000\002\045\003\000\002\045" +
    "\003\000\002\046\003\000\002\047\005\000\002\047\007" +
    "\000\002\047\005\000\002\050\005\000\002\050\003\000" +
    "\002\051\005\000\002\052\007\000\002\052\006\000\002" +
    "\052\002\000\002\053\005\000\002\053\003\000\002\054" +
    "\005\000\002\054\003\000\002\055\007\000\002\055\011" +
    "\000\002\055\007\000\002\056\005\000\002\056\003\000" +
    "\002\057\003\000\002\057\005\000\002\060\003\000\002" +
    "\061\003\000\002\062\005\000\002\063\003\000\002\064" +
    "\005\000\002\065\004\000\002\066\003\000\002\067\005" +
    "\000\002\067\002\000\002\070\005\000\002\070\003\000" +
    "\002\071\005\000\002\072\004\000\002\072\002\000\002" +
    "\073\005\000\002\073\003\000\002\074\003\000\002\074" +
    "\003\000\002\075\005\000\002\075\005\000\002\076\003" +
    "\000\002\076\004\000\002\077\003\000\002\077\003\000" +
    "\002\100\005\000\002\101\005\000\002\101\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\103\005\000\002\104\006\000\002\105\003" +
    "\000\002\106\003\000\002\107\004\000\002\110\003\000" +
    "\002\111\005\000\002\111\005\000\002\111\005\000\002" +
    "\112\006\000\002\112\007\000\002\113\003\000\002\114" +
    "\004\000\002\115\003\000\002\116\003\000\002\117\005" +
    "\000\002\120\005\000\002\120\003\000\002\121\003\000" +
    "\002\121\003\000\002\122\005\000\002\122\003\000\002" +
    "\123\005\000\002\123\003\000\002\124\003\000\002\124" +
    "\003\000\002\124\003\000\002\124\003\000\002\124\003" +
    "\000\002\124\003\000\002\124\003\000\002\124\003\000" +
    "\002\124\003\000\002\124\003\000\002\124\002\000\002" +
    "\125\003\000\002\125\003\000\002\125\003\000\002\125" +
    "\003\000\002\126\006\000\002\127\006\000\002\130\006" +
    "\000\002\131\012\000\002\132\012\000\002\133\006\000" +
    "\002\134\006\000\002\135\006\000\002\135\010\000\002" +
    "\136\010\000\002\137\005\000\002\140\003\000\002\140" +
    "\003\000\002\140\003\000\002\140\004\000\002\141\006" +
    "\000\002\142\005\000\002\142\003\000\002\143\003\000" +
    "\002\144\005\000\002\145\004\000\002\145\003\000\002" +
    "\146\005\000\002\147\005\000\002\147\003\000\002\150" +
    "\003\000\002\150\005\000\002\150\007\000\002\151\004" +
    "\000\002\152\007\000\002\152\010\000\002\152\012\000" +
    "\002\152\013\000\002\153\003\000\002\154\005\000\002" +
    "\154\003\000\002\155\005\000\002\156\003\000\002\156" +
    "\004\000\002\157\003\000\002\160\003\000\002\161\003" +
    "\000\002\161\003\000\002\162\003\000\002\163\005\000" +
    "\002\163\003\000\002\164\003\000\002\165\003\000\002" +
    "\165\005\000\002\166\003\000\002\166\005\000\002\167" +
    "\003\000\002\167\005\000\002\170\004\000\002\170\003" +
    "\000\002\171\003\000\002\171\005\000\002\172\003\000" +
    "\002\172\003\000\002\172\003\000\002\172\003\000\002" +
    "\172\005\000\002\172\004\000\002\173\003\000\002\173" +
    "\003\000\002\173\003\000\002\174\003\000\002\174\003" +
    "\000\002\175\003\000\002\176\003\000\002\177\004\000" +
    "\002\200\005\000\002\200\004\000\002\201\005\000\002" +
    "\201\003\000\002\202\005\000\002\202\003\000\002\203" +
    "\003\000\002\203\003\000\002\203\003\000\002\204\003" +
    "\000\002\204\003\000\002\204\003\000\002\204\003\000" +
    "\002\204\003\000\002\205\003\000\002\205\003\000\002" +
    "\205\003\000\002\205\003\000\002\205\003\000\002\205" +
    "\003\000\002\205\003\000\002\206\003\000\002\207\003" +
    "\000\002\210\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\020\002\ufff1\013\004\030\ufff1\060\ufff1\061" +
    "\012\076\ufff1\101\ufff1\001\002\000\004\034\014\001\002" +
    "\000\014\002\uffd6\030\uffd6\060\uffd6\076\034\101\uffd6\001" +
    "\002\000\004\002\000\001\002\000\004\002\u017c\001\002" +
    "\000\004\067\024\001\002\000\004\002\uffff\001\002\000" +
    "\004\034\014\001\002\000\006\042\015\067\ufffd\001\002" +
    "\000\110\004\uff06\006\uff06\011\uff06\012\uff06\015\uff06\016" +
    "\uff06\017\uff06\020\uff06\021\uff06\022\uff06\023\uff06\024\uff06" +
    "\031\uff06\033\uff06\036\uff06\040\uff06\041\uff06\042\uff06\043" +
    "\uff06\044\uff06\045\uff06\050\uff06\051\uff06\052\uff06\057\uff06" +
    "\062\uff06\066\uff06\067\uff06\071\uff06\072\uff06\073\uff06\074" +
    "\uff06\075\uff06\077\uff06\100\uff06\001\002\000\004\034\014" +
    "\001\002\000\010\011\ufffa\012\ufffa\066\ufffa\001\002\000" +
    "\006\012\020\066\022\001\002\000\026\010\uff04\014\uff04" +
    "\034\uff04\040\uff04\042\uff04\044\uff04\046\uff04\047\uff04\057" +
    "\uff04\063\uff04\001\002\000\004\034\014\001\002\000\004" +
    "\067\ufffc\001\002\000\010\011\ufffb\012\ufffb\066\ufffb\001" +
    "\002\000\070\002\uff05\007\uff05\010\uff05\013\uff05\014\uff05" +
    "\023\uff05\025\uff05\026\uff05\027\uff05\030\uff05\032\uff05\034" +
    "\uff05\035\uff05\037\uff05\044\uff05\055\uff05\057\uff05\060\uff05" +
    "\063\uff05\065\uff05\066\uff05\067\uff05\076\uff05\077\uff05\101" +
    "\uff05\102\uff05\103\uff05\001\002\000\020\013\ufff6\030\ufff6" +
    "\037\026\055\ufff6\060\ufff6\076\ufff6\101\ufff6\001\002\000" +
    "\004\014\262\001\002\000\016\013\004\030\ufff1\055\ufff1" +
    "\060\ufff1\076\ufff1\101\ufff1\001\002\000\004\017\031\001" +
    "\002\000\004\002\ufffe\001\002\000\014\030\uffd6\055\uffd6" +
    "\060\uffd6\076\034\101\uffd6\001\002\000\012\030\uffa0\055" +
    "\uffa0\060\uffa0\101\202\001\002\000\004\034\014\001\002" +
    "\000\016\002\uffd4\030\uffd4\034\uffd4\055\uffd4\060\uffd4\101" +
    "\uffd4\001\002\000\004\024\041\001\002\000\016\002\uffd7" +
    "\030\uffd7\034\014\055\uffd7\060\uffd7\101\uffd7\001\002\000" +
    "\016\002\uffd5\030\uffd5\034\uffd5\055\uffd5\060\uffd5\101\uffd5" +
    "\001\002\000\034\005\071\010\046\014\073\034\014\042" +
    "\056\044\065\054\052\056\060\057\042\063\070\064\064" +
    "\070\062\100\057\001\002\000\026\010\uffdc\014\uffdc\034" +
    "\uffdc\040\uffdc\042\uffdc\044\uffdc\046\uffdc\047\uffdc\057\uffdc" +
    "\063\uffdc\001\002\000\004\020\200\001\002\000\012\020" +
    "\uffd9\023\uffd2\066\uffd2\067\uffd2\001\002\000\010\023\uffc4" +
    "\066\uffc4\067\uffc4\001\002\000\020\011\uffdd\012\uffdd\020" +
    "\uffdd\023\uffdd\062\uffdd\066\uffdd\067\uffdd\001\002\000\020" +
    "\011\uffdf\012\uffdf\020\uffdf\023\uffdf\062\uffdf\066\uffdf\067" +
    "\uffdf\001\002\000\010\023\uffce\066\uffce\067\uffce\001\002" +
    "\000\014\012\uffcd\023\uffcd\062\uffcd\066\uffcd\067\uffcd\001" +
    "\002\000\012\005\071\056\060\064\064\070\062\001\002" +
    "\000\010\023\uffcf\066\uffcf\067\uffcf\001\002\000\010\023" +
    "\uffd1\066\uffd1\067\uffd1\001\002\000\010\023\uffc6\066\uffc6" +
    "\067\uffc6\001\002\000\004\034\014\001\002\000\004\034" +
    "\014\001\002\000\004\051\171\001\002\000\014\012\uffcc" +
    "\023\uffcc\062\uffcc\066\uffcc\067\uffcc\001\002\000\004\051" +
    "\166\001\002\000\010\023\uffd0\066\uffd0\067\uffd0\001\002" +
    "\000\010\007\121\023\uffb4\034\014\001\002\000\026\010" +
    "\uffdb\014\uffdb\034\uffdb\040\uffdb\042\uffdb\044\uffdb\046\uffdb" +
    "\047\uffdb\057\uffdb\063\uffdb\001\002\000\004\067\024\001" +
    "\002\000\010\023\uffc7\066\uffc7\067\uffc7\001\002\000\020" +
    "\011\uffd8\012\uffd8\020\uffd8\023\uffd8\062\uffd8\066\uffd8\067" +
    "\uffd8\001\002\000\004\040\100\001\002\000\010\014\073" +
    "\034\014\063\070\001\002\000\020\011\uffda\012\uffda\020" +
    "\uffda\023\uffda\062\uffda\066\uffda\067\uffda\001\002\000\010" +
    "\023\uffc9\066\uffc9\067\uffc9\001\002\000\010\023\uffc5\066" +
    "\uffc5\067\uffc5\001\002\000\020\011\uffde\012\uffde\020\uffde" +
    "\023\uffde\062\uffde\066\uffde\067\uffde\001\002\000\020\011" +
    "\uffd9\012\uffd9\020\uffd9\023\uffd9\062\uffd9\066\uffd9\067\uffd9" +
    "\001\002\000\020\010\046\014\073\034\014\042\056\044" +
    "\065\057\042\063\070\001\002\000\006\012\uffc0\062\uffc0" +
    "\001\002\000\016\012\uffbe\020\uffd9\023\uffbe\062\uffbe\066" +
    "\uffbe\067\uffbe\001\002\000\006\012\020\062\107\001\002" +
    "\000\006\012\uffc1\062\uffc1\001\002\000\014\012\uffbf\023" +
    "\uffbf\062\uffbf\066\uffbf\067\uffbf\001\002\000\020\010\046" +
    "\014\073\034\014\042\056\044\065\057\042\063\070\001" +
    "\002\000\004\051\110\001\002\000\034\005\071\010\046" +
    "\014\073\034\014\042\056\044\065\054\052\056\060\057" +
    "\042\063\070\064\064\070\062\100\057\001\002\000\010" +
    "\023\uffbd\066\uffbd\067\uffbd\001\002\000\010\023\uffc3\066" +
    "\uffc3\067\uffc3\001\002\000\006\012\uffc2\062\uffc2\001\002" +
    "\000\016\002\uffd3\030\uffd3\034\uffd3\055\uffd3\060\uffd3\101" +
    "\uffd3\001\002\000\004\023\165\001\002\000\010\023\uffb8" +
    "\066\uffb8\067\uffb8\001\002\000\006\023\162\067\024\001" +
    "\002\000\006\011\157\012\020\001\002\000\004\034\014" +
    "\001\002\000\004\051\uffb2\001\002\000\004\011\154\001" +
    "\002\000\004\051\126\001\002\000\006\011\uffa8\051\uffa7" +
    "\001\002\000\016\010\046\014\073\034\014\044\065\057" +
    "\042\063\070\001\002\000\006\011\141\012\020\001\002" +
    "\000\010\023\uffb0\066\uffb0\067\uffb0\001\002\000\010\023" +
    "\uffb5\066\uffb5\067\024\001\002\000\010\011\uffaa\012\uffaa" +
    "\020\134\001\002\000\006\011\uffab\012\uffab\001\002\000" +
    "\016\010\046\014\073\034\014\044\065\057\042\063\070" +
    "\001\002\000\006\011\uffa9\012\uffa9\001\002\000\022\010" +
    "\046\014\073\023\uffb6\034\014\044\065\057\042\063\070" +
    "\066\uffb6\001\002\000\010\023\uffb1\066\uffb1\067\uffb1\001" +
    "\002\000\016\010\046\014\073\034\014\044\065\057\042" +
    "\063\070\001\002\000\004\042\142\001\002\000\010\007" +
    "\121\034\014\066\uffb4\001\002\000\004\066\152\001\002" +
    "\000\006\066\145\067\024\001\002\000\010\023\uffaf\066" +
    "\uffaf\067\uffaf\001\002\000\010\007\121\034\014\066\uffb4" +
    "\001\002\000\004\066\151\001\002\000\010\023\uffb9\066" +
    "\uffb9\067\uffb9\001\002\000\010\023\uffae\066\uffae\067\uffae" +
    "\001\002\000\010\023\uffad\066\uffad\067\uffad\001\002\000" +
    "\006\011\uffac\012\uffac\001\002\000\004\034\014\001\002" +
    "\000\004\051\uffb3\001\002\000\004\051\uffa7\001\002\000" +
    "\034\005\071\010\046\014\073\034\014\042\056\044\065" +
    "\054\052\056\060\057\042\063\070\064\064\070\062\100" +
    "\057\001\002\000\010\023\uffb7\066\uffb7\067\uffb7\001\002" +
    "\000\010\007\121\023\uffb4\034\014\001\002\000\010\023" +
    "\uffbc\066\uffbc\067\uffbc\001\002\000\004\023\164\001\002" +
    "\000\010\023\uffbb\066\uffbb\067\uffbb\001\002\000\010\023" +
    "\uffba\066\uffba\067\uffba\001\002\000\020\010\046\014\073" +
    "\034\014\042\056\044\065\057\042\063\070\001\002\000" +
    "\010\023\uffa5\066\uffa5\067\uffa5\001\002\000\010\023\uffa6" +
    "\066\uffa6\067\uffa6\001\002\000\034\005\071\010\046\014" +
    "\073\034\014\042\056\044\065\054\052\056\060\057\042" +
    "\063\070\064\064\070\062\100\057\001\002\000\010\023" +
    "\uffa4\066\uffa4\067\uffa4\001\002\000\010\023\uffa2\066\uffa2" +
    "\067\uffa2\001\002\000\010\023\uffa3\066\uffa3\067\uffa3\001" +
    "\002\000\006\012\020\066\176\001\002\000\014\012\uffcb" +
    "\023\uffcb\062\uffcb\066\uffcb\067\uffcb\001\002\000\010\023" +
    "\uffc8\066\uffc8\067\uffc8\001\002\000\016\010\046\014\073" +
    "\034\014\044\065\057\042\063\070\001\002\000\014\012" +
    "\uffca\023\uffca\062\uffca\066\uffca\067\uffca\001\002\000\004" +
    "\034\014\001\002\000\010\030\214\055\uff9b\060\207\001" +
    "\002\000\004\067\uff97\001\002\000\004\067\024\001\002" +
    "\000\004\067\024\001\002\000\004\034\014\001\002\000" +
    "\004\067\024\001\002\000\010\042\u0149\066\uff94\067\uff94" +
    "\001\002\000\004\067\uff99\001\002\000\004\067\uff98\001" +
    "\002\000\004\034\014\001\002\000\004\055\221\001\002" +
    "\000\004\067\024\001\002\000\012\002\uff9c\030\214\055" +
    "\uff9c\060\207\001\002\000\004\067\uff9a\001\002\000\032" +
    "\007\253\014\262\023\uff67\026\256\032\231\034\014\035" +
    "\240\055\221\065\260\067\uff67\102\232\103\243\001\002" +
    "\000\006\017\uff7b\067\uff7b\001\002\000\006\017\ufff9\067" +
    "\ufff9\001\002\000\010\023\uff77\067\uff77\077\uff77\001\002" +
    "\000\010\023\uff78\067\uff78\077\uff78\001\002\000\024\006" +
    "\uff57\017\uff57\022\uff4d\023\uff4d\040\uff57\042\377\067\uff4d" +
    "\077\uff4d\100\uff57\001\002\000\012\006\u0143\017\367\040" +
    "\365\100\366\001\002\000\010\023\uff66\067\uff66\077\uff66" +
    "\001\002\000\004\014\262\001\002\000\026\010\274\014" +
    "\320\034\014\040\312\042\276\044\065\046\277\047\275" +
    "\057\042\063\314\001\002\000\010\023\uff76\067\uff76\077" +
    "\uff76\001\002\000\010\023\uff63\067\uff63\077\uff63\001\002" +
    "\000\012\022\uff68\023\uff68\067\uff68\077\uff68\001\002\000" +
    "\106\004\uff55\006\uff55\011\uff55\012\uff55\015\uff55\016\uff55" +
    "\017\uff55\020\uff55\021\uff55\022\uff55\023\uff55\024\uff55\031" +
    "\uff55\033\uff55\036\uff55\040\uff55\041\uff55\043\uff55\044\uff55" +
    "\045\uff55\050\uff55\051\uff55\052\uff55\057\uff55\062\uff55\066" +
    "\uff55\067\uff55\071\uff55\072\uff55\073\uff55\074\uff55\075\uff55" +
    "\077\uff55\100\uff55\001\002\000\012\022\uff71\023\uff71\067" +
    "\uff71\077\uff71\001\002\000\026\010\274\014\320\034\014" +
    "\040\312\042\276\044\065\046\277\047\275\057\042\063" +
    "\314\001\002\000\012\022\uff6e\023\uff6e\067\uff6e\077\uff6e" +
    "\001\002\000\004\011\u0134\001\002\000\004\034\014\001" +
    "\002\000\010\023\uff64\067\uff64\077\uff64\001\002\000\010" +
    "\023\uff65\067\uff65\077\uff65\001\002\000\012\022\uff70\023" +
    "\uff70\067\uff70\077\uff70\001\002\000\012\022\uff6f\023\uff6f" +
    "\067\uff6f\077\uff6f\001\002\000\012\022\uff6d\023\uff6d\067" +
    "\uff6d\077\uff6d\001\002\000\012\022\uff72\023\uff72\067\uff72" +
    "\077\uff72\001\002\000\010\023\uff74\067\uff74\077\uff74\001" +
    "\002\000\026\010\274\014\320\034\014\040\312\042\276" +
    "\044\065\046\277\047\275\057\042\063\314\001\002\000" +
    "\012\022\uff69\023\uff69\067\uff69\077\uff69\001\002\000\012" +
    "\022\uff6c\023\uff6c\067\uff6c\077\uff6c\001\002\000\004\034" +
    "\014\001\002\000\012\022\uff6b\023\uff6b\067\uff6b\077\uff6b" +
    "\001\002\000\032\007\253\014\262\026\256\032\231\034" +
    "\014\035\240\055\221\065\260\067\uff67\077\uff67\102\232" +
    "\103\243\001\002\000\006\023\266\067\024\001\002\000" +
    "\016\011\ufff3\012\ufff3\022\ufff3\023\ufff3\067\ufff3\077\ufff3" +
    "\001\002\000\106\004\uff56\006\uff56\011\uff56\012\uff56\015" +
    "\uff56\016\uff56\017\uff56\020\uff56\021\uff56\022\uff56\023\uff56" +
    "\024\uff56\031\uff56\033\uff56\036\uff56\040\uff56\041\uff56\043" +
    "\uff56\044\uff56\045\uff56\050\uff56\051\uff56\052\uff56\057\uff56" +
    "\062\uff56\066\uff56\067\uff56\071\uff56\072\uff56\073\uff56\074" +
    "\uff56\075\uff56\077\uff56\100\uff56\001\002\000\012\022\uff6a" +
    "\023\uff6a\067\uff6a\077\uff6a\001\002\000\034\007\253\014" +
    "\262\023\uff67\026\256\032\231\034\014\035\240\055\221" +
    "\065\260\067\uff67\077\uff67\102\232\103\243\001\002\000" +
    "\014\017\uff7a\022\uff7a\023\uff7a\067\uff7a\077\uff7a\001\002" +
    "\000\010\023\uff79\067\uff79\077\uff79\001\002\000\006\067" +
    "\024\077\271\001\002\000\026\010\274\014\320\034\014" +
    "\040\312\042\276\044\065\046\277\047\275\057\042\063" +
    "\314\001\002\000\106\004\uff57\011\uff57\012\uff57\015\uff57" +
    "\016\uff57\017\uff57\020\uff57\021\uff57\022\uff57\023\uff57\024" +
    "\uff57\031\uff57\033\uff57\036\uff57\040\uff57\041\uff57\042\377" +
    "\043\uff57\044\uff57\045\uff57\050\uff57\051\uff57\052\uff57\057" +
    "\uff57\062\uff57\066\uff57\067\uff57\071\uff57\072\uff57\073\uff57" +
    "\074\uff57\075\uff57\077\uff57\100\uff57\001\002\000\104\004" +
    "\uff29\011\uff29\012\uff29\015\uff29\016\uff29\017\367\020\uff29" +
    "\021\uff29\022\uff29\023\uff29\024\uff29\031\uff29\033\uff29\036" +
    "\uff29\040\365\041\uff29\043\uff29\044\uff29\045\uff29\050\uff29" +
    "\051\uff29\052\uff29\057\uff29\062\uff29\066\uff29\067\uff29\071" +
    "\uff29\072\uff29\073\uff29\074\uff29\075\uff29\077\uff29\100\366" +
    "\001\002\000\076\004\uff22\011\uff22\012\uff22\015\uff22\016" +
    "\uff22\020\uff22\021\uff22\022\uff22\023\uff22\024\uff22\031\uff22" +
    "\033\uff22\036\uff22\041\uff22\043\uff22\044\uff22\045\uff22\050" +
    "\uff22\051\uff22\052\uff22\057\uff22\062\uff22\066\uff22\067\uff22" +
    "\071\uff22\072\uff22\073\uff22\074\uff22\075\uff22\077\uff22\001" +
    "\002\000\022\010\274\014\320\034\014\040\312\042\276" +
    "\046\277\047\275\063\314\001\002\000\026\010\274\014" +
    "\320\034\014\040\312\042\276\044\065\046\277\047\275" +
    "\057\042\063\314\001\002\000\076\004\uff21\011\uff21\012" +
    "\uff21\015\uff21\016\uff21\020\uff21\021\uff21\022\uff21\023\uff21" +
    "\024\uff21\031\uff21\033\uff21\036\uff21\041\uff21\043\uff21\044" +
    "\uff21\045\uff21\050\uff21\051\uff21\052\uff21\057\uff21\062\uff21" +
    "\066\uff21\067\uff21\071\uff21\072\uff21\073\uff21\074\uff21\075" +
    "\uff21\077\uff21\001\002\000\074\004\uff2c\011\uff2c\012\uff2c" +
    "\015\uff2c\016\uff2c\020\uff2c\021\uff2c\022\uff2c\023\uff2c\024" +
    "\uff2c\031\uff2c\033\uff2c\036\uff2c\041\uff2c\043\uff2c\044\uff2c" +
    "\045\uff2c\050\uff2c\051\uff2c\052\uff2c\057\uff2c\062\uff2c\066" +
    "\uff2c\067\uff2c\071\uff2c\072\uff2c\074\uff2c\075\uff2c\077\uff2c" +
    "\001\002\000\076\004\uff20\011\uff20\012\uff20\015\uff20\016" +
    "\uff20\020\uff20\021\uff20\022\uff20\023\uff20\024\uff20\031\uff20" +
    "\033\uff20\036\uff20\041\uff20\043\uff20\044\uff20\045\uff20\050" +
    "\uff20\051\uff20\052\uff20\057\uff20\062\uff20\066\uff20\067\uff20" +
    "\071\uff20\072\uff20\073\uff20\074\uff20\075\uff20\077\uff20\001" +
    "\002\000\016\016\uff34\022\uff34\023\uff34\067\uff34\074\uff34" +
    "\077\uff34\001\002\000\074\004\uff2f\011\uff2f\012\uff2f\015" +
    "\uff2f\016\uff2f\020\uff2f\021\uff2f\022\uff2f\023\uff2f\024\uff2f" +
    "\031\uff2f\033\uff2f\036\uff2f\041\uff2f\043\uff2f\044\uff2f\045" +
    "\uff2f\050\uff2f\051\uff2f\052\uff2f\057\uff2f\062\uff2f\066\uff2f" +
    "\067\uff2f\071\uff2f\072\uff2f\074\uff2f\075\uff2f\077\uff2f\001" +
    "\002\000\074\004\355\011\uff31\012\uff31\015\357\016\uff31" +
    "\020\uff31\021\uff31\022\uff31\023\uff31\024\uff31\031\uff31\033" +
    "\uff31\036\uff31\041\uff31\043\uff31\044\uff31\045\352\050\uff31" +
    "\051\uff31\052\uff31\057\uff31\062\uff31\066\uff31\067\uff31\071" +
    "\356\072\353\074\uff31\075\uff31\077\uff31\001\002\000\076" +
    "\004\uff28\011\uff28\012\uff28\015\uff28\016\uff28\020\uff28\021" +
    "\uff28\022\uff28\023\uff28\024\uff28\031\uff28\033\uff28\036\uff28" +
    "\041\uff28\043\uff28\044\uff28\045\uff28\050\uff28\051\uff28\052" +
    "\uff28\057\uff28\062\uff28\066\uff28\067\uff28\071\uff28\072\uff28" +
    "\073\uff28\074\uff28\075\uff28\077\uff28\001\002\000\062\011" +
    "\uff33\012\uff33\016\uff33\020\uff33\021\uff33\022\uff33\023\uff33" +
    "\024\341\031\340\033\344\036\337\041\343\043\347\044" +
    "\335\050\336\051\uff33\052\350\057\342\062\uff33\066\uff33" +
    "\067\uff33\074\uff33\075\uff33\077\uff33\001\002\000\076\004" +
    "\uff26\011\uff26\012\uff26\015\uff26\016\uff26\020\uff26\021\uff26" +
    "\022\uff26\023\uff26\024\uff26\031\uff26\033\uff26\036\uff26\041" +
    "\uff26\043\uff26\044\uff26\045\uff26\050\uff26\051\uff26\052\uff26" +
    "\057\uff26\062\uff26\066\uff26\067\uff26\071\uff26\072\uff26\073" +
    "\uff26\074\uff26\075\uff26\077\uff26\001\002\000\076\004\uff2b" +
    "\011\uff2b\012\uff2b\015\uff2b\016\uff2b\020\uff2b\021\uff2b\022" +
    "\uff2b\023\uff2b\024\uff2b\031\uff2b\033\uff2b\036\uff2b\041\uff2b" +
    "\043\uff2b\044\uff2b\045\uff2b\050\uff2b\051\uff2b\052\uff2b\057" +
    "\uff2b\062\uff2b\066\uff2b\067\uff2b\071\uff2b\072\uff2b\073\333" +
    "\074\uff2b\075\uff2b\077\uff2b\001\002\000\076\004\uff23\011" +
    "\uff23\012\uff23\015\uff23\016\uff23\020\uff23\021\uff23\022\uff23" +
    "\023\uff23\024\uff23\031\uff23\033\uff23\036\uff23\041\uff23\043" +
    "\uff23\044\uff23\045\uff23\050\uff23\051\uff23\052\uff23\057\uff23" +
    "\062\uff23\066\uff23\067\uff23\071\uff23\072\uff23\073\uff23\074" +
    "\uff23\075\uff23\077\uff23\001\002\000\030\010\274\014\320" +
    "\034\014\040\312\042\276\044\065\046\277\047\275\057" +
    "\042\062\323\063\314\001\002\000\076\004\uff27\011\uff27" +
    "\012\uff27\015\uff27\016\uff27\020\uff27\021\uff27\022\uff27\023" +
    "\uff27\024\uff27\031\uff27\033\uff27\036\uff27\041\uff27\043\uff27" +
    "\044\uff27\045\uff27\050\uff27\051\uff27\052\uff27\057\uff27\062" +
    "\uff27\066\uff27\067\uff27\071\uff27\072\uff27\073\uff27\074\uff27" +
    "\075\uff27\077\uff27\001\002\000\076\004\uff1d\011\uff1d\012" +
    "\uff1d\015\uff1d\016\uff1d\020\uff1d\021\uff1d\022\uff1d\023\uff1d" +
    "\024\uff1d\031\uff1d\033\uff1d\036\uff1d\041\uff1d\043\uff1d\044" +
    "\uff1d\045\uff1d\050\uff1d\051\uff1d\052\uff1d\057\uff1d\062\uff1d" +
    "\066\uff1d\067\uff1d\071\uff1d\072\uff1d\073\uff1d\074\uff1d\075" +
    "\uff1d\077\uff1d\001\002\000\012\022\uff62\023\uff62\067\uff62" +
    "\077\uff62\001\002\000\026\010\274\014\320\034\014\040" +
    "\312\042\276\044\065\046\277\047\275\057\042\063\314" +
    "\001\002\000\076\004\uff1f\011\uff1f\012\uff1f\015\uff1f\016" +
    "\uff1f\020\uff1f\021\uff1f\022\uff1f\023\uff1f\024\uff1f\031\uff1f" +
    "\033\uff1f\036\uff1f\041\uff1f\043\uff1f\044\uff1f\045\uff1f\050" +
    "\uff1f\051\uff1f\052\uff1f\057\uff1f\062\uff1f\066\uff1f\067\uff1f" +
    "\071\uff1f\072\uff1f\073\uff1f\074\uff1f\075\uff1f\077\uff1f\001" +
    "\002\000\076\004\uff1e\011\uff1e\012\uff1e\015\uff1e\016\uff1e" +
    "\020\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\031\uff1e\033" +
    "\uff1e\036\uff1e\041\uff1e\043\uff1e\044\uff1e\045\uff1e\050\uff1e" +
    "\051\uff1e\052\uff1e\057\uff1e\062\uff1e\066\uff1e\067\uff1e\071" +
    "\uff1e\072\uff1e\073\uff1e\074\uff1e\075\uff1e\077\uff1e\001\002" +
    "\000\074\004\uff2d\011\uff2d\012\uff2d\015\uff2d\016\uff2d\020" +
    "\uff2d\021\uff2d\022\uff2d\023\uff2d\024\uff2d\031\uff2d\033\uff2d" +
    "\036\uff2d\041\uff2d\043\uff2d\044\uff2d\045\uff2d\050\uff2d\051" +
    "\uff2d\052\uff2d\057\uff2d\062\uff2d\066\uff2d\067\uff2d\071\uff2d" +
    "\072\uff2d\074\uff2d\075\uff2d\077\uff2d\001\002\000\010\012" +
    "\uff18\020\331\062\uff18\001\002\000\076\004\uff1a\011\uff1a" +
    "\012\uff1a\015\uff1a\016\uff1a\020\uff1a\021\uff1a\022\uff1a\023" +
    "\uff1a\024\uff1a\031\uff1a\033\uff1a\036\uff1a\041\uff1a\043\uff1a" +
    "\044\uff1a\045\uff1a\050\uff1a\051\uff1a\052\uff1a\057\uff1a\062" +
    "\uff1a\066\uff1a\067\uff1a\071\uff1a\072\uff1a\073\uff1a\074\uff1a" +
    "\075\uff1a\077\uff1a\001\002\000\010\012\uff16\020\uff16\062" +
    "\uff16\001\002\000\006\012\020\062\327\001\002\000\026" +
    "\010\274\014\320\034\014\040\312\042\276\044\065\046" +
    "\277\047\275\057\042\063\314\001\002\000\076\004\uff1b" +
    "\011\uff1b\012\uff1b\015\uff1b\016\uff1b\020\uff1b\021\uff1b\022" +
    "\uff1b\023\uff1b\024\uff1b\031\uff1b\033\uff1b\036\uff1b\041\uff1b" +
    "\043\uff1b\044\uff1b\045\uff1b\050\uff1b\051\uff1b\052\uff1b\057" +
    "\uff1b\062\uff1b\066\uff1b\067\uff1b\071\uff1b\072\uff1b\073\uff1b" +
    "\074\uff1b\075\uff1b\077\uff1b\001\002\000\010\012\uff19\020" +
    "\331\062\uff19\001\002\000\026\010\274\014\320\034\014" +
    "\040\312\042\276\044\065\046\277\047\275\057\042\063" +
    "\314\001\002\000\010\012\uff17\020\uff17\062\uff17\001\002" +
    "\000\022\010\274\014\320\034\014\040\312\042\276\046" +
    "\277\047\275\063\314\001\002\000\074\004\uff2a\011\uff2a" +
    "\012\uff2a\015\uff2a\016\uff2a\020\uff2a\021\uff2a\022\uff2a\023" +
    "\uff2a\024\uff2a\031\uff2a\033\uff2a\036\uff2a\041\uff2a\043\uff2a" +
    "\044\uff2a\045\uff2a\050\uff2a\051\uff2a\052\uff2a\057\uff2a\062" +
    "\uff2a\066\uff2a\067\uff2a\071\uff2a\072\uff2a\074\uff2a\075\uff2a" +
    "\077\uff2a\001\002\000\026\010\uff14\014\uff14\034\uff14\040" +
    "\uff14\042\uff14\044\uff14\046\uff14\047\uff14\057\uff14\063\uff14" +
    "\001\002\000\026\010\uff0c\014\uff0c\034\uff0c\040\uff0c\042" +
    "\uff0c\044\uff0c\046\uff0c\047\uff0c\057\uff0c\063\uff0c\001\002" +
    "\000\026\010\uff07\014\uff07\034\uff07\040\uff07\042\uff07\044" +
    "\uff07\046\uff07\047\uff07\057\uff07\063\uff07\001\002\000\026" +
    "\010\uff08\014\uff08\034\uff08\040\uff08\042\uff08\044\uff08\046" +
    "\uff08\047\uff08\057\uff08\063\uff08\001\002\000\026\010\uff0d" +
    "\014\uff0d\034\uff0d\040\uff0d\042\uff0d\044\uff0d\046\uff0d\047" +
    "\uff0d\057\uff0d\063\uff0d\001\002\000\026\010\uff15\014\uff15" +
    "\034\uff15\040\uff15\042\uff15\044\uff15\046\uff15\047\uff15\057" +
    "\uff15\063\uff15\001\002\000\026\010\uff09\014\uff09\034\uff09" +
    "\040\uff09\042\uff09\044\uff09\046\uff09\047\uff09\057\uff09\063" +
    "\uff09\001\002\000\026\010\uff0a\014\uff0a\034\uff0a\040\uff0a" +
    "\042\uff0a\044\uff0a\046\uff0a\047\uff0a\057\uff0a\063\uff0a\001" +
    "\002\000\026\010\274\014\320\034\014\040\312\042\276" +
    "\044\065\046\277\047\275\057\042\063\314\001\002\000" +
    "\026\010\274\014\320\034\014\040\312\042\276\044\065" +
    "\046\277\047\275\057\042\063\314\001\002\000\026\010" +
    "\uff0b\014\uff0b\034\uff0b\040\uff0b\042\uff0b\044\uff0b\046\uff0b" +
    "\047\uff0b\057\uff0b\063\uff0b\001\002\000\026\010\uff13\014" +
    "\uff13\034\uff13\040\uff13\042\uff13\044\uff13\046\uff13\047\uff13" +
    "\057\uff13\063\uff13\001\002\000\074\004\355\011\uff30\012" +
    "\uff30\015\357\016\uff30\020\uff30\021\uff30\022\uff30\023\uff30" +
    "\024\uff30\031\uff30\033\uff30\036\uff30\041\uff30\043\uff30\044" +
    "\uff30\045\352\050\uff30\051\uff30\052\uff30\057\uff30\062\uff30" +
    "\066\uff30\067\uff30\071\356\072\353\074\uff30\075\uff30\077" +
    "\uff30\001\002\000\026\010\uff0f\014\uff0f\034\uff0f\040\uff0f" +
    "\042\uff0f\044\uff0f\046\uff0f\047\uff0f\057\uff0f\063\uff0f\001" +
    "\002\000\026\010\uff12\014\uff12\034\uff12\040\uff12\042\uff12" +
    "\044\uff12\046\uff12\047\uff12\057\uff12\063\uff12\001\002\000" +
    "\026\010\274\014\320\034\014\040\312\042\276\044\065" +
    "\046\277\047\275\057\042\063\314\001\002\000\026\010" +
    "\uff0e\014\uff0e\034\uff0e\040\uff0e\042\uff0e\044\uff0e\046\uff0e" +
    "\047\uff0e\057\uff0e\063\uff0e\001\002\000\026\010\uff11\014" +
    "\uff11\034\uff11\040\uff11\042\uff11\044\uff11\046\uff11\047\uff11" +
    "\057\uff11\063\uff11\001\002\000\026\010\uff10\014\uff10\034" +
    "\uff10\040\uff10\042\uff10\044\uff10\046\uff10\047\uff10\057\uff10" +
    "\063\uff10\001\002\000\074\004\uff2e\011\uff2e\012\uff2e\015" +
    "\uff2e\016\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e\024\uff2e" +
    "\031\uff2e\033\uff2e\036\uff2e\041\uff2e\043\uff2e\044\uff2e\045" +
    "\uff2e\050\uff2e\051\uff2e\052\uff2e\057\uff2e\062\uff2e\066\uff2e" +
    "\067\uff2e\071\uff2e\072\uff2e\074\uff2e\075\uff2e\077\uff2e\001" +
    "\002\000\044\011\uff32\012\uff32\016\uff32\020\uff32\021\uff32" +
    "\022\uff32\023\uff32\044\335\051\uff32\052\350\057\342\062" +
    "\uff32\066\uff32\067\uff32\074\uff32\075\uff32\077\uff32\001\002" +
    "\000\004\066\363\001\002\000\076\004\uff25\011\uff25\012" +
    "\uff25\015\uff25\016\uff25\020\uff25\021\uff25\022\uff25\023\uff25" +
    "\024\uff25\031\uff25\033\uff25\036\uff25\041\uff25\043\uff25\044" +
    "\uff25\045\uff25\050\uff25\051\uff25\052\uff25\057\uff25\062\uff25" +
    "\066\uff25\067\uff25\071\uff25\072\uff25\073\uff25\074\uff25\075" +
    "\uff25\077\uff25\001\002\000\076\004\uff24\011\uff24\012\uff24" +
    "\015\uff24\016\uff24\020\uff24\021\uff24\022\uff24\023\uff24\024" +
    "\uff24\031\uff24\033\uff24\036\uff24\041\uff24\043\uff24\044\uff24" +
    "\045\uff24\050\uff24\051\uff24\052\uff24\057\uff24\062\uff24\066" +
    "\uff24\067\uff24\071\uff24\072\uff24\073\uff24\074\uff24\075\uff24" +
    "\077\uff24\001\002\000\026\010\274\014\320\034\014\040" +
    "\312\042\276\044\065\046\277\047\275\057\042\063\314" +
    "\001\002\000\106\004\uff54\006\uff54\011\uff54\012\uff54\015" +
    "\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54\023\uff54" +
    "\024\uff54\031\uff54\033\uff54\036\uff54\040\uff54\041\uff54\043" +
    "\uff54\044\uff54\045\uff54\050\uff54\051\uff54\052\uff54\057\uff54" +
    "\062\uff54\066\uff54\067\uff54\071\uff54\072\uff54\073\uff54\074" +
    "\uff54\075\uff54\077\uff54\100\uff54\001\002\000\004\034\014" +
    "\001\002\000\106\004\uff4f\006\uff4f\011\uff4f\012\uff4f\015" +
    "\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\022\uff4f\023\uff4f" +
    "\024\uff4f\031\uff4f\033\uff4f\036\uff4f\040\uff4f\041\uff4f\043" +
    "\uff4f\044\uff4f\045\uff4f\050\uff4f\051\uff4f\052\uff4f\057\uff4f" +
    "\062\uff4f\066\uff4f\067\uff4f\071\uff4f\072\uff4f\073\uff4f\074" +
    "\uff4f\075\uff4f\077\uff4f\100\uff4f\001\002\000\006\012\020" +
    "\062\375\001\002\000\006\012\uff50\062\uff50\001\002\000" +
    "\006\012\uff51\062\uff51\001\002\000\026\010\274\014\320" +
    "\034\014\040\312\042\276\044\065\046\277\047\275\057" +
    "\042\063\314\001\002\000\106\004\uff53\006\uff53\011\uff53" +
    "\012\uff53\015\uff53\016\uff53\017\uff53\020\uff53\021\uff53\022" +
    "\uff53\023\uff53\024\uff53\031\uff53\033\uff53\036\uff53\040\uff53" +
    "\041\uff53\043\uff53\044\uff53\045\uff53\050\uff53\051\uff53\052" +
    "\uff53\057\uff53\062\uff53\066\uff53\067\uff53\071\uff53\072\uff53" +
    "\073\uff53\074\uff53\075\uff53\077\uff53\100\uff53\001\002\000" +
    "\006\012\uff52\062\uff52\001\002\000\026\010\274\014\320" +
    "\034\014\040\312\042\276\044\065\046\277\047\275\057" +
    "\042\063\314\001\002\000\076\004\uff1c\011\uff1c\012\uff1c" +
    "\015\uff1c\016\uff1c\020\uff1c\021\uff1c\022\uff1c\023\uff1c\024" +
    "\uff1c\031\uff1c\033\uff1c\036\uff1c\041\uff1c\043\uff1c\044\uff1c" +
    "\045\uff1c\050\uff1c\051\uff1c\052\uff1c\057\uff1c\062\uff1c\066" +
    "\uff1c\067\uff1c\071\uff1c\072\uff1c\073\uff1c\074\uff1c\075\uff1c" +
    "\077\uff1c\001\002\000\006\012\uff4a\066\uff4a\001\002\000" +
    "\010\011\u0107\012\uff49\066\uff49\001\002\000\006\012\020" +
    "\066\u0105\001\002\000\026\010\274\014\320\034\014\040" +
    "\312\042\276\044\065\046\277\047\275\057\042\063\314" +
    "\001\002\000\076\004\uff4c\011\uff4c\012\uff4c\015\uff4c\016" +
    "\uff4c\020\uff4c\021\uff4c\022\uff4c\023\uff4c\024\uff4c\031\uff4c" +
    "\033\uff4c\036\uff4c\041\uff4c\043\uff4c\044\uff4c\045\uff4c\050" +
    "\uff4c\051\uff4c\052\uff4c\057\uff4c\062\uff4c\066\uff4c\067\uff4c" +
    "\071\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c\077\uff4c\001" +
    "\002\000\006\012\uff4b\066\uff4b\001\002\000\026\010\274" +
    "\014\320\034\014\040\312\042\276\044\065\046\277\047" +
    "\275\057\042\063\314\001\002\000\010\011\u0109\012\uff48" +
    "\066\uff48\001\002\000\026\010\274\014\320\034\014\040" +
    "\312\042\276\044\065\046\277\047\275\057\042\063\314" +
    "\001\002\000\006\012\uff47\066\uff47\001\002\000\004\006" +
    "\uff3b\001\002\000\004\006\u010d\001\002\000\026\010\274" +
    "\014\320\034\014\040\312\042\276\044\065\046\277\047" +
    "\275\057\042\063\314\001\002\000\006\021\uff3a\075\uff3a" +
    "\001\002\000\006\021\u0112\075\u0110\001\002\000\026\010" +
    "\uff39\014\uff39\034\uff39\040\uff39\042\uff39\044\uff39\046\uff39" +
    "\047\uff39\057\uff39\063\uff39\001\002\000\026\010\274\014" +
    "\320\034\014\040\312\042\276\044\065\046\277\047\275" +
    "\057\042\063\314\001\002\000\026\010\uff38\014\uff38\034" +
    "\uff38\040\uff38\042\uff38\044\uff38\046\uff38\047\uff38\057\uff38" +
    "\063\uff38\001\002\000\004\016\uff37\001\002\000\004\016" +
    "\u0115\001\002\000\036\007\253\014\262\022\uff67\023\uff67" +
    "\026\256\032\231\034\014\035\240\055\221\065\260\067" +
    "\uff67\077\uff67\102\232\103\243\001\002\000\010\023\uff5f" +
    "\067\uff5f\077\uff5f\001\002\000\012\022\uff5e\023\uff5e\067" +
    "\uff5e\077\uff5e\001\002\000\004\051\uff41\001\002\000\004" +
    "\051\u011a\001\002\000\016\010\046\014\073\034\014\044" +
    "\065\057\042\063\070\001\002\000\006\011\u012a\012\020" +
    "\001\002\000\006\023\u0120\067\u011e\001\002\000\006\023" +
    "\uff3f\067\uff3f\001\002\000\022\010\uff05\014\uff05\023\u0129" +
    "\034\uff05\044\uff05\053\uff05\057\uff05\063\uff05\001\002\000" +
    "\020\010\046\014\073\034\014\044\065\053\u0121\057\042" +
    "\063\070\001\002\000\012\022\uff45\023\uff45\067\uff45\077" +
    "\uff45\001\002\000\034\007\uff3d\011\u0128\014\uff3d\023\uff3d" +
    "\026\uff3d\032\uff3d\034\uff3d\035\uff3d\055\uff3d\065\uff3d\067" +
    "\uff3d\102\uff3d\103\uff3d\001\002\000\006\023\uff40\067\uff40" +
    "\001\002\000\032\007\253\014\262\023\uff67\026\256\032" +
    "\231\034\014\035\240\055\221\065\260\067\uff67\102\232" +
    "\103\243\001\002\000\006\023\u0126\067\u0125\001\002\000" +
    "\004\023\u0127\001\002\000\012\022\uff43\023\uff43\067\uff43" +
    "\077\uff43\001\002\000\012\022\uff42\023\uff42\067\uff42\077" +
    "\uff42\001\002\000\032\007\uff3c\014\uff3c\023\uff3c\026\uff3c" +
    "\032\uff3c\034\uff3c\035\uff3c\055\uff3c\065\uff3c\067\uff3c\102" +
    "\uff3c\103\uff3c\001\002\000\012\022\uff44\023\uff44\067\uff44" +
    "\077\uff44\001\002\000\032\007\253\014\262\023\uff67\026" +
    "\256\032\231\034\014\035\240\055\221\065\260\067\uff67" +
    "\102\232\103\243\001\002\000\006\023\uff3e\067\uff3e\001" +
    "\002\000\006\012\020\016\u0130\001\002\000\014\012\uff35" +
    "\016\uff35\017\367\040\365\100\366\001\002\000\014\012" +
    "\uff57\016\uff57\017\uff57\040\uff57\100\uff57\001\002\000\004" +
    "\034\014\001\002\000\036\007\253\014\262\022\uff67\023" +
    "\uff67\026\256\032\231\034\014\035\240\055\221\065\260" +
    "\067\uff67\077\uff67\102\232\103\243\001\002\000\010\023" +
    "\uff5d\067\uff5d\077\uff5d\001\002\000\012\022\uff5c\023\uff5c" +
    "\067\uff5c\077\uff5c\001\002\000\014\012\uff36\016\uff36\017" +
    "\367\040\365\100\366\001\002\000\034\007\253\022\uff67" +
    "\023\uff67\026\256\032\231\034\014\035\240\055\221\065" +
    "\260\067\uff67\077\uff67\102\232\103\243\001\002\000\010" +
    "\023\uff75\067\uff75\077\uff75\001\002\000\012\022\uff73\023" +
    "\uff73\067\uff73\077\uff73\001\002\000\004\074\u0138\001\002" +
    "\000\036\007\253\014\262\022\uff67\023\uff67\026\256\032" +
    "\231\034\014\035\240\055\221\065\260\067\uff67\077\uff67" +
    "\102\232\103\243\001\002\000\010\023\uff5b\067\uff5b\077" +
    "\uff5b\001\002\000\012\022\u013b\023\uff76\067\uff76\077\uff76" +
    "\001\002\000\036\007\253\014\262\022\uff67\023\uff67\026" +
    "\256\032\231\034\014\035\240\055\221\065\260\067\uff67" +
    "\077\uff67\102\232\103\243\001\002\000\010\023\uff5a\067" +
    "\uff5a\077\uff5a\001\002\000\012\022\uff59\023\uff59\067\uff59" +
    "\077\uff59\001\002\000\004\016\u013f\001\002\000\036\007" +
    "\253\014\262\022\uff67\023\uff67\026\256\032\231\034\014" +
    "\035\240\055\221\065\260\067\uff67\077\uff67\102\232\103" +
    "\243\001\002\000\010\023\uff61\067\uff61\077\uff61\001\002" +
    "\000\012\022\uff60\023\uff60\067\uff60\077\uff60\001\002\000" +
    "\012\022\uff46\023\uff46\067\uff46\077\uff46\001\002\000\026" +
    "\010\274\014\320\034\014\040\312\042\276\044\065\046" +
    "\277\047\275\057\042\063\314\001\002\000\012\022\uff58" +
    "\023\uff58\067\uff58\077\uff58\001\002\000\012\022\uff4e\023" +
    "\uff4e\067\uff4e\077\uff4e\001\002\000\010\011\u0148\042\u0149" +
    "\067\uff7d\001\002\000\004\011\u0160\001\002\000\004\034" +
    "\014\001\002\000\012\030\u0152\034\014\060\207\101\u014e" +
    "\001\002\000\006\066\uff8b\067\uff8b\001\002\000\006\066" +
    "\uff86\067\uff86\001\002\000\006\066\uff8d\067\uff8d\001\002" +
    "\000\006\066\uff87\067\uff87\001\002\000\004\034\014\001" +
    "\002\000\006\066\u0158\067\024\001\002\000\006\011\u0156" +
    "\012\020\001\002\000\006\066\uff8a\067\uff8a\001\002\000" +
    "\004\034\014\001\002\000\006\066\uff8e\067\uff8e\001\002" +
    "\000\006\066\uff8c\067\uff8c\001\002\000\006\011\u0148\042" +
    "\u0149\001\002\000\004\034\014\001\002\000\006\066\uff89" +
    "\067\uff89\001\002\000\010\011\uff90\066\uff90\067\uff90\001" +
    "\002\000\012\030\u0152\034\014\060\207\101\u014e\001\002" +
    "\000\006\066\uff8f\067\uff8f\001\002\000\006\011\u015c\012" +
    "\020\001\002\000\004\034\014\001\002\000\006\066\uff88" +
    "\067\uff88\001\002\000\006\066\uff7e\067\uff7e\001\002\000" +
    "\006\066\uff80\067\uff80\001\002\000\004\034\014\001\002" +
    "\000\006\066\uff7f\067\uff7f\001\002\000\006\066\uff93\067" +
    "\uff93\001\002\000\024\013\ufff6\025\u0165\027\u0164\030\ufff6" +
    "\037\026\055\ufff6\060\ufff6\076\ufff6\101\ufff6\001\002\000" +
    "\004\067\uff92\001\002\000\004\067\uff91\001\002\000\004" +
    "\067\uff95\001\002\000\004\067\uff96\001\002\000\004\067" +
    "\uff84\001\002\000\010\042\uff85\066\uff85\067\uff85\001\002" +
    "\000\024\013\ufff6\025\u0165\027\u0164\030\ufff6\037\026\055" +
    "\ufff6\060\ufff6\076\ufff6\101\ufff6\001\002\000\004\067\uff81" +
    "\001\002\000\004\067\uff83\001\002\000\004\067\uff7c\001" +
    "\002\000\020\013\ufff6\030\ufff6\037\026\055\ufff6\060\ufff6" +
    "\076\ufff6\101\ufff6\001\002\000\004\067\uff82\001\002\000" +
    "\004\067\024\001\002\000\006\011\u0173\012\020\001\002" +
    "\000\004\067\uff9e\001\002\000\034\005\071\010\046\014" +
    "\073\034\014\042\056\044\065\054\052\056\060\057\042" +
    "\063\070\064\064\070\062\100\057\001\002\000\004\067" +
    "\uff9d\001\002\000\014\002\uffa1\030\uffa1\034\014\055\uffa1" +
    "\060\uffa1\001\002\000\004\067\uff9f\001\002\000\006\012" +
    "\ufff4\067\ufff4\001\002\000\006\012\020\067\024\001\002" +
    "\000\004\014\262\001\002\000\016\013\ufff7\030\ufff7\055" +
    "\ufff7\060\ufff7\076\ufff7\101\ufff7\001\002\000\006\012\ufff5" +
    "\067\ufff5\001\002\000\004\002\001\001\002\000\012\002" +
    "\uffa0\030\uffa0\060\uffa0\101\202\001\002\000\010\002\uff9b" +
    "\030\214\060\207\001\002\000\004\002\ufff8\001\002\000" +
    "\004\024\u0184\001\002\000\020\002\ufff2\030\ufff2\034\014" +
    "\055\ufff2\060\ufff2\076\ufff2\101\ufff2\001\002\000\020\002" +
    "\uffef\030\uffef\034\uffef\055\uffef\060\uffef\076\uffef\101\uffef" +
    "\001\002\000\020\002\ufff0\030\ufff0\034\ufff0\055\ufff0\060" +
    "\ufff0\076\ufff0\101\ufff0\001\002\000\024\010\274\014\320" +
    "\034\014\042\u018a\044\065\046\277\047\u0188\057\042\063" +
    "\314\001\002\000\032\024\341\031\340\033\344\036\337" +
    "\041\343\043\347\044\335\050\336\052\350\057\342\066" +
    "\uffed\067\uffed\001\002\000\046\004\uffe5\015\uffe5\024\uffe5" +
    "\031\uffe5\033\uffe5\036\uffe5\041\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\050\uffe5\052\uffe5\057\uffe5\066\uffe5\067\uffe5\071\uffe5" +
    "\072\uffe5\073\u0197\001\002\000\046\004\uffe3\015\uffe3\024" +
    "\uffe3\031\uffe3\033\uffe3\036\uffe3\041\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\050\uffe3\052\uffe3\057\uffe3\066\uffe3\067\uffe3\071" +
    "\uffe3\072\uffe3\073\uffe3\001\002\000\020\010\274\014\320" +
    "\034\014\042\u018a\046\277\047\u0188\063\314\001\002\000" +
    "\044\004\uffe6\015\uffe6\024\uffe6\031\uffe6\033\uffe6\036\uffe6" +
    "\041\uffe6\043\uffe6\044\uffe6\045\uffe6\050\uffe6\052\uffe6\057" +
    "\uffe6\066\uffe6\067\uffe6\071\uffe6\072\uffe6\001\002\000\024" +
    "\010\274\014\320\034\014\042\u018a\044\065\046\277\047" +
    "\u0188\057\042\063\314\001\002\000\046\004\uffe1\015\uffe1" +
    "\024\uffe1\031\uffe1\033\uffe1\036\uffe1\041\uffe1\043\uffe1\044" +
    "\uffe1\045\uffe1\050\uffe1\052\uffe1\057\uffe1\066\uffe1\067\uffe1" +
    "\071\uffe1\072\uffe1\073\uffe1\001\002\000\004\067\024\001" +
    "\002\000\044\004\uffe9\015\uffe9\024\uffe9\031\uffe9\033\uffe9" +
    "\036\uffe9\041\uffe9\043\uffe9\044\uffe9\045\uffe9\050\uffe9\052" +
    "\uffe9\057\uffe9\066\uffe9\067\uffe9\071\uffe9\072\uffe9\001\002" +
    "\000\044\004\355\015\357\024\uffeb\031\uffeb\033\uffeb\036" +
    "\uffeb\041\uffeb\043\uffeb\044\uffeb\045\352\050\uffeb\052\uffeb" +
    "\057\uffeb\066\uffeb\067\uffeb\071\356\072\353\001\002\000" +
    "\024\010\274\014\320\034\014\042\u018a\044\065\046\277" +
    "\047\u0188\057\042\063\314\001\002\000\044\004\uffe7\015" +
    "\uffe7\024\uffe7\031\uffe7\033\uffe7\036\uffe7\041\uffe7\043\uffe7" +
    "\044\uffe7\045\uffe7\050\uffe7\052\uffe7\057\uffe7\066\uffe7\067" +
    "\uffe7\071\uffe7\072\uffe7\001\002\000\024\010\274\014\320" +
    "\034\014\042\u018a\044\065\046\277\047\u0188\057\042\063" +
    "\314\001\002\000\044\004\uffe8\015\uffe8\024\uffe8\031\uffe8" +
    "\033\uffe8\036\uffe8\041\uffe8\043\uffe8\044\uffe8\045\uffe8\050" +
    "\uffe8\052\uffe8\057\uffe8\066\uffe8\067\uffe8\071\uffe8\072\uffe8" +
    "\001\002\000\020\002\uffee\030\uffee\034\uffee\055\uffee\060" +
    "\uffee\076\uffee\101\uffee\001\002\000\004\066\u0195\001\002" +
    "\000\046\004\uffe2\015\uffe2\024\uffe2\031\uffe2\033\uffe2\036" +
    "\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\050\uffe2\052\uffe2" +
    "\057\uffe2\066\uffe2\067\uffe2\071\uffe2\072\uffe2\073\uffe2\001" +
    "\002\000\046\004\uffe0\015\uffe0\024\uffe0\031\uffe0\033\uffe0" +
    "\036\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\050\uffe0\052" +
    "\uffe0\057\uffe0\066\uffe0\067\uffe0\071\uffe0\072\uffe0\073\uffe0" +
    "\001\002\000\020\010\274\014\320\034\014\042\u018a\046" +
    "\277\047\u0188\063\314\001\002\000\044\004\uffe4\015\uffe4" +
    "\024\uffe4\031\uffe4\033\uffe4\036\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\050\uffe4\052\uffe4\057\uffe4\066\uffe4\067\uffe4" +
    "\071\uffe4\072\uffe4\001\002\000\024\010\274\014\320\034" +
    "\014\042\u018a\044\065\046\277\047\u0188\057\042\063\314" +
    "\001\002\000\024\010\274\014\320\034\014\042\u018a\044" +
    "\065\046\277\047\u0188\057\042\063\314\001\002\000\014" +
    "\044\335\052\350\057\342\066\uffec\067\uffec\001\002\000" +
    "\044\004\355\015\357\024\uffea\031\uffea\033\uffea\036\uffea" +
    "\041\uffea\043\uffea\044\uffea\045\352\050\uffea\052\uffea\057" +
    "\uffea\066\uffea\067\uffea\071\356\072\353\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\014\003\006\004\005\005\007\010\010\014" +
    "\004\001\001\000\010\015\u0180\016\u0181\206\u017f\001\001" +
    "\000\004\030\u017c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\207\024\001\001\000\002\001\001\000\004" +
    "\206\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\016\206\015\001\001\000\002\001\001\000\004" +
    "\210\020\001\001\000\002\001\001\000\004\206\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\027\011\026\001\001\000\006\012\u0177\013" +
    "\u0176\001\001\000\004\014\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\032\001\001\000\004\067" +
    "\202\001\001\000\010\031\036\032\034\206\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\032\037\206" +
    "\035\001\001\000\002\001\001\000\042\025\042\026\071" +
    "\027\046\033\065\034\053\035\062\036\050\037\060\040" +
    "\052\041\073\042\066\047\054\062\074\064\044\065\047" +
    "\206\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\041" +
    "\176\042\066\047\054\062\074\064\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\174\206\015\001\001\000\006\066\173\206\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\117\050\116\051\115\052\114" +
    "\206\015\001\001\000\002\001\001\000\004\207\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\075\206\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\025\042\026\071\027\046\035\104\036" +
    "\050\037\060\043\102\044\103\045\100\206\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\210\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\025\042" +
    "\026\071\027\046\035\104\036\050\037\060\044\112\045" +
    "\100\206\101\001\001\000\002\001\001\000\044\025\042" +
    "\026\071\027\046\033\110\034\053\035\062\036\050\037" +
    "\060\040\052\041\073\042\066\046\111\047\054\062\074" +
    "\064\044\065\047\206\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\207\160\001\001\000" +
    "\004\210\020\001\001\000\012\053\123\060\122\061\121" +
    "\206\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\025\131\026\071" +
    "\027\046\054\130\055\127\056\126\057\132\206\076\001" +
    "\001\000\004\210\137\001\001\000\002\001\001\000\004" +
    "\207\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\134\026\071\027\046\206\076\001\001\000\002" +
    "\001\001\000\020\025\131\026\071\027\046\055\136\056" +
    "\126\057\132\206\076\001\001\000\002\001\001\000\014" +
    "\025\131\026\071\027\046\057\152\206\076\001\001\000" +
    "\002\001\001\000\014\006\117\050\143\051\115\052\142" +
    "\206\015\001\001\000\002\001\001\000\004\207\145\001" +
    "\001\000\002\001\001\000\012\006\117\051\147\052\146" +
    "\206\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\061\154\206\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\025\042\026\071\027\046\033\157\034\053" +
    "\035\062\036\050\037\060\040\052\041\073\042\066\047" +
    "\054\062\074\064\044\065\047\206\043\001\001\000\002" +
    "\001\001\000\012\006\117\051\147\052\162\206\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\025\042\026\071\027\046\035" +
    "\104\036\050\037\060\045\166\063\167\206\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\025\042\026" +
    "\071\027\046\033\110\034\053\035\062\036\050\037\060" +
    "\040\052\041\073\042\066\046\171\047\054\062\074\064" +
    "\044\065\047\206\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\210\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\200\026\071" +
    "\027\046\206\076\001\001\000\002\001\001\000\012\006" +
    "\u0170\070\u016f\071\u0171\206\015\001\001\000\024\072\214" +
    "\073\215\074\211\075\212\076\207\107\210\111\203\112" +
    "\205\114\204\001\001\000\002\001\001\000\004\207\u016d" +
    "\001\001\000\004\207\u0169\001\001\000\004\206\u0168\001" +
    "\001\000\004\207\u0162\001\001\000\004\100\u0161\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\206\u0145\001" +
    "\001\000\006\116\222\117\221\001\001\000\004\207\216" +
    "\001\001\000\020\074\217\075\212\076\207\107\210\111" +
    "\203\112\205\114\204\001\001\000\002\001\001\000\064" +
    "\013\241\117\240\120\260\121\224\122\223\123\232\124" +
    "\250\125\251\126\254\127\243\130\253\131\233\132\234" +
    "\133\227\134\256\135\244\136\263\137\236\140\226\141" +
    "\262\144\235\145\245\151\246\152\247\206\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\146\u0144\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u0141\001\001\000\046\026" +
    "\315\140\272\141\262\144\235\164\u013d\165\301\166\305" +
    "\167\303\170\302\171\277\172\307\173\304\174\310\175" +
    "\300\176\316\177\312\200\306\206\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\026\315\140\272\141\262" +
    "\144\235\164\u0136\165\301\166\305\167\303\170\302\171" +
    "\277\172\307\173\304\174\310\175\300\176\316\177\312" +
    "\200\306\206\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\140\u012c\141\262\144\235\163\u012b\206\u012d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\026\315\140\272\141\262\144" +
    "\235\153\u0118\165\u0117\166\305\167\303\170\302\171\277" +
    "\172\307\173\304\174\310\175\300\176\316\177\312\200" +
    "\306\206\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\157\u010b\206\u010a\001\001\000\002\001\001\000" +
    "\064\013\241\117\240\120\267\121\224\122\223\123\232" +
    "\124\250\125\251\126\254\127\243\130\253\131\233\132" +
    "\234\133\227\134\256\135\244\136\263\137\236\140\226" +
    "\141\262\144\235\145\245\151\246\152\247\206\225\001" +
    "\001\000\004\207\264\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\013\241\117\240\121" +
    "\266\122\223\123\232\124\250\125\251\126\254\127\243" +
    "\130\253\131\233\132\234\133\227\134\256\135\244\136" +
    "\263\137\236\140\226\141\262\144\235\145\245\151\246" +
    "\152\247\206\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\207\264\001\001\000\046\026\315\140\272" +
    "\141\262\144\235\164\314\165\301\166\305\167\303\170" +
    "\302\171\277\172\307\173\304\174\310\175\300\176\316" +
    "\177\312\200\306\206\271\001\001\000\004\146\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\140\272" +
    "\141\262\144\235\172\363\173\304\174\310\175\300\176" +
    "\316\177\312\200\306\206\271\001\001\000\044\026\315" +
    "\140\272\141\262\144\235\165\361\166\305\167\303\170" +
    "\302\171\277\172\307\173\304\174\310\175\300\176\316" +
    "\177\312\200\306\206\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\204\353\001\001\000\002\001\001\000" +
    "\006\203\345\205\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\026\315\140\272\141" +
    "\262\144\235\165\323\166\305\167\303\170\302\171\277" +
    "\172\307\173\304\174\310\175\300\176\316\177\312\200" +
    "\306\201\324\202\321\206\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\026\315\140" +
    "\272\141\262\144\235\170\320\171\277\172\307\173\304" +
    "\174\310\175\300\176\316\177\312\200\306\206\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\210\325\001\001\000\046\026\315\140\272\141\262" +
    "\144\235\165\323\166\305\167\303\170\302\171\277\172" +
    "\307\173\304\174\310\175\300\176\316\177\312\200\306" +
    "\202\327\206\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\026\315\140\272\141\262\144\235\165\331" +
    "\166\305\167\303\170\302\171\277\172\307\173\304\174" +
    "\310\175\300\176\316\177\312\200\306\206\271\001\001" +
    "\000\002\001\001\000\032\140\272\141\262\144\235\171" +
    "\333\172\307\173\304\174\310\175\300\176\316\177\312" +
    "\200\306\206\271\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\026\315\140\272\141\262\144\235" +
    "\166\360\167\303\170\302\171\277\172\307\173\304\174" +
    "\310\175\300\176\316\177\312\200\306\206\271\001\001" +
    "\000\040\026\315\140\272\141\262\144\235\167\350\170" +
    "\302\171\277\172\307\173\304\174\310\175\300\176\316" +
    "\177\312\200\306\206\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\204\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\026\315\140\272\141\262\144" +
    "\235\170\357\171\277\172\307\173\304\174\310\175\300" +
    "\176\316\177\312\200\306\206\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\203\345\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\026\315\140\272\141\262" +
    "\142\370\143\372\144\235\165\371\166\305\167\303\170" +
    "\302\171\277\172\307\173\304\174\310\175\300\176\316" +
    "\177\312\200\306\206\271\001\001\000\002\001\001\000" +
    "\004\206\367\001\001\000\002\001\001\000\004\210\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\026" +
    "\315\140\272\141\262\143\375\144\235\165\371\166\305" +
    "\167\303\170\302\171\277\172\307\173\304\174\310\175" +
    "\300\176\316\177\312\200\306\206\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\026\315\140\272\141" +
    "\262\144\235\147\u0102\150\u0100\165\u0101\166\305\167\303" +
    "\170\302\171\277\172\307\173\304\174\310\175\300\176" +
    "\316\177\312\200\306\206\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\210\u0103\001" +
    "\001\000\046\026\315\140\272\141\262\144\235\150\u0105" +
    "\165\u0101\166\305\167\303\170\302\171\277\172\307\173" +
    "\304\174\310\175\300\176\316\177\312\200\306\206\271" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\026" +
    "\315\140\272\141\262\144\235\165\u0107\166\305\167\303" +
    "\170\302\171\277\172\307\173\304\174\310\175\300\176" +
    "\316\177\312\200\306\206\271\001\001\000\002\001\001" +
    "\000\044\026\315\140\272\141\262\144\235\165\u0109\166" +
    "\305\167\303\170\302\171\277\172\307\173\304\174\310" +
    "\175\300\176\316\177\312\200\306\206\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\026\315\140\272\141\262\144\235\160\u010e\165\u010d\166" +
    "\305\167\303\170\302\171\277\172\307\173\304\174\310" +
    "\175\300\176\316\177\312\200\306\206\271\001\001\000" +
    "\002\001\001\000\004\161\u0110\001\001\000\002\001\001" +
    "\000\046\026\315\140\272\141\262\144\235\162\u0113\165" +
    "\u0112\166\305\167\303\170\302\171\277\172\307\173\304" +
    "\174\310\175\300\176\316\177\312\200\306\206\271\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\013\241\117\240\122\u0115\123\u0116\124\250\125" +
    "\251\126\254\127\243\130\253\131\233\132\234\133\227" +
    "\134\256\135\244\136\263\137\236\140\226\141\262\144" +
    "\235\145\245\151\246\152\247\206\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\025\131\026\071\027\046\056\u011a\057\132" +
    "\154\u011b\155\u011c\206\076\001\001\000\004\210\137\001" +
    "\001\000\004\207\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\025\131\026\071\027\046\056\u011a\057" +
    "\132\155\u0121\156\u0122\206\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\013\241\117" +
    "\240\121\u0123\122\223\123\232\124\250\125\251\126\254" +
    "\127\243\130\253\131\233\132\234\133\227\134\256\135" +
    "\244\136\263\137\236\140\226\141\262\144\235\145\245" +
    "\151\246\152\247\206\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\013\241\117\240\121" +
    "\u012a\122\223\123\232\124\250\125\251\126\254\127\243" +
    "\130\253\131\233\132\234\133\227\134\256\135\244\136" +
    "\263\137\236\140\226\141\262\144\235\145\245\151\246" +
    "\152\247\206\225\001\001\000\002\001\001\000\004\210" +
    "\u012e\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\140\u0132\141\262\144\235\206\u012d\001\001\000\060\013" +
    "\241\117\240\122\u0130\123\u0131\124\250\125\251\126\254" +
    "\127\243\130\253\131\233\132\234\133\227\134\256\135" +
    "\244\136\263\137\236\140\226\141\262\144\235\145\245" +
    "\151\246\152\247\206\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\117\240\124\u0135" +
    "\125\u0134\126\254\127\243\130\253\131\233\132\234\133" +
    "\227\134\256\135\244\136\263\137\236\140\226\141\262" +
    "\144\235\145\245\151\246\152\247\206\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\013\241\117\240\121\u0138\122\223\123\u0139\124\250\125" +
    "\251\126\254\127\243\130\253\131\233\132\234\133\227" +
    "\134\256\135\244\136\263\137\236\140\226\141\262\144" +
    "\235\145\245\151\246\152\247\206\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\013\241\117\240\122" +
    "\u013b\123\u013c\124\250\125\251\126\254\127\243\130\253" +
    "\131\233\132\234\133\227\134\256\135\244\136\263\137" +
    "\236\140\226\141\262\144\235\145\245\151\246\152\247" +
    "\206\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\013\241\117\240\122\u013f\123\u0140" +
    "\124\250\125\251\126\254\127\243\130\253\131\233\132" +
    "\234\133\227\134\256\135\244\136\263\137\236\140\226" +
    "\141\262\144\235\145\245\151\246\152\247\206\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\026\315\140\272\141\262\144\235\165\u0143\166" +
    "\305\167\303\170\302\171\277\172\307\173\304\174\310" +
    "\175\300\176\316\177\312\200\306\206\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\100\u0146\001\001" +
    "\000\002\001\001\000\006\113\u015e\206\u015d\001\001\000" +
    "\030\006\u014f\076\u014c\101\u014e\102\u0152\103\u014b\104\u0153" +
    "\105\u0149\106\u0150\107\210\112\u014a\206\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\u015a\206\015\001\001\000\004\207" +
    "\u0158\001\001\000\004\210\020\001\001\000\002\001\001" +
    "\000\004\206\u0154\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\u0146\001\001\000\004\206\u0156\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\u014f\076" +
    "\u014c\102\u0159\103\u014b\104\u0153\105\u0149\106\u0150\107\210" +
    "\112\u014a\206\015\001\001\000\002\001\001\000\004\210" +
    "\020\001\001\000\004\206\u015c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\113\u0160\206" +
    "\u015d\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\u0167\011\026\077\u0166\110\u0165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\u016c\011" +
    "\026\077\u016b\115\u016a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\u016c\011\026\115" +
    "\u016e\001\001\000\002\001\001\000\004\207\u0174\001\001" +
    "\000\004\210\020\001\001\000\002\001\001\000\042\025" +
    "\042\026\071\027\046\033\u0173\034\053\035\062\036\050" +
    "\037\060\040\052\041\073\042\066\047\054\062\074\064" +
    "\044\065\047\206\043\001\001\000\002\001\001\000\010" +
    "\006\u0170\071\u0175\206\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\207\u0179\210\u0178\001\001\000\004" +
    "\013\u017a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\u017d\001\001\000\024\072\u017e" +
    "\073\215\074\211\075\212\076\207\107\210\111\203\112" +
    "\205\114\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\u0182\206\u017f\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\017\u018b\020\u0184\021\u018d\022\u018c" +
    "\023\u0188\024\u0185\026\u018e\173\u018a\174\310\175\300\176" +
    "\316\206\u0186\001\001\000\006\203\u0198\205\u0199\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\u0195\173" +
    "\u018a\174\310\175\300\176\316\206\u0186\001\001\000\002" +
    "\001\001\000\032\017\u0193\020\u0184\021\u018d\022\u018c\023" +
    "\u0188\024\u0185\026\u018e\173\u018a\174\310\175\300\176\316" +
    "\206\u0186\001\001\000\002\001\001\000\004\207\u0192\001" +
    "\001\000\002\001\001\000\004\204\u0190\001\001\000\024" +
    "\022\u018f\023\u0188\024\u0185\026\u018e\173\u018a\174\310\175" +
    "\300\176\316\206\u0186\001\001\000\002\001\001\000\024" +
    "\022\u0191\023\u0188\024\u0185\026\u018e\173\u018a\174\310\175" +
    "\300\176\316\206\u0186\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\023\u0197\024\u0185\173\u018a\174\310\175\300" +
    "\176\316\206\u0186\001\001\000\002\001\001\000\026\021" +
    "\u019b\022\u018c\023\u0188\024\u0185\026\u018e\173\u018a\174\310" +
    "\175\300\176\316\206\u0186\001\001\000\030\020\u019a\021" +
    "\u018d\022\u018c\023\u0188\024\u0185\026\u018e\173\u018a\174\310" +
    "\175\300\176\316\206\u0186\001\001\000\004\203\u0198\001" +
    "\001\000\004\204\u0190\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static void main(String args[]){
		if(args[0] != null){
			try{
			CppParser p = new CppParser(new CppLexer(new FileReader(args[0])));
			p.debug_parse();
			}
			catch(Exception e){
				System.out.println(e);
			}
		}
	}
	
	public static String a_bitoActual = new String("$root");


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

	
	//static Vacc engine;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // comma ::= COMMA 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(134/*comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // semicolon ::= SEMICOLON 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(133/*semicolon*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // identifier ::= IDENTIFIER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(132/*identifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // relop ::= IN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(131/*relop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // relop ::= GE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(131/*relop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // relop ::= LE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(131/*relop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // relop ::= GT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(131/*relop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // relop ::= LT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(131/*relop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // relop ::= NOTEQUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(131/*relop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // relop ::= EQUAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(131/*relop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // mulop ::= AND 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(130/*mulop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // mulop ::= MOD 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(130/*mulop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // mulop ::= DIV 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(130/*mulop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // mulop ::= SLASH 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(130/*mulop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // mulop ::= STAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(130/*mulop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // addop ::= OR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(129/*addop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // addop ::= MINUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(129/*addop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // addop ::= PLUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(129/*addop*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // member_designator ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(128/*member_designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // member_designator ::= member_designator DOTDOT expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(128/*member_designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // member_designator_list ::= member_designator 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(127/*member_designator_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // member_designator_list ::= member_designator_list comma member_designator 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(127/*member_designator_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // set_constructor ::= LBRAC RBRAC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(126/*set_constructor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // set_constructor ::= LBRAC member_designator_list RBRAC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(126/*set_constructor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // function_designator ::= identifier params 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(125/*function_designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // unsigned_real ::= REALNUMBER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(124/*unsigned_real*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // unsigned_integer ::= DIGSEQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(123/*unsigned_integer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // unsigned_number ::= unsigned_real 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(122/*unsigned_number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // unsigned_number ::= unsigned_integer 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(122/*unsigned_number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // unsigned_constant ::= NIL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(121/*unsigned_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // unsigned_constant ::= CHARACTER_STRING 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(121/*unsigned_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // unsigned_constant ::= unsigned_number 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(121/*unsigned_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // primary ::= NOT primary 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(120/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // primary ::= LPAREN expression RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(120/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // primary ::= set_constructor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(120/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // primary ::= function_designator 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(120/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // primary ::= unsigned_constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(120/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // primary ::= variable_access 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(120/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // exponentiation ::= primary STARSTAR exponentiation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(119/*exponentiation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // exponentiation ::= primary 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(119/*exponentiation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // factor ::= exponentiation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(118/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // factor ::= sign factor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(118/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // term ::= term mulop factor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(117/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // term ::= factor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(117/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // simple_expression ::= simple_expression addop term 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(116/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // simple_expression ::= term 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(116/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expression ::= simple_expression relop simple_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(115/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expression ::= simple_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(115/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // boolean_expression ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(114/*boolean_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // record_variable_list ::= variable_access 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(113/*record_variable_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // record_variable_list ::= record_variable_list comma variable_access 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(113/*record_variable_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // final_value ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(112/*final_value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // direction ::= DOWNTO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(111/*direction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // direction ::= TO 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(111/*direction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // initial_value ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(110/*initial_value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // control_variable ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(109/*control_variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // otherwisepart ::= OTHERWISE COLON 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(108/*otherwisepart*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // otherwisepart ::= OTHERWISE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(108/*otherwisepart*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // case_list_element ::= case_constant_list COLON statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(107/*case_list_element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // case_list_element_list ::= case_list_element 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(106/*case_list_element_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // case_list_element_list ::= case_list_element_list semicolon case_list_element 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(106/*case_list_element_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // case_index ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(105/*case_index*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // case_statement ::= CASE case_index OF case_list_element_list semicolon otherwisepart statement SEMICOLON END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(104/*case_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // case_statement ::= CASE case_index OF case_list_element_list semicolon otherwisepart statement END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(104/*case_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // case_statement ::= CASE case_index OF case_list_element_list SEMICOLON END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(104/*case_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // case_statement ::= CASE case_index OF case_list_element_list END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(104/*case_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // goto_statement ::= GOTO label 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(103/*goto_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // actual_parameter ::= expression COLON expression COLON expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(102/*actual_parameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // actual_parameter ::= expression COLON expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(102/*actual_parameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // actual_parameter ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(102/*actual_parameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // actual_parameter_list ::= actual_parameter 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(101/*actual_parameter_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // actual_parameter_list ::= actual_parameter_list comma actual_parameter 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(101/*actual_parameter_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // params ::= LPAREN actual_parameter_list RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(100/*params*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // procedure_statement ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(99/*procedure_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // procedure_statement ::= identifier params 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(99/*procedure_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // field_designator ::= variable_access DOT identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(98/*field_designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // index_expression ::= expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(97/*index_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // index_expression_list ::= index_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(96/*index_expression_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // index_expression_list ::= index_expression_list comma index_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(96/*index_expression_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // indexed_variable ::= variable_access LBRAC index_expression_list RBRAC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(95/*indexed_variable*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // variable_access ::= variable_access UPARROW 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(94/*variable_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // variable_access ::= field_designator 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(94/*variable_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // variable_access ::= indexed_variable 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(94/*variable_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // variable_access ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(94/*variable_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // assignment_statement ::= variable_access ASSIGNMENT expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(93/*assignment_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // closed_if_statement ::= IF boolean_expression THEN closed_statement ELSE closed_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(92/*closed_if_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // open_if_statement ::= IF boolean_expression THEN closed_statement ELSE open_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(91/*open_if_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // open_if_statement ::= IF boolean_expression THEN statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(91/*open_if_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // closed_with_statement ::= WITH record_variable_list DO closed_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(90/*closed_with_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // open_with_statement ::= WITH record_variable_list DO open_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(89/*open_with_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // closed_for_statement ::= FOR control_variable ASSIGNMENT initial_value direction final_value DO closed_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(88/*closed_for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // open_for_statement ::= FOR control_variable ASSIGNMENT initial_value direction final_value DO open_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(87/*open_for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // closed_while_statement ::= WHILE boolean_expression DO closed_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(86/*closed_while_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // open_while_statement ::= WHILE boolean_expression DO open_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(85/*open_while_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // repeat_statement ::= REPEAT statement_sequence UNTIL boolean_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(84/*repeat_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // non_labeled_open_statement ::= open_for_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(83/*non_labeled_open_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // non_labeled_open_statement ::= open_while_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(83/*non_labeled_open_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // non_labeled_open_statement ::= open_if_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(83/*non_labeled_open_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // non_labeled_open_statement ::= open_with_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(83/*non_labeled_open_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // non_labeled_closed_statement ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // non_labeled_closed_statement ::= closed_for_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // non_labeled_closed_statement ::= closed_while_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // non_labeled_closed_statement ::= closed_if_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // non_labeled_closed_statement ::= closed_with_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // non_labeled_closed_statement ::= repeat_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // non_labeled_closed_statement ::= case_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_labeled_closed_statement ::= compound_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_labeled_closed_statement ::= goto_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_labeled_closed_statement ::= procedure_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // non_labeled_closed_statement ::= assignment_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(82/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // closed_statement ::= non_labeled_closed_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(81/*closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // closed_statement ::= label COLON non_labeled_closed_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(81/*closed_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // open_statement ::= non_labeled_open_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(80/*open_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // open_statement ::= label COLON non_labeled_open_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(80/*open_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // statement ::= closed_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(79/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // statement ::= open_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(79/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // statement_sequence ::= statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(78/*statement_sequence*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // statement_sequence ::= statement_sequence semicolon statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(78/*statement_sequence*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // compound_statement ::= PBEGIN statement_sequence END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(77/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // statement_part ::= compound_statement 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(76/*statement_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function_block ::= block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(75/*function_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // function_identification ::= FUNCTION identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(74/*function_identification*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // result_type ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(73/*result_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // function_heading ::= FUNCTION identifier formal_parameter_list COLON result_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*function_heading*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // function_heading ::= FUNCTION identifier COLON result_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*function_heading*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // function_declaration ::= function_heading semicolon function_block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // function_declaration ::= function_identification semicolon function_block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // function_declaration ::= function_heading semicolon directive 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(71/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // procedure_block ::= block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(70/*procedure_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // procedure_identification ::= PROCEDURE identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(69/*procedure_identification*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // functional_parameter_specification ::= function_heading 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(68/*functional_parameter_specification*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // procedural_parameter_specification ::= procedure_heading 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(67/*procedural_parameter_specification*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // variable_parameter_specification ::= VAR identifier_list COLON identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(66/*variable_parameter_specification*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // value_parameter_specification ::= identifier_list COLON identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(65/*value_parameter_specification*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // formal_parameter_section ::= functional_parameter_specification 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*formal_parameter_section*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // formal_parameter_section ::= procedural_parameter_specification 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*formal_parameter_section*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // formal_parameter_section ::= variable_parameter_specification 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*formal_parameter_section*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // formal_parameter_section ::= value_parameter_specification 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*formal_parameter_section*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // formal_parameter_section_list ::= formal_parameter_section 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*formal_parameter_section_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // formal_parameter_section_list ::= formal_parameter_section_list semicolon formal_parameter_section 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*formal_parameter_section_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // formal_parameter_list ::= LPAREN formal_parameter_section_list RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(62/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // directive ::= EXTERNAL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*directive*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // directive ::= FORWARD 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*directive*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // procedure_heading ::= procedure_identification formal_parameter_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(60/*procedure_heading*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // procedure_heading ::= procedure_identification 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(60/*procedure_heading*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // procedure_declaration ::= procedure_heading semicolon procedure_block 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(59/*procedure_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // procedure_declaration ::= procedure_heading semicolon directive 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(59/*procedure_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // proc_or_func_declaration ::= function_declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*proc_or_func_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // proc_or_func_declaration ::= procedure_declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(58/*proc_or_func_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // proc_or_func_declaration_list ::= proc_or_func_declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(57/*proc_or_func_declaration_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // proc_or_func_declaration_list ::= proc_or_func_declaration_list semicolon proc_or_func_declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(57/*proc_or_func_declaration_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // procedure_and_function_declaration_part ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(56/*procedure_and_function_declaration_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // procedure_and_function_declaration_part ::= proc_or_func_declaration_list semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(56/*procedure_and_function_declaration_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable_declaration ::= identifier_list COLON type_denoter 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable_declaration_list ::= variable_declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(54/*variable_declaration_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable_declaration_list ::= variable_declaration_list semicolon variable_declaration 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(54/*variable_declaration_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variable_declaration_part ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*variable_declaration_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable_declaration_part ::= VAR variable_declaration_list semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(53/*variable_declaration_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // domain_type ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*domain_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // new_pointer_type ::= UPARROW domain_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*new_pointer_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // file_type ::= PFILE OF component_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(50/*file_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // base_type ::= ordinal_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(49/*base_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // set_type ::= SET OF base_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*set_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tag_type ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*tag_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tag_field ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*tag_field*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // case_constant ::= constant DOTDOT constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*case_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // case_constant ::= constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*case_constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // case_constant_list ::= case_constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*case_constant_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // case_constant_list ::= case_constant_list comma case_constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*case_constant_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variant ::= case_constant_list COLON LPAREN variant_part RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variant ::= case_constant_list COLON LPAREN record_section_list semicolon variant_part RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variant ::= case_constant_list COLON LPAREN record_section_list RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variant_list ::= variant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*variant_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variant_list ::= variant_list semicolon variant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*variant_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variant_selector ::= tag_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*variant_selector*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variant_selector ::= tag_field COLON tag_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*variant_selector*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variant_part ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*variant_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variant_part ::= CASE variant_selector OF variant_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*variant_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variant_part ::= CASE variant_selector OF variant_list semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*variant_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // record_section ::= identifier_list COLON type_denoter 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*record_section*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // record_section_list ::= record_section 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*record_section_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // record_section_list ::= record_section_list semicolon record_section 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*record_section_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // record_type ::= RECORD variant_part END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*record_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // record_type ::= RECORD record_section_list semicolon variant_part END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*record_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // record_type ::= RECORD record_section_list END 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*record_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // component_type ::= type_denoter 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*component_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ordinal_type ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*ordinal_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ordinal_type ::= new_ordinal_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*ordinal_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // index_type ::= ordinal_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*index_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // index_list ::= index_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*index_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // index_list ::= index_list comma index_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*index_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // array_type ::= ARRAY LBRAC index_list RBRAC OF component_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // structured_type ::= file_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*structured_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // structured_type ::= set_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*structured_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // structured_type ::= record_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*structured_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // structured_type ::= array_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*structured_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // new_structured_type ::= PACKED structured_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*new_structured_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // new_structured_type ::= structured_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*new_structured_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // subrange_type ::= constant DOTDOT constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*subrange_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // enumerated_type ::= LPAREN identifier_list RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*enumerated_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // new_ordinal_type ::= subrange_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*new_ordinal_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // new_ordinal_type ::= enumerated_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*new_ordinal_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // new_type ::= new_pointer_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*new_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // new_type ::= new_structured_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*new_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // new_type ::= new_ordinal_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*new_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_denoter ::= new_type 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*type_denoter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_denoter ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*type_denoter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_definition ::= identifier EQUAL type_denoter semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*type_definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_definition_list ::= type_definition 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*type_definition_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_definition_list ::= type_definition_list type_definition 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*type_definition_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_definition_part ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*type_definition_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_definition_part ::= TYPE type_definition_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(22/*type_definition_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // non_string ::= REALNUMBER 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*non_string*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // non_string ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*non_string*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // non_string ::= DIGSEQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*non_string*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sign ::= MINUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*sign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sign ::= PLUS 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*sign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // constant ::= CHARACTER_STRING 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // constant ::= sign non_string 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // constant ::= non_string 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*constant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cprimary ::= NOT cprimary 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cprimary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cprimary ::= unsigned_constant 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cprimary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cprimary ::= LPAREN cexpression RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cprimary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cprimary ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*cprimary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cexponentiation ::= cprimary STARSTAR cexponentiation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*cexponentiation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cexponentiation ::= cprimary 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*cexponentiation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cfactor ::= cexponentiation 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cfactor ::= sign cfactor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*cfactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cterm ::= cterm mulop cfactor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*cterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cterm ::= cfactor 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*cterm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // csimple_expression ::= csimple_expression addop cterm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*csimple_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // csimple_expression ::= cterm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*csimple_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cexpression ::= csimple_expression relop csimple_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*cexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cexpression ::= csimple_expression 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*cexpression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant_definition ::= identifier EQUAL cexpression semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*constant_definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant_list ::= constant_definition 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*constant_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant_list ::= constant_list constant_definition 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*constant_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant_definition_part ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*constant_definition_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant_definition_part ::= CONST constant_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*constant_definition_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // label ::= DIGSEQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // label_list ::= label 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*label_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // label_list ::= label_list comma label 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*label_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declaration_part ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*label_declaration_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_declaration_part ::= LABEL label_list semicolon 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*label_declaration_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // module ::= constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*module*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identifier_list ::= identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*identifier_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier_list ::= identifier_list comma identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*identifier_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_heading ::= PROGRAM identifier LPAREN identifier_list RPAREN 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*program_heading*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_heading ::= PROGRAM identifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*program_heading*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= program_heading semicolon block DOT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file ::= module 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*file*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= program 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*file*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

