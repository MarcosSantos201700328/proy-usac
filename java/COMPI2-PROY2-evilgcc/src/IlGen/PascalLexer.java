/* The following code was generated by JFlex 1.4.1 on 5/29/07 9:39 PM */

package IlGen;

import java_cup.runtime.*;  // definition of scanner/parser interface
import errormanager.*; // error manager
/*
{C}{L}{A}{S}{S} { return new java_cup.runtime.Symbol(SymPascal.CLASS, new TokenValue(yytext(), yyline, yychar, sourceFilename));}
{P}{R}{I}{V}{A}{T}{E} { return new java_cup.runtime.Symbol(SymPascal.PRIVATE, new TokenValue(yytext(), yyline, yychar, sourceFilename));}
{P}{U}{B}{L}{I}{C} { return new java_cup.runtime.Symbol(SymPascal.PUBLIC, new TokenValue(yytext(), yyline, yychar, sourceFilename));}
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 5/29/07 9:39 PM from the specification file
 * <tt>pascal.l</tt>
 */
public class PascalLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 3;
  public static final int YYINITIAL = 0;
  public static final int CHARACTER = 3;
  public static final int COMMENT2 = 2;
  public static final int COMMENT1 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 46,  4,  0, 46,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    46,  0,  0,  0,  0,  0,  0, 30, 38, 41, 31, 39, 34,  2,  3, 43, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 32, 42, 37, 33, 35,  0, 
     0,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
    21, 15, 22, 23, 24, 25, 26, 27, 28, 29, 15, 36,  0, 40, 44, 15, 
     0,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
    21, 15, 22, 23, 24, 25, 26, 27, 28, 29, 15, 45,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\24\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\1\1\27\1\3\1\4\24\6\1\1\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\3"+
    "\1\5\1\1\1\0\1\30\7\6\1\31\7\6\1\32"+
    "\1\33\4\6\1\34\1\35\7\6\1\36\7\6\2\0"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\2\5"+
    "\1\30\7\6\1\31\7\6\1\32\1\33\4\6\1\34"+
    "\1\35\7\6\1\36\7\6\2\5\1\46\1\40\1\41"+
    "\1\42\1\43\1\45\1\0\1\47\1\2\1\50\5\6"+
    "\1\51\2\6\1\52\2\6\1\53\4\6\1\54\1\55"+
    "\1\56\6\6\1\57\5\6\1\60\3\6\1\61\1\62"+
    "\1\50\5\6\1\51\2\6\1\52\2\6\1\53\4\6"+
    "\1\54\1\55\1\56\6\6\1\57\5\6\1\60\3\6"+
    "\1\61\1\62\2\6\1\63\1\64\2\6\1\65\1\6"+
    "\1\66\2\6\1\67\6\6\1\70\1\71\3\6\1\72"+
    "\1\73\1\6\1\74\1\6\1\75\3\6\1\63\1\64"+
    "\2\6\1\65\1\6\1\66\2\6\1\67\6\6\1\70"+
    "\1\71\3\6\1\72\1\73\1\6\1\74\1\6\1\75"+
    "\1\6\1\76\1\77\1\100\5\6\1\101\10\6\1\102"+
    "\1\103\1\104\1\76\1\77\1\100\5\6\1\101\10\6"+
    "\1\102\1\103\1\104\1\105\1\106\4\6\1\107\2\6"+
    "\1\110\1\111\1\112\1\113\1\6\1\105\1\106\4\6"+
    "\1\107\2\6\1\110\1\111\1\112\1\113\2\6\1\114"+
    "\1\6\1\115\2\6\1\116\1\117\1\6\1\114\1\6"+
    "\1\115\2\6\1\116\1\117\1\106\1\120\2\6\1\106"+
    "\1\120\2\6\1\121\1\122\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\274\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\274\0\274\0\u05b1\0\274\0\u05e0\0\u060f\0\274\0\274"+
    "\0\274\0\274\0\u063e\0\274\0\274\0\274\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u0b33\0\u066d\0\u066d\0\u0b62\0\u066d\0\u0b91\0\u0bc0\0\u066d"+
    "\0\u066d\0\u066d\0\u066d\0\u0bef\0\u066d\0\u066d\0\u066d\0\u0c1e"+
    "\0\u0c4d\0\u0c7c\0\u0c7c\0\u0cab\0\274\0\u0cda\0\u0d09\0\u0d38"+
    "\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u02c1\0\u0f9b\0\u0fca\0\u0ff9"+
    "\0\u1028\0\u1057\0\u02c1\0\u02c1\0\u1086\0\u10b5\0\u10e4\0\u1113"+
    "\0\u1142\0\u1171\0\u11a0\0\u02c1\0\u11cf\0\u11fe\0\u122d\0\u125c"+
    "\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\274\0\274\0\274"+
    "\0\274\0\274\0\274\0\274\0\u066d\0\u1376\0\u066d\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u0872\0\u1666"+
    "\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u0872\0\u0872\0\u1751\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u0872\0\u189a\0\u18c9"+
    "\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\274"+
    "\0\u066d\0\u066d\0\u066d\0\u066d\0\u066d\0\u1a41\0\u0c7c\0\u0cab"+
    "\0\u02c1\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u02c1\0\u1b5b"+
    "\0\u1b8a\0\u02c1\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4"+
    "\0\u1cd3\0\u02c1\0\u02c1\0\u02c1\0\u1d02\0\u1d31\0\u1d60\0\u1d8f"+
    "\0\u1dbe\0\u1ded\0\u02c1\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8"+
    "\0\u02c1\0\u1f07\0\u1f36\0\u1f65\0\u1347\0\u1376\0\u0872\0\u1f94"+
    "\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u0872\0\u207f\0\u20ae\0\u0872"+
    "\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u0872"+
    "\0\u0872\0\u0872\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311"+
    "\0\u0872\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc\0\u0872\0\u242b"+
    "\0\u245a\0\u2489\0\u1a12\0\u1a41\0\u24b8\0\u24e7\0\u02c1\0\u02c1"+
    "\0\u2516\0\u2545\0\u02c1\0\u2574\0\u02c1\0\u25a3\0\u25d2\0\u02c1"+
    "\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u02c1"+
    "\0\u274a\0\u2779\0\u27a8\0\u02c1\0\u02c1\0\u27d7\0\u02c1\0\u2806"+
    "\0\u02c1\0\u2835\0\u2864\0\u2893\0\u0872\0\u0872\0\u28c2\0\u28f1"+
    "\0\u0872\0\u2920\0\u0872\0\u294f\0\u297e\0\u0872\0\u29ad\0\u29dc"+
    "\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7\0\u0872\0\u2af6\0\u2b25"+
    "\0\u2b54\0\u0872\0\u0872\0\u2b83\0\u0872\0\u2bb2\0\u0872\0\u2be1"+
    "\0\u02c1\0\u02c1\0\u02c1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc"+
    "\0\u02c1\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15"+
    "\0\u2e44\0\u02c1\0\u02c1\0\u2e73\0\u0872\0\u0872\0\u0872\0\u2ea2"+
    "\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e\0\u0872\0\u2f8d\0\u2fbc\0\u2feb"+
    "\0\u301a\0\u3049\0\u3078\0\u30a7\0\u30d6\0\u0872\0\u0872\0\u3105"+
    "\0\u02c1\0\u3134\0\u3163\0\u3192\0\u31c1\0\u31f0\0\u02c1\0\u321f"+
    "\0\u324e\0\u02c1\0\u02c1\0\u02c1\0\u02c1\0\u327d\0\u0872\0\u32ac"+
    "\0\u32db\0\u330a\0\u3339\0\u3368\0\u0872\0\u3397\0\u33c6\0\u0872"+
    "\0\u0872\0\u0872\0\u0872\0\u33f5\0\u3424\0\u02c1\0\u3453\0\u02c1"+
    "\0\u3482\0\u34b1\0\u02c1\0\u02c1\0\u34e0\0\u0872\0\u350f\0\u0872"+
    "\0\u353e\0\u356d\0\u0872\0\u0872\0\u02c1\0\u02c1\0\u359c\0\u35cb"+
    "\0\u0872\0\u0872\0\u35fa\0\u3629\0\u02c1\0\u02c1\0\u0872\0\u0872";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\21"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\21\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\11\1\57\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\2\72\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\2\72\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
    "\1\126\1\127\1\5\1\130\1\131\1\10\1\132\1\133"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\2\21\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\21\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\5"+
    "\1\130\1\131\1\10\1\11\1\5\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\21\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\2\21\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\60\0\1\6\1\0\1\134"+
    "\54\0\1\6\41\0\1\54\16\0\1\135\54\0\1\21"+
    "\4\0\15\21\1\136\2\21\1\137\7\21\22\0\1\21"+
    "\4\0\4\21\1\140\23\21\22\0\1\21\4\0\1\141"+
    "\6\21\1\142\6\21\1\143\11\21\22\0\1\21\4\0"+
    "\10\21\1\144\5\21\1\145\11\21\22\0\1\21\4\0"+
    "\13\21\1\146\1\21\1\147\10\21\1\150\1\21\22\0"+
    "\1\21\4\0\10\21\1\151\5\21\1\152\4\21\1\153"+
    "\4\21\22\0\1\21\4\0\16\21\1\154\11\21\22\0"+
    "\1\21\4\0\30\21\22\0\1\21\4\0\5\21\1\155"+
    "\7\21\1\156\12\21\22\0\1\21\4\0\1\157\27\21"+
    "\22\0\1\21\4\0\16\21\1\160\11\21\22\0\1\21"+
    "\4\0\10\21\1\161\5\21\1\162\11\21\22\0\1\21"+
    "\4\0\5\21\1\163\12\21\1\164\1\21\1\165\5\21"+
    "\22\0\1\21\4\0\1\166\17\21\1\167\7\21\22\0"+
    "\1\21\4\0\4\21\1\170\23\21\22\0\1\21\4\0"+
    "\4\21\1\171\15\21\1\172\5\21\22\0\1\21\4\0"+
    "\7\21\1\173\6\21\1\174\10\21\1\175\22\0\1\21"+
    "\4\0\15\21\1\176\3\21\1\177\6\21\22\0\1\21"+
    "\4\0\1\200\27\21\22\0\1\21\4\0\7\21\1\201"+
    "\1\202\7\21\1\203\7\21\21\0\36\204\1\205\20\204"+
    "\37\0\1\206\60\0\1\207\56\0\1\210\56\0\1\211"+
    "\1\0\1\212\52\0\1\213\72\0\1\214\3\0\4\215"+
    "\1\0\32\215\1\0\20\215\1\60\1\215\1\216\1\0"+
    "\32\215\1\0\23\215\1\0\32\215\1\0\3\215\1\125"+
    "\16\215\1\217\1\0\32\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\15\72\1\220\2\72\1\221\7\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\4\72\1\222"+
    "\23\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\1\223\6\72\1\224\6\72\1\225\11\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\10\72\1\226\5\72"+
    "\1\227\11\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\13\72\1\230\1\72\1\231\10\72\1\232\1\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\10\72"+
    "\1\233\5\72\1\234\4\72\1\235\4\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\16\72\1\236\11\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\30\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\5\72"+
    "\1\237\7\72\1\240\12\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\1\241\27\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\16\72\1\242\11\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\10\72\1\243"+
    "\5\72\1\244\11\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\5\72\1\245\12\72\1\246\1\72\1\247"+
    "\5\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\1\250\17\72\1\251\7\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\4\72\1\252\23\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\4\72\1\253\15\72"+
    "\1\254\5\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\7\72\1\255\6\72\1\256\10\72\1\257\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\15\72\1\260"+
    "\3\72\1\261\6\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\1\262\27\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\7\72\1\263\1\264\7\72\1\265"+
    "\7\72\1\215\1\0\17\215\4\266\1\204\31\266\1\267"+
    "\1\204\17\266\37\0\1\206\11\0\1\270\5\0\4\215"+
    "\1\0\32\215\1\0\1\215\1\271\21\215\1\0\32\215"+
    "\1\0\1\215\1\272\21\215\1\0\32\215\1\0\1\215"+
    "\1\273\1\215\1\274\17\215\1\0\32\215\1\213\23\215"+
    "\1\0\32\215\1\0\13\215\1\275\3\215\1\0\1\130"+
    "\1\0\1\276\116\0\1\54\17\0\2\277\52\0\1\300"+
    "\56\0\1\21\4\0\3\21\1\301\24\21\22\0\1\21"+
    "\4\0\20\21\1\302\7\21\22\0\1\21\4\0\6\21"+
    "\1\303\21\21\22\0\1\21\4\0\21\21\1\304\6\21"+
    "\22\0\1\21\4\0\1\305\27\21\22\0\1\21\4\0"+
    "\15\21\1\306\12\21\22\0\1\21\4\0\24\21\1\307"+
    "\3\21\22\0\1\21\4\0\25\21\1\310\2\21\22\0"+
    "\1\21\4\0\21\21\1\311\6\21\22\0\1\21\4\0"+
    "\3\21\1\312\24\21\22\0\1\21\4\0\22\21\1\313"+
    "\5\21\22\0\1\21\4\0\13\21\1\314\14\21\22\0"+
    "\1\21\4\0\20\21\1\315\7\21\22\0\1\21\4\0"+
    "\15\21\1\316\12\21\22\0\1\21\4\0\22\21\1\317"+
    "\5\21\22\0\1\21\4\0\22\21\1\320\5\21\22\0"+
    "\1\21\4\0\1\21\1\321\26\21\22\0\1\21\4\0"+
    "\3\21\1\322\24\21\22\0\1\21\4\0\13\21\1\323"+
    "\14\21\22\0\1\21\4\0\22\21\1\324\5\21\22\0"+
    "\1\21\4\0\7\21\1\325\20\21\22\0\1\21\4\0"+
    "\2\21\1\326\25\21\22\0\1\21\4\0\16\21\1\327"+
    "\11\21\22\0\1\21\4\0\1\330\1\21\1\331\14\21"+
    "\1\332\10\21\22\0\1\21\4\0\22\21\1\333\5\21"+
    "\22\0\1\21\4\0\20\21\1\334\7\21\22\0\1\21"+
    "\4\0\4\21\1\335\23\21\22\0\1\21\4\0\17\21"+
    "\1\336\10\21\22\0\1\21\4\0\22\21\1\337\5\21"+
    "\22\0\1\21\4\0\4\21\1\340\23\21\22\0\1\21"+
    "\4\0\20\21\1\341\7\21\22\0\1\21\4\0\10\21"+
    "\1\342\17\21\22\0\1\21\4\0\22\21\1\343\5\21"+
    "\22\0\1\21\4\0\10\21\1\344\17\21\21\0\36\204"+
    "\1\345\20\204\36\0\1\204\20\0\1\215\1\346\2\215"+
    "\1\0\32\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\3\72\1\347\24\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\20\72\1\350\7\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\6\72\1\351\21\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\21\72\1\352"+
    "\6\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\1\353\27\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\15\72\1\354\12\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\24\72\1\355\3\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\25\72\1\356\2\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\21\72"+
    "\1\357\6\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\3\72\1\360\24\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\22\72\1\361\5\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\13\72\1\362\14\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\20\72"+
    "\1\363\7\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\15\72\1\364\12\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\22\72\1\365\5\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\22\72\1\366\5\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\1\72"+
    "\1\367\26\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\3\72\1\370\24\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\13\72\1\371\14\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\22\72\1\372\5\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\7\72"+
    "\1\373\20\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\2\72\1\374\25\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\16\72\1\375\11\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\1\376\1\72\1\377"+
    "\14\72\1\u0100\10\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\22\72\1\u0101\5\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\20\72\1\u0102\7\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\4\72\1\u0103"+
    "\23\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\17\72\1\u0104\10\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\22\72\1\u0105\5\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\4\72\1\u0106\23\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\20\72\1\u0107"+
    "\7\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\10\72\1\u0108\17\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\22\72\1\u0109\5\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\10\72\1\u010a\17\72\1\215"+
    "\1\0\17\215\4\266\1\204\31\266\1\u010b\1\204\17\266"+
    "\4\215\1\0\31\215\1\266\1\0\17\215\1\0\1\u010c"+
    "\56\0\1\21\4\0\1\u010d\27\21\22\0\1\21\4\0"+
    "\10\21\1\u010e\17\21\22\0\1\21\4\0\4\21\1\u010f"+
    "\23\21\22\0\1\21\4\0\20\21\1\u0110\7\21\22\0"+
    "\1\21\4\0\21\21\1\u0111\6\21\22\0\1\21\4\0"+
    "\15\21\1\u0112\12\21\22\0\1\21\4\0\4\21\1\u0113"+
    "\23\21\22\0\1\21\4\0\4\21\1\u0114\23\21\22\0"+
    "\1\21\4\0\4\21\1\u0115\23\21\22\0\1\21\4\0"+
    "\25\21\1\u0116\2\21\22\0\1\21\4\0\2\21\1\u0117"+
    "\25\21\22\0\1\21\4\0\16\21\1\u0118\11\21\22\0"+
    "\1\21\4\0\4\21\1\u0119\23\21\22\0\1\21\4\0"+
    "\4\21\1\u011a\23\21\22\0\1\21\4\0\4\21\1\u011b"+
    "\23\21\22\0\1\21\4\0\12\21\1\u011c\15\21\22\0"+
    "\1\21\4\0\2\21\1\u011d\3\21\1\u011e\21\21\22\0"+
    "\1\21\4\0\3\21\1\u011f\7\21\1\u0120\14\21\22\0"+
    "\1\21\4\0\16\21\1\u0121\11\21\22\0\1\21\4\0"+
    "\4\21\1\u0122\23\21\22\0\1\21\4\0\10\21\1\u0123"+
    "\17\21\22\0\1\21\4\0\15\21\1\u0124\12\21\22\0"+
    "\1\21\4\0\4\21\1\u0125\23\21\22\0\1\21\4\0"+
    "\10\21\1\u0126\17\21\22\0\1\21\4\0\21\21\1\u0127"+
    "\6\21\22\0\1\21\4\0\13\21\1\u0128\14\21\22\0"+
    "\1\21\4\0\7\21\1\u0129\20\21\22\0\1\21\4\0"+
    "\22\21\1\u012a\5\21\21\0\1\215\1\72\2\215\1\0"+
    "\1\215\1\u012b\27\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\10\72\1\u012c\17\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\4\72\1\u012d\23\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\20\72\1\u012e"+
    "\7\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\21\72\1\u012f\6\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\15\72\1\u0130\12\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\4\72\1\u0131\23\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\4\72\1\u0132"+
    "\23\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\4\72\1\u0133\23\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\25\72\1\u0134\2\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\2\72\1\u0135\25\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\16\72\1\u0136"+
    "\11\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\4\72\1\u0137\23\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\4\72\1\u0138\23\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\4\72\1\u0139\23\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\12\72\1\u013a"+
    "\15\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\2\72\1\u013b\3\72\1\u013c\21\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\3\72\1\u013d\7\72\1\u013e"+
    "\14\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\16\72\1\u013f\11\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\4\72\1\u0140\23\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\10\72\1\u0141\17\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\15\72\1\u0142"+
    "\12\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\4\72\1\u0143\23\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\10\72\1\u0144\17\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\21\72\1\u0145\6\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\13\72\1\u0146"+
    "\14\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\7\72\1\u0147\20\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\22\72\1\u0148\5\72\1\215\1\0\17\215"+
    "\1\0\1\21\4\0\27\21\1\u0149\22\0\1\21\4\0"+
    "\15\21\1\u014a\12\21\22\0\1\21\4\0\22\21\1\u014b"+
    "\5\21\22\0\1\21\4\0\22\21\1\u014c\5\21\22\0"+
    "\1\21\4\0\20\21\1\u014d\7\21\22\0\1\21\4\0"+
    "\1\u014e\27\21\22\0\1\21\4\0\22\21\1\u014f\5\21"+
    "\22\0\1\21\4\0\6\21\1\u0150\21\21\22\0\1\21"+
    "\4\0\13\21\1\u0151\14\21\22\0\1\21\4\0\20\21"+
    "\1\u0152\7\21\22\0\1\21\4\0\4\21\1\u0153\23\21"+
    "\22\0\1\21\4\0\4\21\1\u0154\23\21\22\0\1\21"+
    "\4\0\20\21\1\u0155\7\21\22\0\1\21\4\0\13\21"+
    "\1\u0156\14\21\22\0\1\21\4\0\20\21\1\u0157\7\21"+
    "\22\0\1\21\4\0\1\u0158\27\21\22\0\1\21\4\0"+
    "\15\21\1\u0159\12\21\22\0\1\21\4\0\13\21\1\u015a"+
    "\14\21\22\0\1\21\4\0\4\21\1\u015b\23\21\22\0"+
    "\1\21\4\0\4\21\1\u015c\23\21\21\0\1\215\1\72"+
    "\2\215\1\0\1\215\27\72\1\u015d\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\15\72\1\u015e\12\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\22\72\1\u015f"+
    "\5\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\22\72\1\u0160\5\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\20\72\1\u0161\7\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\1\u0162\27\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\22\72\1\u0163\5\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\6\72"+
    "\1\u0164\21\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\13\72\1\u0165\14\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\20\72\1\u0166\7\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\4\72\1\u0167\23\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\4\72"+
    "\1\u0168\23\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\20\72\1\u0169\7\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\13\72\1\u016a\14\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\20\72\1\u016b\7\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\1\u016c"+
    "\27\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\15\72\1\u016d\12\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\13\72\1\u016e\14\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\4\72\1\u016f\23\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\4\72\1\u0170"+
    "\23\72\1\215\1\0\17\215\1\0\1\21\4\0\16\21"+
    "\1\u0171\11\21\22\0\1\21\4\0\15\21\1\u0172\12\21"+
    "\22\0\1\21\4\0\20\21\1\u0173\7\21\22\0\1\21"+
    "\4\0\10\21\1\u0174\17\21\22\0\1\21\4\0\4\21"+
    "\1\u0175\23\21\22\0\1\21\4\0\25\21\1\u0176\2\21"+
    "\22\0\1\21\4\0\3\21\1\u0177\24\21\22\0\1\21"+
    "\4\0\3\21\1\u0178\24\21\22\0\1\21\4\0\1\u0179"+
    "\27\21\22\0\1\21\4\0\15\21\1\u017a\12\21\22\0"+
    "\1\21\4\0\3\21\1\u017b\24\21\22\0\1\21\4\0"+
    "\22\21\1\u017c\5\21\22\0\1\21\4\0\6\21\1\u017d"+
    "\21\21\22\0\1\21\4\0\13\21\1\u017e\14\21\21\0"+
    "\1\215\1\72\2\215\1\0\1\215\16\72\1\u017f\11\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\15\72"+
    "\1\u0180\12\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\20\72\1\u0181\7\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\10\72\1\u0182\17\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\4\72\1\u0183\23\72"+
    "\1\215\1\0\20\215\1\72\2\215\1\0\1\215\25\72"+
    "\1\u0184\2\72\1\215\1\0\20\215\1\72\2\215\1\0"+
    "\1\215\3\72\1\u0185\24\72\1\215\1\0\20\215\1\72"+
    "\2\215\1\0\1\215\3\72\1\u0186\24\72\1\215\1\0"+
    "\20\215\1\72\2\215\1\0\1\215\1\u0187\27\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\15\72\1\u0188"+
    "\12\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\3\72\1\u0189\24\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\22\72\1\u018a\5\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\6\72\1\u018b\21\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\13\72\1\u018c"+
    "\14\72\1\215\1\0\17\215\1\0\1\21\4\0\1\u018d"+
    "\27\21\22\0\1\21\4\0\3\21\1\u018e\24\21\22\0"+
    "\1\21\4\0\16\21\1\u018f\11\21\22\0\1\21\4\0"+
    "\20\21\1\u0190\7\21\22\0\1\21\4\0\10\21\1\u0191"+
    "\17\21\22\0\1\21\4\0\23\21\1\u0192\4\21\22\0"+
    "\1\21\4\0\14\21\1\u0193\13\21\22\0\1\21\4\0"+
    "\15\21\1\u0194\12\21\21\0\1\215\1\72\2\215\1\0"+
    "\1\215\1\u0195\27\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\3\72\1\u0196\24\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\16\72\1\u0197\11\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\20\72\1\u0198"+
    "\7\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\10\72\1\u0199\17\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\23\72\1\u019a\4\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\14\72\1\u019b\13\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\15\72\1\u019c"+
    "\12\72\1\215\1\0\17\215\1\0\1\21\4\0\13\21"+
    "\1\u019d\14\21\22\0\1\21\4\0\15\21\1\u019e\12\21"+
    "\22\0\1\21\4\0\21\21\1\u019f\6\21\22\0\1\21"+
    "\4\0\20\21\1\u01a0\7\21\21\0\1\215\1\72\2\215"+
    "\1\0\1\215\13\72\1\u01a1\14\72\1\215\1\0\20\215"+
    "\1\72\2\215\1\0\1\215\15\72\1\u01a2\12\72\1\215"+
    "\1\0\20\215\1\72\2\215\1\0\1\215\21\72\1\u01a3"+
    "\6\72\1\215\1\0\20\215\1\72\2\215\1\0\1\215"+
    "\20\72\1\u01a4\7\72\1\215\1\0\17\215\1\0\1\21"+
    "\4\0\4\21\1\u01a5\23\21\22\0\1\21\4\0\4\21"+
    "\1\u01a6\23\21\21\0\1\215\1\72\2\215\1\0\1\215"+
    "\4\72\1\u01a7\23\72\1\215\1\0\20\215\1\72\2\215"+
    "\1\0\1\215\4\72\1\u01a8\23\72\1\215\1\0\17\215";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\27\1\2\11\1\1\1\11"+
    "\2\1\4\11\1\1\3\11\55\1\1\0\1\11\46\1"+
    "\2\0\7\11\53\1\1\11\5\1\1\0\352\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[424];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public String sourceFilename;
  
  public void init(){};
  public int getLine(){
	return yyline;
	}
public int getChar(){
	return yychar;
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PascalLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PascalLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return new java_cup.runtime.Symbol(SymPascal.SLASH, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 83: break;
        case 13: 
          { return new java_cup.runtime.Symbol(SymPascal.LT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 84: break;
        case 43: 
          { return new java_cup.runtime.Symbol(SymPascal.FOR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 85: break;
        case 50: 
          { return new java_cup.runtime.Symbol(SymPascal.REALNUMBER, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 86: break;
        case 10: 
          { return new java_cup.runtime.Symbol(SymPascal.COMMA, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 87: break;
        case 14: 
          { return new java_cup.runtime.Symbol(SymPascal.LPAREN, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 88: break;
        case 3: 
          { return new java_cup.runtime.Symbol(SymPascal.MINUS, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 89: break;
        case 40: 
          { return new java_cup.runtime.Symbol(SymPascal.AND);
          }
        case 90: break;
        case 20: 
          { return new java_cup.runtime.Symbol(SymPascal.UPARROW, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 91: break;
        case 6: 
          { return new java_cup.runtime.Symbol(SymPascal.IDENTIFIER, new TokenValue(new String(yytext()), yyline, yychar, sourceFilename));
          }
        case 92: break;
        case 55: 
          { return new java_cup.runtime.Symbol(SymPascal.GOTO, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 93: break;
        case 69: 
          { return new java_cup.runtime.Symbol(SymPascal.DOWNTO, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 94: break;
        case 77: 
          { return new java_cup.runtime.Symbol(SymPascal.INTEGER, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 95: break;
        case 51: 
          { return new java_cup.runtime.Symbol(SymPascal.CASE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 96: break;
        case 30: 
          { return new java_cup.runtime.Symbol(SymPascal.TO, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 97: break;
        case 31: 
          { return new java_cup.runtime.Symbol(SymPascal.STARSTAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 98: break;
        case 66: 
          { return new java_cup.runtime.Symbol(SymPascal.UNTIL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 99: break;
        case 41: 
          { return new java_cup.runtime.Symbol(SymPascal.DIV, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 100: break;
        case 58: 
          { return new java_cup.runtime.Symbol(SymPascal.THEN, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 101: break;
        case 82: 
          { return new java_cup.runtime.Symbol(SymPascal.PROCEDURE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 102: break;
        case 11: 
          { return new java_cup.runtime.Symbol(SymPascal.GT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 103: break;
        case 59: 
          { return new java_cup.runtime.Symbol(SymPascal.TYPE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 104: break;
        case 75: 
          { return new java_cup.runtime.Symbol(SymPascal.STRING, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 105: break;
        case 81: 
          { return new java_cup.runtime.Symbol(SymPascal.OTHERWISE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 106: break;
        case 70: 
          { return new java_cup.runtime.Symbol(SymPascal.EXTERNAL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 107: break;
        case 18: 
          { return new java_cup.runtime.Symbol(SymPascal.SEMICOLON, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 108: break;
        case 52: 
          { return new java_cup.runtime.Symbol(SymPascal.CHAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 109: break;
        case 32: 
          { return new java_cup.runtime.Symbol(SymPascal.ASSIGNMENT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 110: break;
        case 8: 
          { return new java_cup.runtime.Symbol(SymPascal.COLON, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 111: break;
        case 16: 
          { return new java_cup.runtime.Symbol(SymPascal.RBRAC, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 112: break;
        case 73: 
          { return new java_cup.runtime.Symbol(SymPascal.RECORD, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 113: break;
        case 7: 
          { return new java_cup.runtime.Symbol(SymPascal.STAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 114: break;
        case 48: 
          { return new java_cup.runtime.Symbol(SymPascal.VAR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 115: break;
        case 26: 
          { return new java_cup.runtime.Symbol(SymPascal.IF, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 116: break;
        case 25: 
          { return new java_cup.runtime.Symbol(SymPascal.DO, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 117: break;
        case 79: 
          { return new java_cup.runtime.Symbol(SymPascal.WRITELN, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 118: break;
        case 44: 
          { return new java_cup.runtime.Symbol(SymPascal.MOD, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 119: break;
        case 63: 
          { return new java_cup.runtime.Symbol(SymPascal.PBEGIN, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 120: break;
        case 80: 
          { return new java_cup.runtime.Symbol(SymPascal.FUNCTION, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 121: break;
        case 47: 
          { return new java_cup.runtime.Symbol(SymPascal.SET, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 122: break;
        case 27: 
          { return new java_cup.runtime.Symbol(SymPascal.IN, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 123: break;
        case 37: 
          { // Comentario
		yybegin(COMMENT2);
          }
        case 124: break;
        case 45: 
          { return new java_cup.runtime.Symbol(SymPascal.NIL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 125: break;
        case 76: 
          { return new java_cup.runtime.Symbol(SymPascal.FORWARD, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 126: break;
        case 74: 
          { return new java_cup.runtime.Symbol(SymPascal.REPEAT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 127: break;
        case 28: 
          { return new java_cup.runtime.Symbol(SymPascal.OF, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 128: break;
        case 54: 
          { return new java_cup.runtime.Symbol(SymPascal.PFILE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 129: break;
        case 23: 
          { return new java_cup.runtime.Symbol(SymPascal.DIGSEQ, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 130: break;
        case 21: 
          { yybegin(COMMENT2);
          }
        case 131: break;
        case 5: 
          { yychar = 0;
          }
        case 132: break;
        case 49: 
          { return new java_cup.runtime.Symbol(SymPascal.CHARACTER_STRING, new TokenValue(new String(yytext()), yyline, yychar, sourceFilename));
          }
        case 133: break;
        case 71: 
          { return new java_cup.runtime.Symbol(SymPascal.PACKED, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 134: break;
        case 36: 
          { yybegin(COMMENT1);
          }
        case 135: break;
        case 9: 
          { return new java_cup.runtime.Symbol(SymPascal.EQUAL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 136: break;
        case 29: 
          { return new java_cup.runtime.Symbol(SymPascal.OR, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 137: break;
        case 56: 
          { return new java_cup.runtime.Symbol(SymPascal.READ, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 138: break;
        case 35: 
          { return new java_cup.runtime.Symbol(SymPascal.NOTEQUAL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 139: break;
        case 68: 
          { return new java_cup.runtime.Symbol(SymPascal.WRITE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 140: break;
        case 38: 
          { yybegin(YYINITIAL);
          }
        case 141: break;
        case 46: 
          { return new java_cup.runtime.Symbol(SymPascal.NOT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 142: break;
        case 15: 
          { return new java_cup.runtime.Symbol(SymPascal.PLUS, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 143: break;
        case 61: 
          { return new java_cup.runtime.Symbol(SymPascal.WITH, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 144: break;
        case 34: 
          { return new java_cup.runtime.Symbol(SymPascal.LE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 145: break;
        case 17: 
          { return new java_cup.runtime.Symbol(SymPascal.RPAREN, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 146: break;
        case 60: 
          { return new java_cup.runtime.Symbol(SymPascal.USES, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 147: break;
        case 2: 
          { return new java_cup.runtime.Symbol(SymPascal.REALNUMBER, new TokenValue(new String(yytext()), yyline, yychar, sourceFilename));
          }
        case 148: break;
        case 57: 
          { return new java_cup.runtime.Symbol(SymPascal.REAL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 149: break;
        case 42: 
          { return new java_cup.runtime.Symbol(SymPascal.END, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 150: break;
        case 62: 
          { return new java_cup.runtime.Symbol(SymPascal.ARRAY, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 151: break;
        case 22: 
          { yychar++;
          }
        case 152: break;
        case 78: 
          { return new java_cup.runtime.Symbol(SymPascal.PROGRAM, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 153: break;
        case 53: 
          { return new java_cup.runtime.Symbol(SymPascal.ELSE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 154: break;
        case 39: 
          { yybegin(YYINITIAL);   
		yychar = 0;
          }
        case 155: break;
        case 65: 
          { return new java_cup.runtime.Symbol(SymPascal.LABEL, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 156: break;
        case 4: 
          { return new java_cup.runtime.Symbol(SymPascal.DOT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 157: break;
        case 64: 
          { return new java_cup.runtime.Symbol(SymPascal.CONST, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 158: break;
        case 67: 
          { return new java_cup.runtime.Symbol(SymPascal.WHILE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 159: break;
        case 12: 
          { return new java_cup.runtime.Symbol(SymPascal.LBRAC, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 160: break;
        case 24: 
          { return new java_cup.runtime.Symbol(SymPascal.DOTDOT, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 161: break;
        case 33: 
          { return new java_cup.runtime.Symbol(SymPascal.GE, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 162: break;
        case 1: 
          { ErrorManager.agregarErrorLexico(yyline,yychar, "Error lexico: Simbolo " + yytext() + " Invalido");
		System.out.println("Error lexico: Simbolo " + yytext() + " Invalido en " + yyline + ", " +yychar +".");
          }
        case 163: break;
        case 72: 
          { return new java_cup.runtime.Symbol(SymPascal.READLN, new TokenValue(yytext(), yyline, yychar, sourceFilename));
          }
        case 164: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new java_cup.runtime.Symbol(SymPascal.EOF, null);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
