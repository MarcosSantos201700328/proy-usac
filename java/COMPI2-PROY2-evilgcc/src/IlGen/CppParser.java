
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 29 22:02:27 CST 2007
//----------------------------------------------------

package IlGen;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import errormanager.*;

/** CUP v0.10k generated parser.
  * @version Tue May 29 22:02:27 CST 2007
  */
public class CppParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CppParser() {super();}

  /** Constructor which sets the default scanner. */
  public CppParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\346\000\002\002\004\000\002\003\006\000\002\164" +
    "\002\000\002\005\004\000\002\005\003\000\002\157\002" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\003\000\002\010\007\000\002\010\006\000\002" +
    "\017\005\000\002\017\003\000\002\026\003\000\002\026" +
    "\004\000\002\026\004\000\002\030\002\000\002\030\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\011\004\000\002\011\005\000\002\011\006\000\002\011" +
    "\007\000\002\011\005\000\002\022\004\000\002\022\003" +
    "\000\002\032\005\000\002\020\005\000\002\020\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\033" +
    "\004\000\002\042\004\000\002\043\005\000\002\034\004" +
    "\000\002\034\003\000\002\035\005\000\002\037\004\000" +
    "\002\037\003\000\002\040\004\000\002\040\004\000\002" +
    "\040\004\000\002\036\002\000\002\036\003\000\002\036" +
    "\003\000\002\041\002\000\002\041\006\000\002\041\005" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\106\004\000\002\156\003\000\002\023" +
    "\006\000\002\023\005\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\006\000\002\160\002\000\002\052\002\000\002" +
    "\052\003\000\002\053\003\000\002\053\005\000\002\054" +
    "\003\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\054\003\000\002\054\003\000\002\056\004\000" +
    "\002\057\005\000\002\060\004\000\002\060\004\000\002" +
    "\061\004\000\002\061\003\000\002\062\005\000\002\062" +
    "\006\000\002\063\002\000\002\063\005\000\002\064\003" +
    "\000\002\066\003\000\002\066\005\000\002\066\005\000" +
    "\002\066\005\000\002\067\003\000\002\067\005\000\002" +
    "\067\005\000\002\071\003\000\002\071\005\000\002\071" +
    "\005\000\002\071\005\000\002\071\005\000\002\072\003" +
    "\000\002\072\005\000\002\072\005\000\002\077\003\000" +
    "\002\077\006\000\002\076\003\000\002\076\006\000\002" +
    "\161\002\000\002\162\002\000\002\103\003\000\002\104" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\004\000\002\016\002\000\002\016\004\000" +
    "\002\006\004\000\002\006\003\000\002\107\003\000\002" +
    "\107\003\000\002\111\004\000\002\112\006\000\002\112" +
    "\005\000\002\110\004\000\002\113\004\000\002\114\006" +
    "\000\002\115\002\000\002\115\003\000\002\116\005\000" +
    "\002\116\003\000\002\117\004\000\002\117\005\000\002" +
    "\117\005\000\002\120\004\000\002\120\005\000\002\121" +
    "\003\000\002\013\002\000\002\013\003\000\002\124\002" +
    "\000\002\124\003\000\002\012\004\000\002\012\003\000" +
    "\002\123\004\000\002\123\003\000\002\122\004\000\002" +
    "\122\004\000\002\122\003\000\002\122\003\000\002\122" +
    "\004\000\002\122\004\000\002\055\004\000\002\126\005" +
    "\000\002\126\006\000\002\126\006\000\002\126\004\000" +
    "\002\126\006\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\131\003\000\002\131\003\000\002\131" +
    "\003\000\002\131\003\000\002\125\005\000\002\125\004" +
    "\000\002\132\011\000\002\132\011\000\002\165\002\000" +
    "\002\166\002\000\002\167\002\000\002\170\002\000\002" +
    "\171\002\000\002\133\017\000\002\134\017\000\002\135" +
    "\005\000\002\173\006\000\002\136\006\000\002\136\005" +
    "\000\002\136\005\000\002\136\004\000\002\137\003\000" +
    "\002\137\004\000\002\140\010\000\002\140\007\000\002" +
    "\141\003\000\002\141\004\000\002\142\005\000\002\142" +
    "\004\000\002\127\004\000\002\127\004\000\002\143\011" +
    "\000\002\143\012\000\002\144\011\000\002\145\013\000" +
    "\002\174\002\000\002\146\031\000\002\147\015\000\002" +
    "\150\002\000\002\150\003\000\002\151\003\000\002\152" +
    "\002\000\002\152\003\000\002\153\003\000\002\172\002" +
    "\000\002\155\002\000\002\155\003\000\002\105\006\000" +
    "\002\105\006\000\002\105\007\000\002\105\010\000\002" +
    "\105\010\000\002\105\010\000\002\105\010\000\002\024" +
    "\005\000\002\024\003\000\002\025\006\000\002\025\004" +
    "\000\002\163\002\000\002\021\005\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\022\033\uffff\034\uffff\035\uffff\036\uffff\041" +
    "\uffff\044\uffff\047\uffff\137\uffff\001\002\000\022\033\011" +
    "\034\024\035\010\036\023\041\014\044\022\047\017\137" +
    "\016\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\140\u0188\001\002\000\054\047\uffee\063" +
    "\uffee\064\uffee\065\uffee\066\uffee\104\uffee\105\uffee\106\uffee" +
    "\107\uffee\110\uffee\111\uffee\112\uffee\115\uffee\123\uffee\124" +
    "\uffee\125\uffee\126\uffee\127\uffee\130\uffee\131\uffee\137\uffee" +
    "\001\002\000\054\047\uffed\063\uffed\064\uffed\065\uffed\066" +
    "\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed" +
    "\112\uffed\115\uffed\123\uffed\124\uffed\125\uffed\126\uffed\127" +
    "\uffed\130\uffed\131\uffed\137\uffed\001\002\000\024\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\041\ufffd\044\ufffd\047\ufffd\062" +
    "\ufffd\137\ufffd\001\002\000\004\137\u0186\001\002\000\054" +
    "\047\uffea\063\uffea\064\uffea\065\uffea\066\uffea\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\115\uffea" +
    "\123\uffea\124\uffea\125\uffea\126\uffea\127\uffea\130\uffea\131" +
    "\uffea\137\uffea\001\002\000\006\047\u017b\106\u010e\001\002" +
    "\000\024\033\ufff8\034\ufff8\035\ufff8\036\ufff8\041\ufff8\044" +
    "\ufff8\047\ufff8\062\ufff8\137\ufff8\001\002\000\054\047\uffe9" +
    "\063\uffe9\064\uffe9\065\uffe9\066\uffe9\104\uffe9\105\uffe9\106" +
    "\uffe9\107\uffe9\110\uffe9\111\uffe9\112\uffe9\115\uffe9\123\uffe9" +
    "\124\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9\131\uffe9\137" +
    "\uffe9\001\002\000\004\137\u017a\001\002\000\004\137\u0179" +
    "\001\002\000\004\047\u0178\001\002\000\054\047\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\104\uffeb\105\uffeb\106\uffeb" +
    "\107\uffeb\110\uffeb\111\uffeb\112\uffeb\115\uffeb\123\uffeb\124" +
    "\uffeb\125\uffeb\126\uffeb\127\uffeb\130\uffeb\131\uffeb\137\uffeb" +
    "\001\002\000\054\047\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111\uffec" +
    "\112\uffec\115\uffec\123\uffec\124\uffec\125\uffec\126\uffec\127" +
    "\uffec\130\uffec\131\uffec\137\uffec\001\002\000\024\033\011" +
    "\034\024\035\010\036\023\041\014\044\022\047\017\062" +
    "\027\137\016\001\002\000\024\033\ufffe\034\ufffe\035\ufffe" +
    "\036\ufffe\041\ufffe\044\ufffe\047\ufffe\062\ufffe\137\ufffe\001" +
    "\002\000\016\033\011\034\024\035\010\036\023\041\014" +
    "\047\036\001\002\000\020\002\uff82\033\uff82\034\uff82\035" +
    "\uff82\036\uff82\041\uff82\047\uff82\001\002\000\004\047\u0175" +
    "\001\002\000\004\123\043\001\002\000\020\002\uff80\033" +
    "\uff80\034\uff80\035\uff80\036\uff80\041\uff80\047\uff80\001\002" +
    "\000\020\002\uff81\033\uff81\034\uff81\035\uff81\036\uff81\041" +
    "\uff81\047\uff81\001\002\000\004\123\043\001\002\000\006" +
    "\047\uffe9\120\041\001\002\000\020\002\000\033\011\034" +
    "\024\035\010\036\023\041\014\047\036\001\002\000\020" +
    "\002\uff83\033\uff83\034\uff83\035\uff83\036\uff83\041\uff83\047" +
    "\uff83\001\002\000\004\047\042\001\002\000\004\123\uff7d" +
    "\001\002\000\020\033\011\034\024\035\010\036\023\041" +
    "\014\047\017\124\uff79\001\002\000\020\002\uff7f\033\uff7f" +
    "\034\uff7f\035\uff7f\036\uff7f\041\uff7f\047\uff7f\001\002\000" +
    "\006\104\uff76\124\uff76\001\002\000\004\124\064\001\002" +
    "\000\006\047\054\106\053\001\002\000\006\104\051\124" +
    "\uff78\001\002\000\016\033\011\034\024\035\010\036\023" +
    "\041\014\047\017\001\002\000\006\104\uff77\124\uff77\001" +
    "\002\000\004\047\063\001\002\000\010\104\uff75\124\uff75" +
    "\125\057\001\002\000\012\104\uffe2\124\uffe2\125\uffe2\137" +
    "\uffe2\001\002\000\010\104\uff73\124\uff73\125\057\001\002" +
    "\000\004\051\060\001\002\000\004\126\061\001\002\000" +
    "\012\104\uffe1\124\uffe1\125\uffe1\137\uffe1\001\002\000\012" +
    "\104\uffe3\124\uffe3\125\uffe3\137\uffe3\001\002\000\006\104" +
    "\uff74\124\uff74\001\002\000\004\140\066\001\002\000\020" +
    "\002\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\041\uff7a\047" +
    "\uff7a\001\002\000\040\010\102\012\100\013\073\015\121" +
    "\020\076\033\011\034\024\035\010\036\023\041\014\042" +
    "\074\043\103\047\077\106\072\141\110\001\002\000\004" +
    "\141\u0173\001\002\000\042\010\uff68\012\uff68\013\uff68\015" +
    "\uff68\017\uff68\020\uff68\033\uff68\034\uff68\035\uff68\036\uff68" +
    "\041\uff68\042\uff68\043\uff68\047\uff68\106\uff68\141\uff68\001" +
    "\002\000\042\010\uff5b\012\uff5b\013\uff5b\015\uff5b\017\uff5b" +
    "\020\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\041\uff5b\042" +
    "\uff5b\043\uff5b\047\uff5b\106\uff5b\141\uff5b\001\002\000\004" +
    "\047\u016e\001\002\000\004\123\uff2c\001\002\000\004\123" +
    "\u015e\001\002\000\042\010\uff4f\012\uff4f\013\uff4f\015\uff4f" +
    "\017\uff4f\020\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f\041" +
    "\uff4f\042\uff4f\043\uff4f\047\uff4f\106\uff4f\141\uff4f\001\002" +
    "\000\044\004\140\005\152\042\074\043\103\047\144\050" +
    "\153\051\171\052\162\053\156\054\163\055\146\056\176" +
    "\067\175\070\173\112\164\114\142\123\145\001\002\000" +
    "\034\047\uffe9\057\135\071\132\072\134\073\136\074\131" +
    "\075\137\103\300\106\uffe9\121\302\123\301\125\uffbf\136" +
    "\133\001\002\000\004\123\u0159\001\002\000\042\010\uff65" +
    "\012\uff65\013\uff65\015\uff65\017\uff65\020\uff65\033\uff65\034" +
    "\uff65\035\uff65\036\uff65\041\uff65\042\uff65\043\uff65\047\uff65" +
    "\106\uff65\141\uff65\001\002\000\004\123\u0123\001\002\000" +
    "\004\123\u011b\001\002\000\004\137\u011a\001\002\000\042" +
    "\010\uff4f\012\uff4f\013\uff4f\015\uff4f\017\uff4f\020\uff4f\033" +
    "\uff4f\034\uff4f\035\uff4f\036\uff4f\041\uff4f\042\uff4f\043\uff4f" +
    "\047\uff4f\106\uff4f\141\uff4f\001\002\000\006\047\u010f\106" +
    "\u010e\001\002\000\042\010\uff59\012\uff59\013\uff59\015\uff59" +
    "\017\uff59\020\uff59\033\uff59\034\uff59\035\uff59\036\uff59\041" +
    "\uff59\042\uff59\043\uff59\047\uff59\106\uff59\141\uff59\001\002" +
    "\000\020\002\uff72\033\uff72\034\uff72\035\uff72\036\uff72\041" +
    "\uff72\047\uff72\001\002\000\004\137\u010c\001\002\000\004" +
    "\140\362\001\002\000\004\125\265\001\002\000\004\137" +
    "\355\001\002\000\042\010\uff5a\012\uff5a\013\uff5a\015\uff5a" +
    "\017\uff5a\020\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a\041" +
    "\uff5a\042\uff5a\043\uff5a\047\uff5a\106\uff5a\141\uff5a\001\002" +
    "\000\042\010\uff64\012\uff64\013\uff64\015\uff64\017\uff64\020" +
    "\uff64\033\uff64\034\uff64\035\uff64\036\uff64\041\uff64\042\uff64" +
    "\043\uff64\047\uff64\106\uff64\141\uff64\001\002\000\040\010" +
    "\102\012\100\013\073\015\121\020\076\033\011\034\024" +
    "\035\010\036\023\041\014\042\074\043\103\047\077\106" +
    "\072\141\uff70\001\002\000\004\137\354\001\002\000\004" +
    "\123\uff2c\001\002\000\004\123\123\001\002\000\010\047" +
    "\127\106\072\137\uff32\001\002\000\004\137\uff30\001\002" +
    "\000\004\137\322\001\002\000\004\137\uff31\001\002\000" +
    "\022\057\135\071\132\072\134\073\136\074\131\075\137" +
    "\125\uffbf\136\133\001\002\000\044\004\140\005\152\042" +
    "\074\043\103\047\144\050\153\051\171\052\162\053\156" +
    "\054\163\055\146\056\176\067\175\070\173\112\164\114" +
    "\142\123\145\001\002\000\044\004\uffdd\005\uffdd\042\uffdd" +
    "\043\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\067\uffdd\070\uffdd\112\uffdd\114\uffdd" +
    "\123\uffdd\001\002\000\044\004\uffda\005\uffda\042\uffda\043" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\055\uffda\056\uffda\067\uffda\070\uffda\112\uffda\114\uffda\123" +
    "\uffda\001\002\000\044\004\uffde\005\uffde\042\uffde\043\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\067\uffde\070\uffde\112\uffde\114\uffde\123\uffde" +
    "\001\002\000\044\004\uffdc\005\uffdc\042\uffdc\043\uffdc\047" +
    "\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\067\uffdc\070\uffdc\112\uffdc\114\uffdc\123\uffdc\001" +
    "\002\000\006\124\uff5d\137\uff5d\001\002\000\044\004\uffdb" +
    "\005\uffdb\042\uffdb\043\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\067\uffdb\070\uffdb" +
    "\112\uffdb\114\uffdb\123\uffdb\001\002\000\044\004\uffd9\005" +
    "\uffd9\042\uffd9\043\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\055\uffd9\056\uffd9\067\uffd9\070\uffd9\112" +
    "\uffd9\114\uffd9\123\uffd9\001\002\000\044\004\140\005\152" +
    "\042\074\043\103\047\144\050\153\051\171\052\162\053" +
    "\156\054\163\055\146\056\176\067\175\070\173\112\164" +
    "\114\142\123\145\001\002\000\044\063\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\104\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1" +
    "\112\uffb1\115\uffb1\124\uffb1\126\uffb1\127\uffb1\130\uffb1\131" +
    "\uffb1\137\uffb1\001\002\000\032\005\152\042\074\043\103" +
    "\047\144\050\153\051\171\052\162\053\156\054\163\055" +
    "\146\056\176\123\145\001\002\000\044\063\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\104\uffa0\106\uffa0\107\uffa0\110\uffa0\111" +
    "\uffa0\112\uffa0\115\uffa0\124\uffa0\126\uffa0\127\uffa0\130\uffa0" +
    "\131\uffa0\137\uffa0\001\002\000\054\063\uffba\064\uffba\065" +
    "\uffba\066\uffba\103\300\104\uffba\106\uffba\107\uffba\110\uffba" +
    "\111\uffba\112\uffba\115\uffba\121\302\123\301\124\uffba\125" +
    "\uffbf\126\uffba\127\uffba\130\uffba\131\uffba\137\uffba\001\002" +
    "\000\044\004\uffb6\005\uffb6\042\uffb6\043\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\067\uffb6\070\uffb6\112\uffb6\114\uffb6\123\uffb6\001\002\000" +
    "\046\063\uffc3\064\uffc3\065\uffc3\066\uffc3\104\uffc3\106\uffc3" +
    "\107\uffc3\110\uffc3\111\uffc3\112\uffc3\115\uffc3\124\uffc3\126" +
    "\uffc3\127\uffc3\130\uffc3\131\uffc3\135\uffc3\137\uffc3\001\002" +
    "\000\044\063\uffa1\064\uffa1\065\uffa1\066\uffa1\104\uffa1\106" +
    "\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\115\uffa1\124\uffa1" +
    "\126\uffa1\127\uffa1\130\uffa1\131\uffa1\137\uffa1\001\002\000" +
    "\044\063\uffac\064\uffac\065\uffac\066\uffac\104\uffac\106\uffac" +
    "\107\uffac\110\uffac\111\uffac\112\uffac\115\uffac\124\uffac\126" +
    "\uffac\127\uffac\130\uffac\131\uffac\137\uffac\001\002\000\044" +
    "\063\uffad\064\uffad\065\uffad\066\uffad\104\uffad\106\uffad\107" +
    "\uffad\110\uffad\111\uffad\112\uffad\115\uffad\124\uffad\126\uffad" +
    "\127\uffad\130\uffad\131\uffad\137\uffad\001\002\000\044\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\104\uffbb\106\uffbb\107\uffbb" +
    "\110\uffbb\111\uffbb\112\uffbb\115\uffbb\124\uffbb\126\uffbb\127" +
    "\uffbb\130\uffbb\131\uffbb\137\uffbb\001\002\000\046\063\uffc4" +
    "\064\uffc4\065\uffc4\066\uffc4\104\uffc4\106\uffc4\107\uffc4\110" +
    "\uffc4\111\uffc4\112\uffc4\115\uffc4\124\uffc4\126\uffc4\127\uffc4" +
    "\130\uffc4\131\uffc4\135\uffc4\137\uffc4\001\002\000\006\124" +
    "\uff60\137\uff60\001\002\000\036\063\uff99\064\uff99\065\uff99" +
    "\066\uff99\104\uff99\107\uff99\110\uff99\111\254\112\255\124" +
    "\uff99\126\uff99\130\uff99\131\uff99\137\uff99\001\002\000\046" +
    "\063\uffc5\064\uffc5\065\uffc5\066\uffc5\104\uffc5\106\uffc5\107" +
    "\uffc5\110\uffc5\111\uffc5\112\uffc5\115\uffc5\124\uffc5\126\uffc5" +
    "\127\uffc5\130\uffc5\131\uffc5\135\uffc5\137\uffc5\001\002\000" +
    "\032\063\251\064\252\065\uff94\066\uff94\104\uff94\107\uff94" +
    "\110\uff94\124\uff94\126\uff94\130\247\131\250\137\uff94\001" +
    "\002\000\022\065\244\066\245\104\uff91\107\uff91\110\uff91" +
    "\124\uff91\126\uff91\137\uff91\001\002\000\016\104\uff8f\107" +
    "\241\110\uff8f\124\uff8f\126\uff8f\137\uff8f\001\002\000\046" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\104\uffc6\106\uffc6\107" +
    "\uffc6\110\uffc6\111\uffc6\112\uffc6\115\uffc6\124\uffc6\126\uffc6" +
    "\127\uffc6\130\uffc6\131\uffc6\135\uffc6\137\uffc6\001\002\000" +
    "\046\063\uffc2\064\uffc2\065\uffc2\066\uffc2\104\uffc2\106\uffc2" +
    "\107\uffc2\110\uffc2\111\uffc2\112\uffc2\115\uffc2\124\uffc2\126" +
    "\uffc2\127\uffc2\130\uffc2\131\uffc2\135\uffc2\137\uffc2\001\002" +
    "\000\044\004\140\005\152\042\074\043\103\047\144\050" +
    "\153\051\171\052\162\053\156\054\163\055\146\056\176" +
    "\067\175\070\173\112\164\114\142\123\145\001\002\000" +
    "\004\125\265\001\002\000\044\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\104\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112" +
    "\uffb8\115\uffb8\124\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8" +
    "\137\uffb8\001\002\000\014\104\uff8b\110\236\124\uff8b\126" +
    "\uff8b\137\uff8b\001\002\000\044\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\104\uffbc\106\uffbc\107\uffbc\110\uffbc\111\uffbc\112" +
    "\uffbc\115\uffbc\124\uffbc\126\uffbc\127\uffbc\130\uffbc\131\uffbc" +
    "\137\uffbc\001\002\000\046\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\104\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7" +
    "\115\uffc7\124\uffc7\126\uffc7\127\uffc7\130\uffc7\131\uffc7\135" +
    "\uffc7\137\uffc7\001\002\000\044\063\uff9c\064\uff9c\065\uff9c" +
    "\066\uff9c\104\uff9c\106\232\107\uff9c\110\uff9c\111\uff9c\112" +
    "\uff9c\115\231\124\uff9c\126\uff9c\127\230\130\uff9c\131\uff9c" +
    "\137\uff9c\001\002\000\016\033\011\034\024\035\010\036" +
    "\023\041\014\047\017\001\002\000\044\063\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\104\uffb9\106\uffb9\107\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\115\uffb9\124\uffb9\126\uffb9\127\uffb9\130\uffb9" +
    "\131\uffb9\137\uffb9\001\002\000\044\004\140\005\152\042" +
    "\074\043\103\047\144\050\153\051\171\052\162\053\156" +
    "\054\163\055\146\056\176\067\175\070\173\112\164\114" +
    "\142\123\145\001\002\000\046\063\uffc1\064\uffc1\065\uffc1" +
    "\066\uffc1\104\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112" +
    "\uffc1\115\uffc1\124\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1" +
    "\135\uffc1\137\uffc1\001\002\000\044\063\uffab\064\uffab\065" +
    "\uffab\066\uffab\104\uffab\106\uffab\107\uffab\110\uffab\111\uffab" +
    "\112\uffab\115\uffab\124\uffab\126\uffab\127\uffab\130\uffab\131" +
    "\uffab\137\uffab\001\002\000\046\063\uffa3\064\uffa3\065\uffa3" +
    "\066\uffa3\104\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112" +
    "\uffa3\115\uffa3\123\221\124\uffa3\126\uffa3\127\uffa3\130\uffa3" +
    "\131\uffa3\137\uffa3\001\002\000\052\063\uff85\064\uff85\065" +
    "\uff85\066\uff85\104\uff85\105\202\106\204\107\uff85\110\uff85" +
    "\111\uff85\112\uff85\115\uff85\123\uff85\124\uff85\125\206\126" +
    "\uff85\127\uff85\130\uff85\131\uff85\137\uff85\001\002\000\052" +
    "\063\uff89\064\uff89\065\uff89\066\uff89\104\uff89\105\uff89\106" +
    "\uff89\107\uff89\110\uff89\111\uff89\112\uff89\115\uff89\123\uff89" +
    "\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89\131\uff89\137" +
    "\uff89\001\002\000\046\063\uffa8\064\uffa8\065\uffa8\066\uffa8" +
    "\104\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\112\uffa8\115" +
    "\uffa8\123\uffa8\124\uffa8\126\uffa8\127\uffa8\130\uffa8\131\uffa8" +
    "\137\uffa8\001\002\000\052\063\uff88\064\uff88\065\uff88\066" +
    "\uff88\104\uff88\105\uff88\106\uff88\107\uff88\110\uff88\111\uff88" +
    "\112\uff88\115\uff88\123\uff88\124\uff88\125\uff88\126\uff88\127" +
    "\uff88\130\uff88\131\uff88\137\uff88\001\002\000\046\063\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\104\uffa9\106\uffa9\107\uffa9\110" +
    "\uffa9\111\uffa9\112\uffa9\115\uffa9\123\uffa9\124\uffa9\126\uffa9" +
    "\127\uffa9\130\uffa9\131\uffa9\137\uffa9\001\002\000\044\004" +
    "\140\005\152\042\074\043\103\047\144\050\153\051\171" +
    "\052\162\053\156\054\163\055\146\056\176\067\175\070" +
    "\173\112\164\114\142\123\145\001\002\000\050\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\104\uffa6\106\uffa6\107\uffa6\110" +
    "\uffa6\111\uffa6\112\uffa6\115\uffa6\123\uffa6\124\uffa6\125\213" +
    "\126\uffa6\127\uffa6\130\uffa6\131\uffa6\137\uffa6\001\002\000" +
    "\052\063\uff85\064\uff85\065\uff85\066\uff85\104\uff85\105\202" +
    "\106\204\107\uff85\110\uff85\111\uff85\112\uff85\115\uff85\123" +
    "\uff85\124\uff85\125\206\126\uff85\127\uff85\130\uff85\131\uff85" +
    "\137\uff85\001\002\000\046\063\uffa7\064\uffa7\065\uffa7\066" +
    "\uffa7\104\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7" +
    "\115\uffa7\123\uffa7\124\uffa7\126\uffa7\127\uffa7\130\uffa7\131" +
    "\uffa7\137\uffa7\001\002\000\046\063\uff84\064\uff84\065\uff84" +
    "\066\uff84\104\uff84\106\uff84\107\uff84\110\uff84\111\uff84\112" +
    "\uff84\115\uff84\123\uff84\124\uff84\126\uff84\127\uff84\130\uff84" +
    "\131\uff84\137\uff84\001\002\000\002\001\002\000\004\126" +
    "\216\001\002\000\004\126\uff8a\001\002\000\050\063\uffa4" +
    "\064\uffa4\065\uffa4\066\uffa4\104\uffa4\106\uffa4\107\uffa4\110" +
    "\uffa4\111\uffa4\112\uffa4\115\uffa4\123\uffa4\124\uffa4\125\uffa4" +
    "\126\uffa4\127\uffa4\130\uffa4\131\uffa4\137\uffa4\001\002\000" +
    "\004\126\220\001\002\000\050\063\uffa5\064\uffa5\065\uffa5" +
    "\066\uffa5\104\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5\112" +
    "\uffa5\115\uffa5\123\uffa5\124\uffa5\125\uffa5\126\uffa5\127\uffa5" +
    "\130\uffa5\131\uffa5\137\uffa5\001\002\000\044\004\140\005" +
    "\152\042\074\043\103\047\144\050\153\051\171\052\162" +
    "\053\156\054\163\055\146\056\176\067\175\070\173\112" +
    "\164\114\142\123\145\001\002\000\044\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\104\uffaa\106\uffaa\107\uffaa\110\uffaa\111" +
    "\uffaa\112\uffaa\115\uffaa\124\uffaa\126\uffaa\127\uffaa\130\uffaa" +
    "\131\uffaa\137\uffaa\001\002\000\006\104\uff1c\124\uff1c\001" +
    "\002\000\006\104\225\124\226\001\002\000\044\004\140" +
    "\005\152\042\074\043\103\047\144\050\153\051\171\052" +
    "\162\053\156\054\163\055\146\056\176\067\175\070\173" +
    "\112\164\114\142\123\145\001\002\000\044\063\uffa2\064" +
    "\uffa2\065\uffa2\066\uffa2\104\uffa2\106\uffa2\107\uffa2\110\uffa2" +
    "\111\uffa2\112\uffa2\115\uffa2\124\uffa2\126\uffa2\127\uffa2\130" +
    "\uffa2\131\uffa2\137\uffa2\001\002\000\006\104\uff1d\124\uff1d" +
    "\001\002\000\044\004\140\005\152\042\074\043\103\047" +
    "\144\050\153\051\171\052\162\053\156\054\163\055\146" +
    "\056\176\067\175\070\173\112\164\114\142\123\145\001" +
    "\002\000\044\004\140\005\152\042\074\043\103\047\144" +
    "\050\153\051\171\052\162\053\156\054\163\055\146\056" +
    "\176\067\175\070\173\112\164\114\142\123\145\001\002" +
    "\000\044\004\140\005\152\042\074\043\103\047\144\050" +
    "\153\051\171\052\162\053\156\054\163\055\146\056\176" +
    "\067\175\070\173\112\164\114\142\123\145\001\002\000" +
    "\044\063\uff9f\064\uff9f\065\uff9f\066\uff9f\104\uff9f\106\uff9f" +
    "\107\uff9f\110\uff9f\111\uff9f\112\uff9f\115\uff9f\124\uff9f\126" +
    "\uff9f\127\uff9f\130\uff9f\131\uff9f\137\uff9f\001\002\000\044" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\104\uff9e\106\uff9e\107" +
    "\uff9e\110\uff9e\111\uff9e\112\uff9e\115\uff9e\124\uff9e\126\uff9e" +
    "\127\uff9e\130\uff9e\131\uff9e\137\uff9e\001\002\000\044\063" +
    "\uff9d\064\uff9d\065\uff9d\066\uff9d\104\uff9d\106\uff9d\107\uff9d" +
    "\110\uff9d\111\uff9d\112\uff9d\115\uff9d\124\uff9d\126\uff9d\127" +
    "\uff9d\130\uff9d\131\uff9d\137\uff9d\001\002\000\044\004\uff8c" +
    "\005\uff8c\042\uff8c\043\uff8c\047\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\067\uff8c\070\uff8c" +
    "\112\uff8c\114\uff8c\123\uff8c\001\002\000\044\004\140\005" +
    "\152\042\074\043\103\047\144\050\153\051\171\052\162" +
    "\053\156\054\163\055\146\056\176\067\175\070\173\112" +
    "\164\114\142\123\145\001\002\000\016\104\uff8e\107\241" +
    "\110\uff8e\124\uff8e\126\uff8e\137\uff8e\001\002\000\044\004" +
    "\uff8d\005\uff8d\042\uff8d\043\uff8d\047\uff8d\050\uff8d\051\uff8d" +
    "\052\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\067\uff8d\070" +
    "\uff8d\112\uff8d\114\uff8d\123\uff8d\001\002\000\044\004\140" +
    "\005\152\042\074\043\103\047\144\050\153\051\171\052" +
    "\162\053\156\054\163\055\146\056\176\067\175\070\173" +
    "\112\164\114\142\123\145\001\002\000\022\065\244\066" +
    "\245\104\uff90\107\uff90\110\uff90\124\uff90\126\uff90\137\uff90" +
    "\001\002\000\044\004\140\005\152\042\074\043\103\047" +
    "\144\050\153\051\171\052\162\053\156\054\163\055\146" +
    "\056\176\067\175\070\173\112\164\114\142\123\145\001" +
    "\002\000\044\004\140\005\152\042\074\043\103\047\144" +
    "\050\153\051\171\052\162\053\156\054\163\055\146\056" +
    "\176\067\175\070\173\112\164\114\142\123\145\001\002" +
    "\000\032\063\251\064\252\065\uff92\066\uff92\104\uff92\107" +
    "\uff92\110\uff92\124\uff92\126\uff92\130\247\131\250\137\uff92" +
    "\001\002\000\044\004\140\005\152\042\074\043\103\047" +
    "\144\050\153\051\171\052\162\053\156\054\163\055\146" +
    "\056\176\067\175\070\173\112\164\114\142\123\145\001" +
    "\002\000\044\004\140\005\152\042\074\043\103\047\144" +
    "\050\153\051\171\052\162\053\156\054\163\055\146\056" +
    "\176\067\175\070\173\112\164\114\142\123\145\001\002" +
    "\000\044\004\140\005\152\042\074\043\103\047\144\050" +
    "\153\051\171\052\162\053\156\054\163\055\146\056\176" +
    "\067\175\070\173\112\164\114\142\123\145\001\002\000" +
    "\044\004\140\005\152\042\074\043\103\047\144\050\153" +
    "\051\171\052\162\053\156\054\163\055\146\056\176\067" +
    "\175\070\173\112\164\114\142\123\145\001\002\000\036" +
    "\063\uff95\064\uff95\065\uff95\066\uff95\104\uff95\107\uff95\110" +
    "\uff95\111\254\112\255\124\uff95\126\uff95\130\uff95\131\uff95" +
    "\137\uff95\001\002\000\044\004\140\005\152\042\074\043" +
    "\103\047\144\050\153\051\171\052\162\053\156\054\163" +
    "\055\146\056\176\067\175\070\173\112\164\114\142\123" +
    "\145\001\002\000\044\004\140\005\152\042\074\043\103" +
    "\047\144\050\153\051\171\052\162\053\156\054\163\055" +
    "\146\056\176\067\175\070\173\112\164\114\142\123\145" +
    "\001\002\000\044\063\uff9a\064\uff9a\065\uff9a\066\uff9a\104" +
    "\uff9a\106\232\107\uff9a\110\uff9a\111\uff9a\112\uff9a\115\231" +
    "\124\uff9a\126\uff9a\127\230\130\uff9a\131\uff9a\137\uff9a\001" +
    "\002\000\044\063\uff9b\064\uff9b\065\uff9b\066\uff9b\104\uff9b" +
    "\106\232\107\uff9b\110\uff9b\111\uff9b\112\uff9b\115\231\124" +
    "\uff9b\126\uff9b\127\230\130\uff9b\131\uff9b\137\uff9b\001\002" +
    "\000\036\063\uff96\064\uff96\065\uff96\066\uff96\104\uff96\107" +
    "\uff96\110\uff96\111\254\112\255\124\uff96\126\uff96\130\uff96" +
    "\131\uff96\137\uff96\001\002\000\036\063\uff97\064\uff97\065" +
    "\uff97\066\uff97\104\uff97\107\uff97\110\uff97\111\254\112\255" +
    "\124\uff97\126\uff97\130\uff97\131\uff97\137\uff97\001\002\000" +
    "\036\063\uff98\064\uff98\065\uff98\066\uff98\104\uff98\107\uff98" +
    "\110\uff98\111\254\112\255\124\uff98\126\uff98\130\uff98\131" +
    "\uff98\137\uff98\001\002\000\032\063\251\064\252\065\uff93" +
    "\066\uff93\104\uff93\107\uff93\110\uff93\124\uff93\126\uff93\130" +
    "\247\131\250\137\uff93\001\002\000\046\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\104\uffc0\106\uffc0\107\uffc0\110\uffc0\111" +
    "\uffc0\112\uffc0\115\uffc0\124\uffc0\125\270\126\uffc0\127\uffc0" +
    "\130\uffc0\131\uffc0\137\uffc0\001\002\000\044\004\140\005" +
    "\152\042\074\043\103\047\144\050\153\051\171\052\162" +
    "\053\156\054\163\055\146\056\176\067\175\070\173\112" +
    "\164\114\142\123\145\001\002\000\004\126\267\001\002" +
    "\000\062\063\uffbd\064\uffbd\065\uffbd\066\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\104\uffbd\106\uffbd\107\uffbd" +
    "\110\uffbd\111\uffbd\112\uffbd\115\uffbd\124\uffbd\125\uffbd\126" +
    "\uffbd\127\uffbd\130\uffbd\131\uffbd\136\uffbd\137\uffbd\001\002" +
    "\000\044\004\140\005\152\042\074\043\103\047\144\050" +
    "\153\051\171\052\162\053\156\054\163\055\146\056\176" +
    "\067\175\070\173\112\164\114\142\123\145\001\002\000" +
    "\004\126\272\001\002\000\062\063\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\104" +
    "\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\115\uffbe" +
    "\124\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131\uffbe\136" +
    "\uffbe\137\uffbe\001\002\000\044\063\uffb0\064\uffb0\065\uffb0" +
    "\066\uffb0\104\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\112" +
    "\uffb0\115\uffb0\124\uffb0\126\uffb0\127\uffb0\130\uffb0\131\uffb0" +
    "\137\uffb0\001\002\000\044\004\140\005\152\042\074\043" +
    "\103\047\144\050\153\051\171\052\162\053\156\054\163" +
    "\055\146\056\176\067\175\070\173\112\164\114\142\123" +
    "\145\001\002\000\004\124\276\001\002\000\044\063\uffb7" +
    "\064\uffb7\065\uffb7\066\uffb7\104\uffb7\106\uffb7\107\uffb7\110" +
    "\uffb7\111\uffb7\112\uffb7\115\uffb7\124\uffb7\126\uffb7\127\uffb7" +
    "\130\uffb7\131\uffb7\137\uffb7\001\002\000\004\123\316\001" +
    "\002\000\004\047\311\001\002\000\044\004\140\005\152" +
    "\042\074\043\103\047\144\050\153\051\171\052\162\053" +
    "\156\054\163\055\146\056\176\067\175\070\173\112\164" +
    "\114\142\123\145\001\002\000\004\047\303\001\002\000" +
    "\004\123\304\001\002\000\044\004\140\005\152\042\074" +
    "\043\103\047\144\050\153\051\171\052\162\053\156\054" +
    "\163\055\146\056\176\067\175\070\173\112\164\114\142" +
    "\123\145\001\002\000\006\104\225\124\306\001\002\000" +
    "\044\063\uff25\064\uff25\065\uff25\066\uff25\104\uff25\106\uff25" +
    "\107\uff25\110\uff25\111\uff25\112\uff25\115\uff25\124\uff25\126" +
    "\uff25\127\uff25\130\uff25\131\uff25\137\uff25\001\002\000\006" +
    "\104\225\124\310\001\002\000\044\063\uff28\064\uff28\065" +
    "\uff28\066\uff28\104\uff28\106\uff28\107\uff28\110\uff28\111\uff28" +
    "\112\uff28\115\uff28\124\uff28\126\uff28\127\uff28\130\uff28\131" +
    "\uff28\137\uff28\001\002\000\004\123\312\001\002\000\046" +
    "\004\140\005\152\042\074\043\103\047\144\050\153\051" +
    "\171\052\162\053\156\054\163\055\146\056\176\067\175" +
    "\070\173\112\164\114\142\123\145\124\313\001\002\000" +
    "\044\063\uff27\064\uff27\065\uff27\066\uff27\104\uff27\106\uff27" +
    "\107\uff27\110\uff27\111\uff27\112\uff27\115\uff27\124\uff27\126" +
    "\uff27\127\uff27\130\uff27\131\uff27\137\uff27\001\002\000\006" +
    "\104\225\124\315\001\002\000\044\063\uff26\064\uff26\065" +
    "\uff26\066\uff26\104\uff26\106\uff26\107\uff26\110\uff26\111\uff26" +
    "\112\uff26\115\uff26\124\uff26\126\uff26\127\uff26\130\uff26\131" +
    "\uff26\137\uff26\001\002\000\004\124\317\001\002\000\044" +
    "\063\uff29\064\uff29\065\uff29\066\uff29\104\uff29\106\uff29\107" +
    "\uff29\110\uff29\111\uff29\112\uff29\115\uff29\124\uff29\126\uff29" +
    "\127\uff29\130\uff29\131\uff29\137\uff29\001\002\000\044\063" +
    "\uffaf\064\uffaf\065\uffaf\066\uffaf\104\uffaf\106\uffaf\107\uffaf" +
    "\110\uffaf\111\uffaf\112\uffaf\115\uffaf\124\uffaf\126\uffaf\127" +
    "\uffaf\130\uffaf\131\uffaf\137\uffaf\001\002\000\044\063\uffae" +
    "\064\uffae\065\uffae\066\uffae\104\uffae\106\uffae\107\uffae\110" +
    "\uffae\111\uffae\112\uffae\115\uffae\124\uffae\126\uffae\127\uffae" +
    "\130\uffae\131\uffae\137\uffae\001\002\000\002\001\002\000" +
    "\004\137\324\001\002\000\010\047\127\106\072\124\uff2f" +
    "\001\002\000\004\124\uff2e\001\002\000\004\124\uff2d\001" +
    "\002\000\004\124\330\001\002\000\036\010\uff50\012\uff50" +
    "\013\uff50\015\uff50\020\uff50\033\uff50\034\uff50\035\uff50\036" +
    "\uff50\041\uff50\042\uff50\043\uff50\047\uff50\106\uff50\001\002" +
    "\000\036\010\102\012\100\013\073\015\121\020\076\033" +
    "\011\034\024\035\010\036\023\041\014\042\074\043\103" +
    "\047\077\106\072\001\002\000\004\015\uff35\001\002\000" +
    "\004\015\334\001\002\000\004\123\uff2c\001\002\000\004" +
    "\123\336\001\002\000\010\047\127\106\072\137\uff32\001" +
    "\002\000\004\137\340\001\002\000\002\001\002\000\004" +
    "\137\342\001\002\000\010\047\127\106\072\124\uff2f\001" +
    "\002\000\004\124\344\001\002\000\004\140\uff50\001\002" +
    "\000\004\140\346\001\002\000\040\010\102\012\100\013" +
    "\073\015\121\020\076\033\011\034\024\035\010\036\023" +
    "\041\014\042\074\043\103\047\077\106\072\141\350\001" +
    "\002\000\042\010\uff34\012\uff34\013\uff34\015\uff34\017\uff34" +
    "\020\uff34\033\uff34\034\uff34\035\uff34\036\uff34\041\uff34\042" +
    "\uff34\043\uff34\047\uff34\106\uff34\141\uff34\001\002\000\044" +
    "\010\uff53\011\uff53\012\uff53\013\uff53\015\uff53\017\uff53\020" +
    "\uff53\033\uff53\034\uff53\035\uff53\036\uff53\041\uff53\042\uff53" +
    "\043\uff53\047\uff53\106\uff53\141\uff53\001\002\000\040\010" +
    "\102\012\100\013\073\015\121\020\076\033\011\034\024" +
    "\035\010\036\023\041\014\042\074\043\103\047\077\106" +
    "\072\141\353\001\002\000\042\010\uff69\012\uff69\013\uff69" +
    "\015\uff69\017\uff69\020\uff69\033\uff69\034\uff69\035\uff69\036" +
    "\uff69\041\uff69\042\uff69\043\uff69\047\uff69\106\uff69\141\uff69" +
    "\001\002\000\044\010\uff54\011\uff54\012\uff54\013\uff54\015" +
    "\uff54\017\uff54\020\uff54\033\uff54\034\uff54\035\uff54\036\uff54" +
    "\041\uff54\042\uff54\043\uff54\047\uff54\106\uff54\141\uff54\001" +
    "\002\000\042\010\uff63\012\uff63\013\uff63\015\uff63\017\uff63" +
    "\020\uff63\033\uff63\034\uff63\035\uff63\036\uff63\041\uff63\042" +
    "\uff63\043\uff63\047\uff63\106\uff63\141\uff63\001\002\000\042" +
    "\010\uff66\012\uff66\013\uff66\015\uff66\017\uff66\020\uff66\033" +
    "\uff66\034\uff66\035\uff66\036\uff66\041\uff66\042\uff66\043\uff66" +
    "\047\uff66\106\uff66\141\uff66\001\002\000\020\071\132\072" +
    "\134\073\136\074\131\075\137\125\270\136\133\001\002" +
    "\000\044\004\140\005\152\042\074\043\103\047\144\050" +
    "\153\051\171\052\162\053\156\054\163\055\146\056\176" +
    "\067\175\070\173\112\164\114\142\123\145\001\002\000" +
    "\006\124\uff5e\137\uff5e\001\002\000\042\010\uff4c\012\uff4c" +
    "\013\uff4c\015\uff4c\017\uff4c\020\uff4c\033\uff4c\034\uff4c\035" +
    "\uff4c\036\uff4c\041\uff4c\042\uff4c\043\uff4c\047\uff4c\106\uff4c" +
    "\141\uff4c\001\002\000\010\006\370\007\363\141\364\001" +
    "\002\000\004\135\u010a\001\002\000\042\010\uff44\012\uff44" +
    "\013\uff44\015\uff44\017\uff44\020\uff44\033\uff44\034\uff44\035" +
    "\uff44\036\uff44\041\uff44\042\uff44\043\uff44\047\uff44\106\uff44" +
    "\141\uff44\001\002\000\010\006\370\007\363\141\u0106\001" +
    "\002\000\010\006\uff43\007\uff43\141\uff43\001\002\000\046" +
    "\006\uff3f\007\uff3f\010\uff3f\012\uff3f\013\uff3f\015\uff3f\017" +
    "\uff3f\020\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f\041\uff3f" +
    "\042\uff3f\043\uff3f\047\uff3f\106\uff3f\141\uff3f\001\002\000" +
    "\020\050\153\051\171\052\162\053\156\054\163\055\146" +
    "\056\176\001\002\000\046\006\370\007\363\010\uff50\012" +
    "\uff50\013\uff50\015\uff50\017\uff50\020\uff50\033\uff50\034\uff50" +
    "\035\uff50\036\uff50\041\uff50\042\uff50\043\uff50\047\uff50\106" +
    "\uff50\141\372\001\002\000\042\010\uff45\012\uff45\013\uff45" +
    "\015\uff45\017\uff45\020\uff45\033\uff45\034\uff45\035\uff45\036" +
    "\uff45\041\uff45\042\uff45\043\uff45\047\uff45\106\uff45\141\uff45" +
    "\001\002\000\040\010\102\012\100\013\073\015\121\017" +
    "\uff4d\020\076\033\011\034\024\035\010\036\023\041\014" +
    "\042\074\043\103\047\077\106\072\001\002\000\046\006" +
    "\uff3e\007\uff3e\010\uff3e\012\uff3e\013\uff3e\015\uff3e\017\uff3e" +
    "\020\uff3e\033\uff3e\034\uff3e\035\uff3e\036\uff3e\041\uff3e\042" +
    "\uff3e\043\uff3e\047\uff3e\106\uff3e\141\uff3e\001\002\000\004" +
    "\017\u0102\001\002\000\040\010\102\012\100\013\073\015" +
    "\121\017\uff4d\020\076\033\011\034\024\035\010\036\023" +
    "\041\014\042\074\043\103\047\077\106\072\001\002\000" +
    "\004\017\u0100\001\002\000\004\137\u0101\001\002\000\010" +
    "\006\uff41\007\uff41\141\uff41\001\002\000\004\137\u0103\001" +
    "\002\000\010\006\uff40\007\uff40\141\uff40\001\002\000\004" +
    "\135\u0105\001\002\000\046\006\uff3d\007\uff3d\010\uff3d\012" +
    "\uff3d\013\uff3d\015\uff3d\017\uff3d\020\uff3d\033\uff3d\034\uff3d" +
    "\035\uff3d\036\uff3d\041\uff3d\042\uff3d\043\uff3d\047\uff3d\106" +
    "\uff3d\141\uff3d\001\002\000\042\010\uff46\012\uff46\013\uff46" +
    "\015\uff46\017\uff46\020\uff46\033\uff46\034\uff46\035\uff46\036" +
    "\uff46\041\uff46\042\uff46\043\uff46\047\uff46\106\uff46\141\uff46" +
    "\001\002\000\010\006\uff42\007\uff42\141\uff42\001\002\000" +
    "\046\006\370\007\363\010\uff50\012\uff50\013\uff50\015\uff50" +
    "\017\uff50\020\uff50\033\uff50\034\uff50\035\uff50\036\uff50\041" +
    "\uff50\042\uff50\043\uff50\047\uff50\106\uff50\141\u0109\001\002" +
    "\000\042\010\uff47\012\uff47\013\uff47\015\uff47\017\uff47\020" +
    "\uff47\033\uff47\034\uff47\035\uff47\036\uff47\041\uff47\042\uff47" +
    "\043\uff47\047\uff47\106\uff47\141\uff47\001\002\000\046\006" +
    "\uff3c\007\uff3c\010\uff3c\012\uff3c\013\uff3c\015\uff3c\017\uff3c" +
    "\020\uff3c\033\uff3c\034\uff3c\035\uff3c\036\uff3c\041\uff3c\042" +
    "\uff3c\043\uff3c\047\uff3c\106\uff3c\141\uff3c\001\002\000\042" +
    "\010\uff49\012\uff49\013\uff49\015\uff49\017\uff49\020\uff49\033" +
    "\uff49\034\uff49\035\uff49\036\uff49\041\uff49\042\uff49\043\uff49" +
    "\047\uff49\106\uff49\141\uff49\001\002\000\042\010\uff67\012" +
    "\uff67\013\uff67\015\uff67\017\uff67\020\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\041\uff67\042\uff67\043\uff67\047\uff67\106" +
    "\uff67\141\uff67\001\002\000\006\104\u0117\137\uffe8\001\002" +
    "\000\004\047\u0114\001\002\000\024\071\132\072\134\073" +
    "\136\074\131\075\137\104\uffdf\125\057\136\133\137\uffdf" +
    "\001\002\000\006\125\057\137\uffe4\001\002\000\044\004" +
    "\140\005\152\042\074\043\103\047\144\050\153\051\171" +
    "\052\162\053\156\054\163\055\146\056\176\067\175\070" +
    "\173\112\164\114\142\123\145\001\002\000\004\137\uffe6" +
    "\001\002\000\006\104\u0117\137\uffe7\001\002\000\022\071" +
    "\132\072\134\073\136\074\131\075\137\104\uffdf\136\133" +
    "\137\uffdf\001\002\000\044\004\140\005\152\042\074\043" +
    "\103\047\144\050\153\051\171\052\162\053\156\054\163" +
    "\055\146\056\176\067\175\070\173\112\164\114\142\123" +
    "\145\001\002\000\004\137\uffe5\001\002\000\004\047\u0118" +
    "\001\002\000\006\104\uffe0\137\uffe0\001\002\000\042\010" +
    "\uff3a\012\uff3a\013\uff3a\015\uff3a\017\uff3a\020\uff3a\033\uff3a" +
    "\034\uff3a\035\uff3a\036\uff3a\041\uff3a\042\uff3a\043\uff3a\047" +
    "\uff3a\106\uff3a\141\uff3a\001\002\000\042\010\uff62\012\uff62" +
    "\013\uff62\015\uff62\017\uff62\020\uff62\033\uff62\034\uff62\035" +
    "\uff62\036\uff62\041\uff62\042\uff62\043\uff62\047\uff62\106\uff62" +
    "\141\uff62\001\002\000\004\050\u011c\001\002\000\004\104" +
    "\u011d\001\002\000\044\004\140\005\152\042\074\043\103" +
    "\047\144\050\153\051\171\052\162\053\156\054\163\055" +
    "\146\056\176\067\175\070\173\112\164\114\142\123\145" +
    "\001\002\000\006\104\uff21\124\uff21\001\002\000\006\104" +
    "\u0120\124\u0121\001\002\000\044\004\140\005\152\042\074" +
    "\043\103\047\144\050\153\051\171\052\162\053\156\054" +
    "\163\055\146\056\176\067\175\070\173\112\164\114\142" +
    "\123\145\001\002\000\044\063\uff24\064\uff24\065\uff24\066" +
    "\uff24\104\uff24\106\uff24\107\uff24\110\uff24\111\uff24\112\uff24" +
    "\115\uff24\124\uff24\126\uff24\127\uff24\130\uff24\131\uff24\137" +
    "\uff24\001\002\000\006\104\uff22\124\uff22\001\002\000\044" +
    "\004\140\005\152\042\074\043\103\047\144\050\153\051" +
    "\171\052\162\053\156\054\163\055\146\056\176\067\175" +
    "\070\173\112\164\114\142\123\145\001\002\000\004\124" +
    "\uff50\001\002\000\004\124\u0126\001\002\000\040\010\u012a" +
    "\012\100\013\u0128\015\u012f\020\076\033\011\034\024\035" +
    "\010\036\023\041\014\042\074\043\103\047\077\106\072" +
    "\140\346\001\002\000\042\010\uff4e\012\uff4e\013\uff4e\015" +
    "\uff4e\017\uff4e\020\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e" +
    "\041\uff4e\042\uff4e\043\uff4e\047\uff4e\106\uff4e\141\uff4e\001" +
    "\002\000\004\123\uff2c\001\002\000\004\011\uff4d\001\002" +
    "\000\004\123\u013c\001\002\000\044\010\uff4e\011\uff58\012" +
    "\uff4e\013\uff4e\015\uff4e\017\uff4e\020\uff4e\033\uff4e\034\uff4e" +
    "\035\uff4e\036\uff4e\041\uff4e\042\uff4e\043\uff4e\047\uff4e\106" +
    "\uff4e\141\uff4e\001\002\000\004\011\uff55\001\002\000\004" +
    "\011\uff57\001\002\000\004\011\uff56\001\002\000\004\123" +
    "\uff2c\001\002\000\004\123\u0131\001\002\000\010\047\127" +
    "\106\072\137\uff32\001\002\000\004\137\u0133\001\002\000" +
    "\002\001\002\000\004\137\u0135\001\002\000\010\047\127" +
    "\106\072\124\uff2f\001\002\000\004\124\u0137\001\002\000" +
    "\040\010\uff50\012\uff50\013\uff50\015\uff50\020\uff50\033\uff50" +
    "\034\uff50\035\uff50\036\uff50\041\uff50\042\uff50\043\uff50\047" +
    "\uff50\106\uff50\140\uff50\001\002\000\040\010\u012a\012\100" +
    "\013\u0128\015\u012f\020\076\033\011\034\024\035\010\036" +
    "\023\041\014\042\074\043\103\047\077\106\072\140\346" +
    "\001\002\000\004\011\uff33\001\002\000\004\011\uff58\001" +
    "\002\000\042\010\uff51\012\uff51\013\uff51\015\uff51\017\uff51" +
    "\020\uff51\033\uff51\034\uff51\035\uff51\036\uff51\041\uff51\042" +
    "\uff51\043\uff51\047\uff51\106\uff51\141\uff51\001\002\000\044" +
    "\004\140\005\152\042\074\043\103\047\144\050\153\051" +
    "\171\052\162\053\156\054\163\055\146\056\176\067\175" +
    "\070\173\112\164\114\142\123\145\001\002\000\004\124" +
    "\uff50\001\002\000\004\124\u013f\001\002\000\040\010\u012a" +
    "\012\100\013\u0128\015\u012f\020\076\033\011\034\024\035" +
    "\010\036\023\041\014\042\074\043\103\047\077\106\072" +
    "\140\346\001\002\000\004\011\uff4d\001\002\000\004\011" +
    "\uff4f\001\002\000\004\011\u0143\001\002\000\040\010\uff4e" +
    "\012\uff4e\013\uff4e\015\uff4e\020\uff4e\033\uff4e\034\uff4e\035" +
    "\uff4e\036\uff4e\041\uff4e\042\uff4e\043\uff4e\047\uff4e\106\uff4e" +
    "\140\uff4e\001\002\000\040\010\u012a\012\100\013\u0128\015" +
    "\u012f\020\076\033\011\034\024\035\010\036\023\041\014" +
    "\042\074\043\103\047\077\106\072\140\346\001\002\000" +
    "\042\010\uff4d\012\uff4d\013\uff4d\015\uff4d\017\uff4d\020\uff4d" +
    "\033\uff4d\034\uff4d\035\uff4d\036\uff4d\041\uff4d\042\uff4d\043" +
    "\uff4d\047\uff4d\106\uff4d\141\uff4d\001\002\000\004\011\uff4d" +
    "\001\002\000\004\011\uff4c\001\002\000\004\011\uff4a\001" +
    "\002\000\042\010\uff4c\012\uff4c\013\uff4c\015\uff4c\017\uff4c" +
    "\020\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\041\uff4c\042" +
    "\uff4c\043\uff4c\047\uff4c\106\uff4c\141\uff4c\001\002\000\042" +
    "\010\uff4b\012\uff4b\013\uff4b\015\uff4b\017\uff4b\020\uff4b\033" +
    "\uff4b\034\uff4b\035\uff4b\036\uff4b\041\uff4b\042\uff4b\043\uff4b" +
    "\047\uff4b\106\uff4b\141\uff4b\001\002\000\004\011\uff4f\001" +
    "\002\000\004\011\u014d\001\002\000\036\010\uff4e\012\uff4e" +
    "\013\uff4e\015\uff4e\020\uff4e\033\uff4e\034\uff4e\035\uff4e\036" +
    "\uff4e\041\uff4e\042\uff4e\043\uff4e\047\uff4e\106\uff4e\001\002" +
    "\000\036\010\102\012\100\013\073\015\121\020\076\033" +
    "\011\034\024\035\010\036\023\041\014\042\074\043\103" +
    "\047\077\106\072\001\002\000\004\123\u0150\001\002\000" +
    "\044\004\140\005\152\042\074\043\103\047\144\050\153" +
    "\051\171\052\162\053\156\054\163\055\146\056\176\067" +
    "\175\070\173\112\164\114\142\123\145\001\002\000\004" +
    "\124\u0152\001\002\000\040\010\uff50\012\uff50\013\uff50\015" +
    "\uff50\020\uff50\033\uff50\034\uff50\035\uff50\036\uff50\041\uff50" +
    "\042\uff50\043\uff50\047\uff50\106\uff50\140\uff50\001\002\000" +
    "\040\010\u012a\012\100\013\u0128\015\u012f\020\076\033\011" +
    "\034\024\035\010\036\023\041\014\042\074\043\103\047" +
    "\077\106\072\140\346\001\002\000\042\010\uff39\012\uff39" +
    "\013\uff39\015\uff39\017\uff39\020\uff39\033\uff39\034\uff39\035" +
    "\uff39\036\uff39\041\uff39\042\uff39\043\uff39\047\uff39\106\uff39" +
    "\141\uff39\001\002\000\004\011\uff37\001\002\000\044\010" +
    "\uff4f\011\uff58\012\uff4f\013\uff4f\015\uff4f\017\uff4f\020\uff4f" +
    "\033\uff4f\034\uff4f\035\uff4f\036\uff4f\041\uff4f\042\uff4f\043" +
    "\uff4f\047\uff4f\106\uff4f\141\uff4f\001\002\000\042\010\uff38" +
    "\012\uff38\013\uff38\015\uff38\017\uff38\020\uff38\033\uff38\034" +
    "\uff38\035\uff38\036\uff38\041\uff38\042\uff38\043\uff38\047\uff38" +
    "\106\uff38\141\uff38\001\002\000\042\010\uff52\012\uff52\013" +
    "\uff52\015\uff52\017\uff52\020\uff52\033\uff52\034\uff52\035\uff52" +
    "\036\uff52\041\uff52\042\uff52\043\uff52\047\uff52\106\uff52\141" +
    "\uff52\001\002\000\044\004\140\005\152\042\074\043\103" +
    "\047\144\050\153\051\171\052\162\053\156\054\163\055" +
    "\146\056\176\067\175\070\173\112\164\114\142\123\145" +
    "\001\002\000\004\124\u015b\001\002\000\004\140\uff48\001" +
    "\002\000\004\137\uff61\001\002\000\042\010\uff3b\012\uff3b" +
    "\013\uff3b\015\uff3b\017\uff3b\020\uff3b\033\uff3b\034\uff3b\035" +
    "\uff3b\036\uff3b\041\uff3b\042\uff3b\043\uff3b\047\uff3b\106\uff3b" +
    "\141\uff3b\001\002\000\004\050\u015f\001\002\000\004\104" +
    "\u0160\001\002\000\004\105\u0161\001\002\000\032\005\152" +
    "\042\074\043\103\047\144\050\153\051\171\052\162\053" +
    "\156\054\163\055\146\056\176\123\145\001\002\000\006" +
    "\104\u0163\124\u0164\001\002\000\004\105\u0165\001\002\000" +
    "\044\063\uff23\064\uff23\065\uff23\066\uff23\104\uff23\106\uff23" +
    "\107\uff23\110\uff23\111\uff23\112\uff23\115\uff23\124\uff23\126" +
    "\uff23\127\uff23\130\uff23\131\uff23\137\uff23\001\002\000\032" +
    "\005\152\042\074\043\103\047\144\050\153\051\171\052" +
    "\162\053\156\054\163\055\146\056\176\123\145\001\002" +
    "\000\006\104\uff20\124\uff20\001\002\000\006\104\uff1f\124" +
    "\uff1f\001\002\000\004\123\u0169\001\002\000\044\004\140" +
    "\005\152\042\074\043\103\047\144\050\153\051\171\052" +
    "\162\053\156\054\163\055\146\056\176\067\175\070\173" +
    "\112\164\114\142\123\145\001\002\000\004\124\u016b\001" +
    "\002\000\040\010\uff50\012\uff50\013\uff50\015\uff50\020\uff50" +
    "\033\uff50\034\uff50\035\uff50\036\uff50\041\uff50\042\uff50\043" +
    "\uff50\047\uff50\106\uff50\140\uff50\001\002\000\040\010\102" +
    "\012\100\013\073\015\121\020\076\033\011\034\024\035" +
    "\010\036\023\041\014\042\074\043\103\047\077\106\072" +
    "\140\346\001\002\000\042\010\uff4f\012\uff4f\013\uff4f\015" +
    "\uff4f\017\uff4f\020\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f" +
    "\041\uff4f\042\uff4f\043\uff4f\047\uff4f\106\uff4f\141\uff4f\001" +
    "\002\000\020\071\132\072\134\073\136\074\131\075\137" +
    "\112\u0170\136\133\001\002\000\044\004\140\005\152\042" +
    "\074\043\103\047\144\050\153\051\171\052\162\053\156" +
    "\054\163\055\146\056\176\067\175\070\173\112\164\114" +
    "\142\123\145\001\002\000\004\112\u0171\001\002\000\006" +
    "\124\uff5c\137\uff5c\001\002\000\006\124\uff5f\137\uff5f\001" +
    "\002\000\020\002\uff71\033\uff71\034\uff71\035\uff71\036\uff71" +
    "\041\uff71\047\uff71\001\002\000\020\002\uff7c\033\uff7c\034" +
    "\uff7c\035\uff7c\036\uff7c\041\uff7c\047\uff7c\001\002\000\006" +
    "\120\u0176\123\uff7b\001\002\000\004\047\u0177\001\002\000" +
    "\004\123\uff7e\001\002\000\004\140\uffd7\001\002\000\024" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\041\ufff9\044\ufff9\047" +
    "\ufff9\062\ufff9\137\ufff9\001\002\000\024\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\041\ufffa\044\ufffa\047\ufffa\062\ufffa\137" +
    "\ufffa\001\002\000\026\071\132\072\134\073\136\074\131" +
    "\075\137\104\uffdf\123\u017c\125\057\136\133\137\uffdf\001" +
    "\002\000\020\033\011\034\024\035\010\036\023\041\014" +
    "\047\017\124\u0180\001\002\000\006\104\ufff4\124\ufff4\001" +
    "\002\000\006\104\u0183\124\u0184\001\002\000\012\104\ufff3" +
    "\105\u0181\106\u0182\124\ufff3\001\002\000\004\137\ufff6\001" +
    "\002\000\006\104\ufff1\124\ufff1\001\002\000\006\104\ufff2" +
    "\124\ufff2\001\002\000\016\033\011\034\024\035\010\036" +
    "\023\041\014\047\017\001\002\000\004\137\ufff7\001\002" +
    "\000\006\104\ufff5\124\ufff5\001\002\000\024\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\041\ufffb\044\ufffb\047\ufffb\062\ufffb" +
    "\137\ufffb\001\002\000\004\137\uffd8\001\002\000\010\026" +
    "\u018c\030\u018d\135\uffcd\001\002\000\012\026\uffd4\030\uffd4" +
    "\135\uffd4\141\uffd4\001\002\000\004\135\u0190\001\002\000" +
    "\012\026\u018c\030\u018d\135\uffcd\141\u018e\001\002\000\004" +
    "\135\uffcb\001\002\000\004\135\uffcc\001\002\000\004\137" +
    "\uffd6\001\002\000\012\026\uffd5\030\uffd5\135\uffd5\141\uffd5" +
    "\001\002\000\020\033\011\034\024\035\010\036\023\041" +
    "\014\047\u0195\137\uffca\001\002\000\004\137\u019e\001\002" +
    "\000\004\137\u019d\001\002\000\030\026\uffd3\030\uffd3\033" +
    "\011\034\024\035\010\036\023\041\014\047\u0195\135\uffd3" +
    "\137\uffca\141\uffd3\001\002\000\030\026\uffd1\030\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\047\uffd1\135\uffd1" +
    "\137\uffd1\141\uffd1\001\002\000\010\047\uffe9\106\uffe9\123" +
    "\u0198\001\002\000\004\137\u0197\001\002\000\030\026\uffce" +
    "\030\uffce\033\uffce\034\uffce\035\uffce\036\uffce\041\uffce\047" +
    "\uffce\135\uffce\137\uffce\141\uffce\001\002\000\020\033\011" +
    "\034\024\035\010\036\023\041\014\047\017\124\u019a\001" +
    "\002\000\006\104\u0183\124\u019b\001\002\000\004\137\uffc8" +
    "\001\002\000\004\137\uffc9\001\002\000\030\026\uffd2\030" +
    "\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\041\uffd2\047\uffd2" +
    "\135\uffd2\137\uffd2\141\uffd2\001\002\000\030\026\uffd0\030" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0\047\uffd0" +
    "\135\uffd0\137\uffd0\141\uffd0\001\002\000\030\026\uffcf\030" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf\047\uffcf" +
    "\135\uffcf\137\uffcf\141\uffcf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019c\000\006\003\004\164\003\001\001\000\020\005" +
    "\024\007\011\010\012\011\017\027\014\033\020\042\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\u0186\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u010c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\007\025\010\012\011\017" +
    "\027\014\033\020\042\006\001\001\000\002\001\001\000" +
    "\020\006\036\027\030\107\027\110\033\111\032\112\034" +
    "\113\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\u0173\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\114\043\001\001\000\002\001\001\000\016\027" +
    "\030\107\037\110\033\111\032\112\034\113\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\027\046\115\045\116\047\117\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\046\117\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\055\032" +
    "\054\001\001\000\002\001\001\000\004\032\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\064\001\001" +
    "\000\002\001\001\000\044\011\110\027\105\055\103\105" +
    "\117\121\066\122\067\123\116\126\113\127\100\130\115" +
    "\132\070\133\114\135\106\143\074\146\104\156\112\173" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\172\u0167\001\001\000" +
    "\002\001\001\000\004\166\u015c\001\001\000\042\044\167" +
    "\045\140\054\146\056\147\057\150\064\142\066\171\067" +
    "\154\071\156\072\157\076\166\077\160\103\u015b\105\173" +
    "\106\165\156\164\001\001\000\006\031\127\163\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\166\u0118\001" +
    "\001\000\004\020\u010c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\136\360\001\001\000" +
    "\004\023\355\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\011\110\027\105\055\103\105" +
    "\117\122\351\126\113\127\100\130\115\132\070\133\114" +
    "\135\106\143\074\146\104\156\112\173\111\001\001\000" +
    "\002\001\001\000\004\172\121\001\001\000\002\001\001" +
    "\000\012\126\123\150\124\151\125\156\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\127\001\001\000\042\044\167\045\140\054\146\056" +
    "\147\057\150\064\142\066\171\067\154\071\156\072\157" +
    "\076\166\077\160\103\153\105\173\106\165\156\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\044\167\045\140\054\320\056\147" +
    "\057\150\105\173\106\165\156\164\001\001\000\002\001" +
    "\001\000\014\044\167\045\317\105\173\106\165\156\164" +
    "\001\001\000\002\001\001\000\004\163\276\001\001\000" +
    "\004\160\273\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\044\167" +
    "\045\140\054\146\056\147\057\150\064\272\105\173\106" +
    "\165\156\164\001\001\000\004\023\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\200\060\177\001\001" +
    "\000\002\001\001\000\024\044\167\045\140\054\146\056" +
    "\147\057\150\064\176\105\173\106\165\156\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\221\001" +
    "\001\000\012\014\207\016\204\061\202\062\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\044\167\045\140\054\146\056\147" +
    "\057\150\064\142\066\171\067\154\071\156\072\157\076" +
    "\166\077\160\103\216\105\173\106\165\156\164\001\001" +
    "\000\002\001\001\000\012\014\207\016\211\061\210\062" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\100\214\104\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\021\223\044\167\045\140\054\146\056\147\057" +
    "\150\064\142\066\171\067\154\071\156\072\157\076\166" +
    "\077\160\103\222\105\173\106\165\156\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\044\167\045\140\054\146\056\147\057\150\064\142\066" +
    "\171\067\154\071\156\072\157\076\166\077\160\103\226" +
    "\105\173\106\165\156\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\044\167\045\140\054\146\056\147" +
    "\057\150\064\234\105\173\106\165\156\164\001\001\000" +
    "\024\044\167\045\140\054\146\056\147\057\150\064\233" +
    "\105\173\106\165\156\164\001\001\000\024\044\167\045" +
    "\140\054\146\056\147\057\150\064\232\105\173\106\165" +
    "\156\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\162\236\001\001\000\036\044\167" +
    "\045\140\054\146\056\147\057\150\064\142\066\171\067" +
    "\154\071\156\072\157\077\237\105\173\106\165\156\164" +
    "\001\001\000\002\001\001\000\004\161\241\001\001\000" +
    "\034\044\167\045\140\054\146\056\147\057\150\064\142" +
    "\066\171\067\154\071\156\072\242\105\173\106\165\156" +
    "\164\001\001\000\002\001\001\000\032\044\167\045\140" +
    "\054\146\056\147\057\150\064\142\066\171\067\154\071" +
    "\262\105\173\106\165\156\164\001\001\000\032\044\167" +
    "\045\140\054\146\056\147\057\150\064\142\066\171\067" +
    "\154\071\245\105\173\106\165\156\164\001\001\000\002" +
    "\001\001\000\030\044\167\045\140\054\146\056\147\057" +
    "\150\064\142\066\171\067\261\105\173\106\165\156\164" +
    "\001\001\000\030\044\167\045\140\054\146\056\147\057" +
    "\150\064\142\066\171\067\260\105\173\106\165\156\164" +
    "\001\001\000\030\044\167\045\140\054\146\056\147\057" +
    "\150\064\142\066\171\067\257\105\173\106\165\156\164" +
    "\001\001\000\030\044\167\045\140\054\146\056\147\057" +
    "\150\064\142\066\171\067\252\105\173\106\165\156\164" +
    "\001\001\000\002\001\001\000\026\044\167\045\140\054" +
    "\146\056\147\057\150\064\142\066\256\105\173\106\165" +
    "\156\164\001\001\000\026\044\167\045\140\054\146\056" +
    "\147\057\150\064\142\066\255\105\173\106\165\156\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\044\167\045\140\054\146\056" +
    "\147\057\150\064\142\066\171\067\154\071\156\072\157" +
    "\076\166\077\160\103\265\105\173\106\165\156\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\044\167" +
    "\045\140\054\146\056\147\057\150\064\142\066\171\067" +
    "\154\071\156\072\157\076\166\077\160\103\270\105\173" +
    "\106\165\156\164\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\044\167\045\140\054\146" +
    "\056\147\057\150\064\142\066\171\067\154\071\156\072" +
    "\157\076\166\077\160\103\274\105\173\106\165\156\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\021\306\044\167\045\140" +
    "\054\146\056\147\057\150\064\142\066\171\067\154\071" +
    "\156\072\157\076\166\077\160\103\222\105\173\106\165" +
    "\156\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\021\304\044\167\045\140\054\146\056\147\057\150" +
    "\064\142\066\171\067\154\071\156\072\157\076\166\077" +
    "\160\103\222\105\173\106\165\156\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\021\313\044\167\045\140" +
    "\054\146\056\147\057\150\064\142\066\171\067\154\071" +
    "\156\072\157\076\166\077\160\103\222\105\173\106\165" +
    "\156\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\102\322\001\001\000" +
    "\002\001\001\000\012\126\325\152\326\153\324\156\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\165\330\001\001\000\040\011\110\027\105" +
    "\055\103\105\117\122\331\126\113\127\100\130\115\132" +
    "\070\133\114\135\106\143\074\146\104\156\112\173\111" +
    "\001\001\000\004\174\332\001\001\000\002\001\001\000" +
    "\004\172\334\001\001\000\002\001\001\000\012\126\123" +
    "\150\336\151\125\156\112\001\001\000\002\001\001\000" +
    "\004\102\340\001\001\000\002\001\001\000\012\126\325" +
    "\152\342\153\324\156\112\001\001\000\002\001\001\000" +
    "\004\165\344\001\001\000\004\125\346\001\001\000\042" +
    "\011\110\027\105\055\103\105\117\122\067\123\350\126" +
    "\113\127\100\130\115\132\070\133\114\135\106\143\074" +
    "\146\104\156\112\173\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\011\110\027\105\055\103\105\117" +
    "\122\351\126\113\127\100\130\115\132\070\133\114\135" +
    "\106\143\074\146\104\156\112\173\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\356\001\001\000\042\044\167\045\140" +
    "\054\146\056\147\057\150\064\142\066\171\067\154\071" +
    "\156\072\157\076\166\077\160\103\357\105\173\106\165" +
    "\156\164\001\001\000\002\001\001\000\004\171\u010a\001" +
    "\001\000\012\137\364\140\365\141\370\142\366\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\140\u0106\141" +
    "\u0107\142\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\u0103\001\001\000\006\142\373\165\372\001" +
    "\001\000\002\001\001\000\044\011\110\027\105\055\103" +
    "\105\117\122\067\123\375\126\113\127\100\130\115\132" +
    "\070\133\114\135\106\143\074\146\104\156\112\170\374" +
    "\173\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\011\110\027\105\055\103\105\117\122\351\126\113" +
    "\127\100\130\115\132\070\133\114\135\106\143\074\146" +
    "\104\156\112\170\376\173\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\142\373\165\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0112\001" +
    "\001\000\010\022\u010f\031\u0110\032\054\001\001\000\004" +
    "\032\061\001\001\000\042\044\167\045\140\054\146\056" +
    "\147\057\150\064\142\066\171\067\154\071\156\072\157" +
    "\076\166\077\160\103\u0111\105\173\106\165\156\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0114" +
    "\001\001\000\042\044\167\045\140\054\146\056\147\057" +
    "\150\064\142\066\171\067\154\071\156\072\157\076\166" +
    "\077\160\103\u0115\105\173\106\165\156\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\024\u011e\044\167\045\140\054\146\056\147" +
    "\057\150\064\142\066\171\067\154\071\156\072\157\076" +
    "\166\077\160\103\u011d\105\173\106\165\156\164\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\044\167\045" +
    "\140\054\146\056\147\057\150\064\142\066\171\067\154" +
    "\071\156\072\157\076\166\077\160\103\u0121\105\173\106" +
    "\165\156\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\044\167\045\140\054\146\056\147\057\150\064" +
    "\142\066\171\067\154\071\156\072\157\076\166\077\160" +
    "\103\u0123\105\173\106\165\156\164\001\001\000\004\165" +
    "\u0124\001\001\000\002\001\001\000\052\011\110\027\105" +
    "\055\103\105\117\122\u0126\125\u012a\126\113\127\100\130" +
    "\115\131\u0128\132\070\133\114\134\u012c\135\106\143\074" +
    "\144\u012d\146\104\147\u012b\156\112\173\111\001\001\000" +
    "\004\167\u0157\001\001\000\004\172\u014e\001\001\000\004" +
    "\170\u014a\001\001\000\002\001\001\000\004\167\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\172\u012f\001\001\000\002\001\001\000\012\126" +
    "\123\150\u0131\151\125\156\112\001\001\000\002\001\001" +
    "\000\004\102\u0133\001\001\000\002\001\001\000\012\126" +
    "\325\152\u0135\153\324\156\112\001\001\000\002\001\001" +
    "\000\004\165\u0137\001\001\000\052\011\110\027\105\055" +
    "\103\105\117\122\331\125\u0139\126\113\127\100\130\115" +
    "\131\u0138\132\070\133\114\134\u012c\135\106\143\074\144" +
    "\u012d\146\104\147\u012b\156\112\173\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\044" +
    "\167\045\140\054\146\056\147\057\150\064\142\066\171" +
    "\067\154\071\156\072\157\076\166\077\160\103\u013c\105" +
    "\173\106\165\156\164\001\001\000\004\165\u013d\001\001" +
    "\000\002\001\001\000\052\011\110\027\105\055\103\105" +
    "\117\122\u0126\125\u012a\126\113\127\100\130\115\131\u013f" +
    "\132\070\133\114\134\u012c\135\106\143\074\144\u012d\146" +
    "\104\147\u012b\156\112\173\111\001\001\000\004\170\u0140" +
    "\001\001\000\004\166\u0141\001\001\000\002\001\001\000" +
    "\004\167\u0143\001\001\000\052\011\110\027\105\055\103" +
    "\105\117\122\u0144\125\u0139\126\113\127\100\130\115\131" +
    "\u0145\132\070\133\114\134\u012c\135\106\143\074\144\u012d" +
    "\146\104\147\u012b\156\112\173\111\001\001\000\004\170" +
    "\u0148\001\001\000\004\170\u0146\001\001\000\004\171\u0147" +
    "\001\001\000\002\001\001\000\004\171\u0149\001\001\000" +
    "\002\001\001\000\004\166\u014b\001\001\000\002\001\001" +
    "\000\004\167\u014d\001\001\000\040\011\110\027\105\055" +
    "\103\105\117\122\u0144\126\113\127\100\130\115\132\070" +
    "\133\114\135\106\143\074\146\104\156\112\173\111\001" +
    "\001\000\002\001\001\000\042\044\167\045\140\054\146" +
    "\056\147\057\150\064\142\066\171\067\154\071\156\072" +
    "\157\076\166\077\160\103\u0150\105\173\106\165\156\164" +
    "\001\001\000\002\001\001\000\004\165\u0152\001\001\000" +
    "\052\011\110\027\105\055\103\105\117\122\u0153\125\u0155" +
    "\126\113\127\100\130\115\131\u0154\132\070\133\114\134" +
    "\u012c\135\106\143\074\144\u012d\146\104\147\u012b\156\112" +
    "\173\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\166\u0156\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\044\167\045\140\054\146\056\147\057\150\064" +
    "\142\066\171\067\154\071\156\072\157\076\166\077\160" +
    "\103\u0159\105\173\106\165\156\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\u0161\001" +
    "\001\000\014\044\167\045\u0166\105\173\106\165\156\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\044\167\045\u0165\105\173\106\165\156\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\044\167\045\140\054\146\056\147\057\150" +
    "\064\142\066\171\067\154\071\156\072\157\076\166\077" +
    "\160\103\u0169\105\173\106\165\156\164\001\001\000\002" +
    "\001\001\000\004\165\u016b\001\001\000\042\011\110\027" +
    "\105\055\103\105\117\122\u0153\125\u016c\126\113\127\100" +
    "\130\115\132\070\133\114\135\106\143\074\146\104\156" +
    "\112\173\111\001\001\000\004\166\u0156\001\001\000\004" +
    "\031\u016e\001\001\000\042\044\167\045\140\054\146\056" +
    "\147\057\150\064\142\066\171\067\154\071\156\072\157" +
    "\076\166\077\160\103\u0171\105\173\106\165\156\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\u010f\031\u0110\032" +
    "\054\001\001\000\010\017\u017d\026\u017c\027\u017e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\u0184\027\u017e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\u018a" +
    "\035\u0188\036\u0189\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\u018e\036\u0189\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\u0190\011\u0195\027\014\037\u0192\040\u0193\041\u0191" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\u0190\011\u0195\027\014\040\u019b\041\u0191\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\u0198\026\u017c\027\u017e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CppParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CppParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CppParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(java_cup.runtime.Symbol cur_token){
		//TokenValue tk = (TokenValue) cur_token.value;
		//if(cur_token.value == null){
			ErrorManager.agregarErrorSintactico(((TokenValue)cur_token.value).getPosLine(),((TokenValue)cur_token.value).getPosChar(),"Error de Sintaxis al leer " + cur_token.value + " esto no va aqui");
			System.out.println("(" + ((TokenValue)cur_token.value).getPosLine() + "," + ((TokenValue)cur_token.value).getPosChar() + "): Error de Sintaxis al leer " + cur_token.value + " esto no va aqui");
	//	}
	//	else{
	//		ErrorManager.agregarErrorSintactico(tk.getPosLine(),tk.getPosChar(),"Error de Sintaxis en simbolo " + tk.toString());
	//		System.out.println("Error de Sintaxis");
	//	}
		//report_fatal_error("Error de Sintaxis", tk);
		done_parsing();
	}

	public static void main(String args[]){
		if(args[0] != null){
			try{
			Output.setOutputFile("/home/kreig/test","outtest");
			CppParser p = new CppParser(new CppLexer(new FileReader(args[0])));
			p.debug_parse();
			//p.parse();
			}
			catch(Exception e){
				System.out.println(e);
			}
			finally{
				Output.close();
			}
		}
	}
	
	public static String a_bitoActual = new String("$root");


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CppParser$actions {

	
	//static Vacc engine;
	int contadorparams; /**contador de parametros*/
	SymTab tablaSimbolos = new SymTab(); /**Tabla de Simbolos*/
	SymTab aux = new SymTab(); /**Tablas de simbolos auxiliares*/
	String currScope = new String("global");/**Ambito Actual*/
	String currFunc = new String();
	int currAccess = -1; /**Class Access Type*/
	int desplazamiento = 0; /**Desplazamiento del puntero*/
	int pos = 0; /**Posicion del puntero*/
	int temp = 0; /**Temporales*/
	int etiqActual = 0; /**Etiquetas normales*/
	int etiqSig = 0; /**Etiquetas de verdadero false*/
	int etiqInic = 0; /**Etiquetas de ciclos*/
	ArrayList idxListActual = new ArrayList(); /**Lista de indices actual para matrices*/
	int idxActual = 0; /**Indice actual para matrices*/
	ExpAttribute switchExp;/**Atributo del switch*/// == new ExpAttribute();
	BackFill relleno = new BackFill(); /**relleno de retroceso*/	

  private final CppParser parser;

  /** Constructor */
  CUP$CppParser$actions(CppParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CppParser$do_action(
    int                        CUP$CppParser$act_num,
    java_cup.runtime.lr_parser CUP$CppParser$parser,
    java.util.Stack            CUP$CppParser$stack,
    int                        CUP$CppParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CppParser$result;

      /* select the action based on the action number */
      switch (CUP$CppParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // listaargs ::= expression 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ArrayList ret = new ArrayList(); ret.add(e); RESULT = ret;
              CUP$CppParser$result = new java_cup.runtime.Symbol(15/*listaargs*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // listaargs ::= listaargs COMA expression 
            {
              ArrayList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ArrayList e1 = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 e1.add(e); RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(15/*listaargs*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // call_mrk ::= 
            {
              ExpAttribute RESULT = null;
		

              CUP$CppParser$result = new java_cup.runtime.Symbol(113/*call_mrk*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // sfargs ::= AMPERSAND primary_expression 
            {
              ArrayList RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute pe = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
		ArrayList r = new ArrayList();
		r.add(pe);
		RESULT = r;
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(19/*sfargs*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // sfargs ::= sfargs COMA AMPERSAND primary_expression 
            {
              ArrayList RESULT = null;
		int saleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		ArrayList sa = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute pe = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
		sa.add(pe);
		RESULT = sa;
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(19/*sfargs*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // pfargs ::= expression 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
		ArrayList r = new ArrayList();
		r.add(e);
		RESULT = r;
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(18/*pfargs*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // pfargs ::= pfargs COMA expression 
            {
              ArrayList RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ArrayList pa = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
		pa.add(e);
		RESULT = pa;
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(18/*pfargs*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // call ::= SCANF APAR STRING_LITERAL COMA sfargs CPAR 
            {
              ExpAttribute RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		TokenValue sl = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int saright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ArrayList sa = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		
        	Output.write("scanf(\"" + sl.toString() + "\"");        
		Iterator i = sa.iterator();
		while(i.hasNext()){
			Output.write(",&");
			Output.write(((ExpAttribute)i.next()).getCad());        	
		}
		Output.writeLn(");");
		Output.writeLn("STACK[ t" + (temp - 2) +"] = t" + (temp - 1) + ";");
        
              CUP$CppParser$result = new java_cup.runtime.Symbol(67/*call*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // call ::= PRINTF APAR STRING_LITERAL COMA pfargs CPAR 
            {
              ExpAttribute RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		TokenValue sl = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ArrayList pa = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		
		Output.write("printf(\"" + sl.toString() + "\"");        
		Iterator i = pa.iterator();
		while(i.hasNext()){
			Output.write(",");
			Output.write(((ExpAttribute)i.next()).getCad());        	
		}
		Output.writeLn(");");
        
              CUP$CppParser$result = new java_cup.runtime.Symbol(67/*call*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // call ::= IDENTIFIER ARROW IDENTIFIER APAR listaargs CPAR 
            {
              ExpAttribute RESULT = null;
		int laleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;

              CUP$CppParser$result = new java_cup.runtime.Symbol(67/*call*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // call ::= IDENTIFIER PUNTO IDENTIFIER APAR listaargs CPAR 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 try{			
			ExpAttribute pe = new ExpAttribute();
			int count = 0;
			IlGen.Symbol symActual = tablaSimbolos.getObj(id.toString(),currScope);
			if(symActual==null){
				symActual = tablaSimbolos.getObj(id.toString(),"global");
			}
			if(symActual==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Instancia " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
			}
			String classScope = symActual.getType().getObjType();
			// si es public o la funcion donde estamos es miembro de la clase
			
			IlGen.Symbol symActual2 = tablaSimbolos.getFunc(id2.toString(),classScope);
			if(symActual2==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Funcion miembro " + id2.toString() + " no existe");
			throw new Exception("Funcion miembro " + id2.toString() + " no existe");
			}
			
			if(symActual2.getAccess() == SymTab.A_PUBLIC || tablaSimbolos.isMemberFunction(currScope,classScope) == true){
				/*
				if(symActual2.getSize() != la.size() && symActual2.getSize() != -1){
					ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error: Numero de parametros invalido para la llamada a " + id.toString());
					throw new Exception("Error: Numero de parametros invalido para la llamada");				
				}
				if(symActual2.getType().getType() != SymTab.T_VOID){
					pos += desplazamiento;	
					desplazamiento++; // apartamos memoria para el valor de retorno
					
					Iterator i = la.iterator();
					ExpAttribute eactual;				
					while(i.hasNext()){
						eactual = (ExpAttribute) i.next();				
						Output.writeLn("$STACK[" + (pos + desplazamiento) + "] = " + eactual.getCad() +";");// obtenemos
						desplazamiento ++;
					}			
					if(!symActual2.getScope().equals("global"))
						pos += desplazamiento;					
					
					//Output.writeLn(symActual.getId() + "();");
					Output.writeLn(id2.toString() + "();");
					Output.writeLn("$t" + temp +" = $STACK[" +  pos + "];");// obtenemos valor de retorno				
					// push a todos los parametros y les asignamos memoria
					pe.setCad("$t" + temp);
					temp++;
					RESULT = pe;
				}// si es funcion a void no apartamos ni devolvemos nada
				else{
					pos += desplazamiento;
					Iterator i = la.iterator();
					ExpAttribute eactual;				
					while(i.hasNext()){
						eactual = (ExpAttribute) i.next();				
						Output.writeLn("$STACK[" + (pos + desplazamiento) + "] = " + eactual.getCad() +";");// obtenemos
						desplazamiento ++;
					}			
					if(!symActual2.getScope().equals("global"))
						pos += desplazamiento;					
					
					//Output.writeLn(symActual.getId() + "();");
					Output.writeLn(id2.toString() + "();");
					Output.writeLn("$t" + temp +" = $STACK[" +  pos + "];");// obtenemos valor de retorno				
					// push a todos los parametros y les asignamos memoria
					pe.setCad("$t" + temp);
					temp++;
					RESULT = pe;
				}  */ 
				if(symActual2.getSize() != la.size() && symActual2.getSize() != -1){
					ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error: Numero de parametros invalido para la llamada a " + id.toString());
					throw new Exception("Error: Numero de parametros invalido para la llamada");				
				}
				if(symActual2.getType().getType() != SymTab.T_VOID){
					
					//pos += desplazamiento;	
					desplazamiento++; // apartamos memoria para el valor de retorno
					count = 1;
					Iterator i = la.iterator();
					ExpAttribute eactual;				
					while(i.hasNext()){
						eactual = (ExpAttribute) i.next();
						Output.writeLn("t" + temp +" = p + " + count/*s.getPosition()*/ + ";");
					temp++;
						Output.writeLn("STACK[ t" + (temp - 1) + "] = " + eactual.getCad() +";");// obtenemos
						//desplazamiento ++;
						count ++;
					}			
					//if(!symActual.getScope().equals("global"))
						//pos += desplazamiento;				
					Output.writeLn("p = p + " + count + ";");
					//desplazamiento += count;
					Output.writeLn(symActual2.getId() + "();");
					Output.writeLn("p = p - " + count + ";");
					//desplazamiento -= count;
					Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
					// push a todos los parametros y les asignamos memoria
					pe.setCad("t" + temp);
					temp++;
					RESULT = pe;
				}// si es funcion a void no apartamos ni devolvemos nada
				else{
					pos += desplazamiento;
					Iterator i = la.iterator();
					ExpAttribute eactual;				
					while(i.hasNext()){
						eactual = (ExpAttribute) i.next();	
						Output.writeLn("t" + temp +" = p + " + count/*s.getPosition()*/ + ";");
					temp++;			
						Output.writeLn("STACK[ t" + (temp - 1) + "] = " + eactual.getCad() +";");// obtenemos
						//desplazamiento ++;
						count ++;
					}			
					if(!symActual2.getScope().equals("global"))
						pos += desplazamiento;					
					Output.writeLn("p = p + " + count + ";");
					Output.writeLn(symActual2.getId() + "();");
					Output.writeLn("p = p - " + count + ";");
					Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
					// push a todos los parametros y les asignamos memoria
					pe.setCad("t" + temp);
					temp++;
					RESULT = pe;
				}    
				/***/ 					
			}
			else{
				ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error, el miembro " + id.toString() + "no es public.");
				throw new Exception("Error, el miembro " + id2.toString() + "no es public.");
			}
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
              CUP$CppParser$result = new java_cup.runtime.Symbol(67/*call*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // call ::= IDENTIFIER PUNTO IDENTIFIER APAR CPAR 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		 try{			
			ExpAttribute pe = new ExpAttribute();
			int count = 0;
			IlGen.Symbol symActual = tablaSimbolos.getObj(id.toString(),currScope);
			if(symActual==null){
				symActual = tablaSimbolos.getObj(id.toString(),"global");
			}
			if(symActual==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Instancia " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
			}
			String classScope = symActual.getType().getObjType();
			IlGen.Symbol symActual2 = tablaSimbolos.getFunc(id2.toString(),classScope);
			if(symActual2==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Funcion miembro " + id2.toString() + " no existe");
			throw new Exception("Funcion miembro " + id2.toString() + " no existe");
			}
			
			// si es public o la funcion donde estamos es miembro de la clase
			if(symActual2.getAccess() == SymTab.A_PUBLIC || tablaSimbolos.isMemberFunction(currScope,classScope) == true){
			/*
				if(symActual2.getSize() != 0){
					ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error: Numero de parametros invalido para la llamada a " + id.toString());
					throw new Exception("Error: Numero de parametros invalido para la llamada");				
				}
				if(symActual2.getType().getType() != tablaSimbolos.T_VOID){
					desplazamiento++; // apartamos memoria para el valor de retorno
					//Output.writeLn(symActual.getId() + "();");
					Output.writeLn(id2.toString() + "();");
					Output.writeLn("$t" + temp +" = $STACK[" + (pos + 1) + "];");// obtenemos valor de retorno				
					pe.setCad("$t" + temp);
					temp++;
					desplazamiento--;
					RESULT = pe;
				}// si es funcion a void no apartamos ni devolvemos nada
				else{
					//Output.writeLn(symActual.getId() + "();");
					Output.writeLn(id2.toString() + "();");
					RESULT = null;
				
				
				}		
				*/
				/***/
				if(symActual2.getSize() != 0){
					ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error: Numero de parametros invalido para la llamada a " + id.toString());
					throw new Exception("Error: Numero de parametros invalido para la llamada");				
				}
				if(symActual2.getType().getType() != SymTab.T_VOID){
					
					//pos += desplazamiento;	
					desplazamiento++; // apartamos memoria para el valor de retorno
					count = 1;							
					//if(!symActual.getScope().equals("global"))
						//pos += desplazamiento;				
					Output.writeLn("p = p + " + count + ";");
					//desplazamiento += count;
					Output.writeLn(symActual2.getId() + "();");
					Output.writeLn("p = p - " + count + ";");
					//desplazamiento -= count;
					Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
					// push a todos los parametros y les asignamos memoria
					pe.setCad("t" + temp);
					temp++;
					RESULT = pe;
				}// si es funcion a void no apartamos ni devolvemos nada
				else{
					pos += desplazamiento;					
							
					if(!symActual2.getScope().equals("global"))
						pos += desplazamiento;					
					Output.writeLn("p = p + " + count + ";");
					Output.writeLn(symActual2.getId() + "();");
					Output.writeLn("p = p - " + count + ";");
					Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
					// push a todos los parametros y les asignamos memoria
					pe.setCad("t" + temp);
					temp++;
					RESULT = pe;
				}    	/***/
			}
			else{
				ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error, el miembro " + id2.toString() + "no es public.");
				throw new Exception("Error, el miembro " + id2.toString() + "no es public.");
			}
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
              CUP$CppParser$result = new java_cup.runtime.Symbol(67/*call*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // call ::= IDENTIFIER APAR listaargs CPAR 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		
		try{			
			ExpAttribute pe = new ExpAttribute();
			int count = 0;
			IlGen.Symbol symActual = tablaSimbolos.getFunc(id.toString(),currScope);
			//si es funcion, apartamos memoria para valor de retorno y lo devolvemos cmo expAttributte
			if(symActual==null){
				symActual = tablaSimbolos.getFunc(id.toString(),"global");
			}
			if(symActual==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Funcion " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
			}
			if(symActual.getSize() != la.size() && symActual.getSize() != -1){
				ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error: Numero de parametros invalido para la llamada a " + id.toString());
				throw new Exception("Error: Numero de parametros invalido para la llamada");				
			}
			if(symActual.getType().getType() != SymTab.T_VOID){
				
				//pos += desplazamiento;	
				desplazamiento++; // apartamos memoria para el valor de retorno
				count = 1;
				Iterator i = la.iterator();
				ExpAttribute eactual;				
				while(i.hasNext()){
					eactual = (ExpAttribute) i.next();
					Output.writeLn("t" + temp +" = p + " + count/*s.getPosition()*/ + ";");
    				temp++;
					Output.writeLn("STACK[ t" + (temp - 1) + "] = " + eactual.getCad() +";");// obtenemos
					//desplazamiento ++;
					count ++;
				}			
				//if(!symActual.getScope().equals("global"))
					//pos += desplazamiento;				
				Output.writeLn("p = p + " + count + ";");
				//desplazamiento += count;
				Output.writeLn(symActual.getId() + "();");
				Output.writeLn("p = p - " + count + ";");
				//desplazamiento -= count;
				Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
				// push a todos los parametros y les asignamos memoria
    				pe.setCad("t" + temp);
    				temp++;
    				RESULT = pe;
    			}// si es funcion a void no apartamos ni devolvemos nada
    			else{
    				pos += desplazamiento;
				Iterator i = la.iterator();
				ExpAttribute eactual;				
				while(i.hasNext()){
					eactual = (ExpAttribute) i.next();	
					Output.writeLn("t" + temp +" = p + " + count/*s.getPosition()*/ + ";");
    				temp++;			
					Output.writeLn("STACK[ t" + (temp - 1) + "] = " + eactual.getCad() +";");// obtenemos
					//desplazamiento ++;
					count ++;
				}			
				if(!symActual.getScope().equals("global"))
					pos += desplazamiento;					
				Output.writeLn("p = p + " + count + ";");
				Output.writeLn(symActual.getId() + "();");
				Output.writeLn("p = p - " + count + ";");
				Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
				// push a todos los parametros y les asignamos memoria
    				pe.setCad("t" + temp);
    				temp++;
    				RESULT = pe;
    			}    		
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(67/*call*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // call ::= IDENTIFIER call_mrk APAR CPAR 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		
		try{
			ExpAttribute pe = new ExpAttribute();
			int count = 0;
			IlGen.Symbol symActual = tablaSimbolos.getFunc(id.toString(),currScope);
			//si es funcion, apartamos memoria para valor de retorno y lo devolvemos cmo expAttributte
			if(symActual==null){
				symActual = tablaSimbolos.getFunc(id.toString(),"global");
			}
			if(symActual==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Funcion " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
			}
			if(symActual.getType().getType() != tablaSimbolos.T_VOID){
				desplazamiento++; // apartamos memoria para el valor de retorno
				Output.writeLn(symActual.getId() + "();");
				Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
    				pe.setCad("t" + temp);
    				temp++;
    				desplazamiento--;
    				RESULT = pe;
    			}// si es funcion a void no apartamos ni devolvemos nada
    			else{
    				Output.writeLn(symActual.getId() + "();");
    				RESULT = null;
    			}
    		
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(67/*call*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // identifier_opt ::= IDENTIFIER 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(107/*identifier_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // identifier_opt ::= 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(107/*identifier_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // p_inic ::= 
            {
              Integer RESULT = null;
		Output.writeLn("Linic" + (etiqInic) + ":");			
			etiqInic++;
			RESULT = new Integer(etiqInic - 1);
              CUP$CppParser$result = new java_cup.runtime.Symbol(120/*p_inic*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // for_update ::= variable_assignment 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(105/*for_update*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // for_update_opt ::= for_update 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(104/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // for_update_opt ::= 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(104/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // for_init ::= variable_assignment 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(103/*for_init*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // for_init_opt ::= for_init 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(102/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // for_init_opt ::= 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(102/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // for_statement_no_short_if ::= FOR p_inic APAR for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt CPAR iev statement_no_short_if 
            {
              ExpAttribute RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).value;
		Output.writeLn("goto(" + "LInic" + pe.toString() + ");");
              CUP$CppParser$result = new java_cup.runtime.Symbol(101/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // for_statement ::= FOR p_inic APAR for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt CPAR iev statement NT$0 FOR p_inic APAR for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt CPAR iev block 
            {
              ExpAttribute RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-11)).value != null )
                RESULT = (ExpAttribute) ((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-11)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-21)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-21)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-21)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).value;
		Output.writeLn("goto " + "LInic" + p.toString() + ";");
              CUP$CppParser$result = new java_cup.runtime.Symbol(100/*for_statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-22)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // NT$0 ::= 
            {
              Object RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-9)).value;
Output.writeLn("goto " + "LInic" + pe.toString() + ";");
              CUP$CppParser$result = new java_cup.runtime.Symbol(122/*NT$0*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // do_statement ::= DO p_inic iev statement WHILE APAR expression CPAR SEMICOLON 
            {
              ExpAttribute RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-7)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-7)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-7)).value;
		Output.writeLn("goto " + "LInic" + pe.toString() + ";");
              CUP$CppParser$result = new java_cup.runtime.Symbol(99/*do_statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // while_statement_no_short_if ::= WHILE p_inic APAR expression CPAR iev statement_no_short_if 
            {
              ExpAttribute RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).value;
		Output.writeLn("goto " + "LInic" + pe.toString() + ";");
              CUP$CppParser$result = new java_cup.runtime.Symbol(98/*while_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // while_statement ::= WHILE p_inic APAR expression CPAR iev block fev 
            {
              ExpAttribute RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-6)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-6)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-6)).value;
		Output.writeLn("goto " + "LInic" + pe.toString() + ";");
              CUP$CppParser$result = new java_cup.runtime.Symbol(97/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // while_statement ::= WHILE p_inic APAR expression CPAR iev statement 
            {
              ExpAttribute RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).value;
		Output.writeLn("goto " + "LInic" + pe.toString() + ";");
              CUP$CppParser$result = new java_cup.runtime.Symbol(97/*while_statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // loop_stmnt ::= for_statement fev 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(85/*loop_stmnt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // loop_stmnt ::= while_statement fev 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(85/*loop_stmnt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // switch_label ::= DEFAULT COLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(96/*switch_label*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // switch_label ::= CASE literal COLON 
            {
              ExpAttribute RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 Output.writeLn(" if (" + switchExp.getCad() + " == " + e2.getCad() + ") goto L" + (etiqActual + 1)+";");
     		Output.writeLn("goto L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		RESULT = new ExpAttribute(); 
     		
              CUP$CppParser$result = new java_cup.runtime.Symbol(96/*switch_label*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // switch_labels ::= switch_labels switch_label 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(95/*switch_labels*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // switch_labels ::= switch_label 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(95/*switch_labels*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // switch_block_statement_group ::= switch_labels iev fef BREAK SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(94/*switch_block_statement_group*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // switch_block_statement_group ::= switch_labels iev statements fef BREAK SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(94/*switch_block_statement_group*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // switch_block_statement_groups ::= switch_block_statement_groups switch_block_statement_group 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(93/*switch_block_statement_groups*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // switch_block_statement_groups ::= switch_block_statement_group 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(93/*switch_block_statement_groups*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // switch_block ::= ALLAVE CLLAVE 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(92/*switch_block*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // switch_block ::= ALLAVE switch_labels CLLAVE 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(92/*switch_block*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // switch_block ::= ALLAVE switch_block_statement_groups CLLAVE 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(92/*switch_block*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // switch_block ::= ALLAVE switch_block_statement_groups switch_labels CLLAVE 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(92/*switch_block*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // switch_header ::= SWITCH APAR expression CPAR 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 switchExp = e;
              CUP$CppParser$result = new java_cup.runtime.Symbol(121/*switch_header*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // switch_statement ::= switch_header switch_block write_etiq_sig 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(91/*switch_statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // if_then_else_statement_no_short_if ::= IF APAR expression iev CPAR statement_no_short_if fef fev ELSE ief statement_no_short_if fef write_etiq_sig 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(90/*if_then_else_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // if_then_else_statement ::= IF APAR expression iev CPAR statement_no_short_if fef fev ELSE ief statement fef write_etiq_sig 
            {
              ExpAttribute RESULT = null;
		
              CUP$CppParser$result = new java_cup.runtime.Symbol(89/*if_then_else_statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // write_etiq_sig ::= 
            {
              Integer RESULT = null;
		Output.writeLn("Lsig" + (etiqSig)+":"); etiqSig++;	RESULT = new Integer(etiqSig);
              CUP$CppParser$result = new java_cup.runtime.Symbol(119/*write_etiq_sig*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // fef ::= 
            {
              Integer RESULT = null;
		Output.writeLn("goto " + "Lsig" + (etiqSig) + ";");
		//etiqSig++;
		Output.writeLn(relleno.sacarFalsas());
		RESULT = etiqSig;
              CUP$CppParser$result = new java_cup.runtime.Symbol(118/*fef*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ief ::= 
            {
              Integer RESULT = null;
		Output.writeLn(relleno.sacarVerdaderas());
              CUP$CppParser$result = new java_cup.runtime.Symbol(117/*ief*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // fev ::= 
            {
              Integer RESULT = null;
		Output.writeLn(relleno.sacarFalsas());
              CUP$CppParser$result = new java_cup.runtime.Symbol(116/*fev*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // iev ::= 
            {
              Integer RESULT = null;
		Output.writeLn(relleno.sacarVerdaderas());
              CUP$CppParser$result = new java_cup.runtime.Symbol(115/*iev*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // if_then_statement ::= IF APAR expression iev CPAR block ief 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(88/*if_then_statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // if_then_statement ::= IF APAR expression iev CPAR statement ief 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(88/*if_then_statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // block ::= ALLAVE CLLAVE 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(83/*block*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // block ::= ALLAVE statements CLLAVE 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(83/*block*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // statement_no_short_if ::= for_statement_no_short_if 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(87/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // statement_no_short_if ::= while_statement_no_short_if 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(87/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(87/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // statement_no_short_if ::= block 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(87/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sel_stmnt ::= switch_statement 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(86/*sel_stmnt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sel_stmnt ::= if_then_else_statement 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(86/*sel_stmnt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sel_stmnt ::= if_then_statement 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(86/*sel_stmnt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // variable_assignment ::= ASTERISK IDENTIFIER MINUS MINUS 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
			
	try{
		IlGen.Symbol s= tablaSimbolos.getVar(new String(id.toString()),currScope);
		if(s==null){
			s = tablaSimbolos.getVar(new String(id.toString()),"global");
		}
		if(s==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Variable " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
		}
		String str = new String();
		if(s.getScope().equals("global")){
			//devolvemos string con nombre de variable global
			str = new String(s.getId());
		}
		else{	  				// devolvemos pila
			Output.writeLn("t" + temp +" = " + s.getPosition() + " + " + pos + ";");
			temp++;
			str = new String("STACK[ t" + (temp - 1) + "];");		
		}
		//RESULT = pe;
		Output.writeLn(str + " = " + str + " - 1;");
	}
	catch(Exception e){
		ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
		throw(e);
	}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(84/*variable_assignment*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // variable_assignment ::= IDENTIFIER INC 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
			
	try{
		IlGen.Symbol s= tablaSimbolos.getVar(new String(id.toString()),currScope);
		if(s==null){
			s = tablaSimbolos.getVar(new String(id.toString()),"global");
		}
		if(s==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Variable " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
		}
		String str = new String();
		if(s.getScope().equals("global")){
			//devolvemos string con nombre de variable global
			str = new String(s.getId());
		}
		else{	  				// devolvemos pila
			Output.writeLn("t" + temp +" = " + s.getPosition() + " + " + pos + ";");
			temp++;
			str = new String("STACK[ t" + (temp - 1) + "];");		
		}
		//RESULT = pe;
		Output.writeLn(str + " = " +str + " + 1;");
	}
	catch(Exception e){
		ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
		throw(e);
	}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(84/*variable_assignment*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // variable_assignment ::= matrix_head range_expl assignment_operator expression 
            {
              ExpAttribute RESULT = null;
		int mhleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int mhright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		Symbol mh = (Symbol)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ArrayList re = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 
		ExpAttribute pe = new ExpAttribute();
    		try{
    			IlGen.Symbol s = mh;
    			if(s.getScope().equals("global")){
    				//devolvemos string con nombre de variable global
    				pe.setCad(new String(s.getId()));
				pe.setTipo(s.getType().getType());
    			}
    			else{	  				// devolvemos pila
				Output.writeLn("t" + temp +" = " +((ExpAttribute)re.get(re.size()-1)).getCad() + " + p" + /*pos + */";");
    				temp++;
    				Output.writeLn("t" + temp +" = " +s.getPosition() + " + t" + (temp-1) + ";");
    				temp++;
    				Output.writeLn("STACK[ t" + (temp - 1) + "] = "+ e1.getCad() +";");
    				//Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    				//temp++;
    				pe.setCad("t" + (temp-1));
				pe.setTipo(s.getType().getType());
    			}
    			RESULT = pe;
    		}
    		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(84/*variable_assignment*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // variable_assignment ::= ASTERISK IDENTIFIER assignment_operator expression 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
	try{
		IlGen.Symbol s = tablaSimbolos.getVar(new String(id.toString()),currScope);
		if(s==null){
			s = tablaSimbolos.getVar(new String(id.toString()),"global");
		}
		if(s==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Variable " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
		}
		String str = new String();
		if(s.getScope().equals("global")){
			//devolvemos string con nombre de variable global
			str = new String(s.getId());
		}
		else{	  				// devolvemos pila
			Output.writeLn("t" + temp +" = " + s.getPosition() + " + " + pos + ";");
			temp++;
			str = new String("STACK[ t" + (temp - 1) + "];");		
		}
		//RESULT = pe;
		Output.writeLn(str + " = " + e.getCad() + ";");
	}
	catch(Exception ex){
		ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),ex.toString());
		throw(ex);
	}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(84/*variable_assignment*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // variable_assignment ::= IDENTIFIER assignment_operator expression 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
	try{
		IlGen.Symbol s = tablaSimbolos.getVar(new String(id.toString()),currScope);
		if(s==null){
			s = tablaSimbolos.getVar(new String(id.toString()),"global");
		}
		if(s==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Variable " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
		}
		String str = new String();
		if(s.getScope().equals("global")){
			//devolvemos string con nombre de variable global
			str = new String(s.getId());
		}
		else{	  		
					// devolvemos pila
			Output.writeLn("t" + temp +" = p + " + s.getPosition() + ";");
    				temp++;
			//Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    			//	temp++;
    			//Output.writeLn("STACK[ t" + (temp - 1) + "] = "+ e.getCad() +";");
			//str = new String("t" + (temp - 1));		
			str = new String("STACK[ t" + (temp - 1) + "]");		
		}
		//RESULT = pe;
		Output.writeLn(str + " = " + e.getCad() + ";");
	}
	catch(Exception exc){
		ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),exc.toString());
		throw(exc);
	}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(84/*variable_assignment*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // returnstmt ::= RETURN expression 
            {
              ExpAttribute RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
		Output.writeLn("STACK[ p] = " + e.getCad() +";");
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(43/*returnstmt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // statement ::= returnstmt SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(80/*statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // statement ::= call SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(80/*statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // statement ::= sel_stmnt 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(80/*statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // statement ::= loop_stmnt 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(80/*statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statement ::= variable_assignment SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(80/*statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statement ::= variable_declaration SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(80/*statement*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // statements ::= statement 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(81/*statements*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // statements ::= statements statement 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(81/*statements*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // variable_declarations ::= variable_declaration 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(8/*variable_declarations*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // variable_declarations ::= variable_declarations variable_declaration 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(8/*variable_declarations*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statements_opt ::= statements 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(82/*statements_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statements_opt ::= 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(82/*statements_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // variable_declarations_opt ::= variable_declarations 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(9/*variable_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variable_declarations_opt ::= 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(9/*variable_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // func_block ::= statements 
            {
              ExpAttribute RESULT = null;
		
if(currScope.equals("global")){
		Output.writeLn("}");
}

              CUP$CppParser$result = new java_cup.runtime.Symbol(79/*func_block*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // func_block_opt ::= ALLAVE func_block CLLAVE 
            {
              ExpAttribute RESULT = null;
		desplazamiento = 0;
              CUP$CppParser$result = new java_cup.runtime.Symbol(78/*func_block_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // func_block_opt ::= ALLAVE CLLAVE 
            {
              ExpAttribute RESULT = null;
		desplazamiento = 0;
              CUP$CppParser$result = new java_cup.runtime.Symbol(78/*func_block_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // argdef ::= datatype IDENTIFIER range_list 
            {
              ExpAttribute RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ArrayList rl = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
			
		try{
			tablaSimbolos.addArray(id.toString(),rl,currScope,dt,currAccess,desplazamiento);
			desplazamiento += rl.size();
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(77/*argdef*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // argdef ::= datatype ASTERISK IDENTIFIER 
            {
              ExpAttribute RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 try{
			ArrayList il = new ArrayList();
			il.add(new String(id.toString()));
			tablaSimbolos.addPointers(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento++;
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString());
			throw(e);
		}	
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(77/*argdef*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // argdef ::= datatype IDENTIFIER 
            {
              ExpAttribute RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
			try{
			ArrayList il = new ArrayList();
			il.add(new String(id.toString()));
			tablaSimbolos.addVariables(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento++;
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString());
			throw(e);
		}	
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(77/*argdef*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // listargdefs ::= argdef 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(76/*listargdefs*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // listargdefs ::= listargdefs COMA argdef 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(76/*listargdefs*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // listargdefs_opt ::= listargdefs 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(75/*listargdefs_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // listargdefs_opt ::= 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(75/*listargdefs_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // func_body ::= APAR listargdefs_opt CPAR func_block_opt 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(74/*func_body*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // func_head ::= datatype IDENTIFIER 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 currScope = new String(id.toString()) ; 
			currFunc = new String(id.toString());
			// desplazamiento = 0; //Output.writeLn("proc " + id.toString() + ":");
Output.writeLn("void " + id.toString() + "(){");


              CUP$CppParser$result = new java_cup.runtime.Symbol(73/*func_head*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function_def ::= func_head func_body 
            {
              ExpAttribute RESULT = null;
		 Output.writeLn("}");currScope = new String("global"); /*desplazamiento = 0;*/ contadorparams = 0;
              CUP$CppParser$result = new java_cup.runtime.Symbol(70/*function_def*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // member_head ::= IDENTIFIER SCOPE IDENTIFIER 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 currScope = new String(id.toString()); pos -= desplazamiento; desplazamiento = 0;
              CUP$CppParser$result = new java_cup.runtime.Symbol(72/*member_head*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // member_head ::= datatype IDENTIFIER SCOPE IDENTIFIER 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 currScope = new String(id.toString()); desplazamiento = 0;
              CUP$CppParser$result = new java_cup.runtime.Symbol(72/*member_head*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // member_def ::= member_head func_body 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(71/*member_def*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // definition ::= member_def 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(69/*definition*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // definition ::= function_def 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(69/*definition*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // definitions ::= definition 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(4/*definitions*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // definitions ::= definitions definition 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(4/*definitions*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ptr_operator_seq_opt ::= ptr_operator ptr_operator_seq_opt 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(12/*ptr_operator_seq_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ptr_operator_seq_opt ::= 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(12/*ptr_operator_seq_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ptr_operator_seq ::= ptr_operator ptr_operator_seq 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(11/*ptr_operator_seq*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ptr_operator_seq ::= ptr_operator 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(11/*ptr_operator_seq*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ptr_operator ::= ASTERISK 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(10/*ptr_operator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ptr_operator ::= AMPERSAND 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(10/*ptr_operator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // constant_expression ::= conditional_expression 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(66/*constant_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= logical_or_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(65/*expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // mark_or ::= 
            {
              ExpAttribute RESULT = null;
		Output.writeLn(relleno.sacarFalsas());
              CUP$CppParser$result = new java_cup.runtime.Symbol(112/*mark_or*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // mark_and ::= 
            {
              ExpAttribute RESULT = null;
		Output.writeLn(relleno.sacarVerdaderas());
              CUP$CppParser$result = new java_cup.runtime.Symbol(111/*mark_and*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // logical_or_expression ::= logical_or_expression LOG_OR mark_or logical_and_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 RESULT = e2;
              CUP$CppParser$result = new java_cup.runtime.Symbol(60/*logical_or_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // logical_or_expression ::= logical_and_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(60/*logical_or_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // logical_and_expression ::= logical_and_expression LOG_AND mark_and equality_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 RESULT = e2;
              CUP$CppParser$result = new java_cup.runtime.Symbol(61/*logical_and_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // logical_and_expression ::= equality_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(61/*logical_and_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // equality_expression ::= equality_expression NE relational_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		Output.writeLn("if (" + e1.getCad() + " != " + e2.getCad() + ") goto " + "L" + (etiqActual + 1)+";");
     		Output.writeLn("goto " + "L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		 RESULT = e2; 
     		
              CUP$CppParser$result = new java_cup.runtime.Symbol(56/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // equality_expression ::= equality_expression EQ relational_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		Output.writeLn("if (" + e1.getCad() + " == " + e2.getCad() + ") goto " + "L" + (etiqActual + 1)+";");
     		Output.writeLn("goto " + "L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		 RESULT = e2; 
     		
              CUP$CppParser$result = new java_cup.runtime.Symbol(56/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // equality_expression ::= relational_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(56/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // relational_expression ::= relational_expression GE additive_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		Output.writeLn("if (" + e1.getCad() + " >= " + e2.getCad() + ") goto " + "L" + (etiqActual + 1)+";");
     		Output.writeLn("goto " + "L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		 RESULT = e2; 
     		
              CUP$CppParser$result = new java_cup.runtime.Symbol(55/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // relational_expression ::= relational_expression LE additive_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		Output.writeLn("if (" + e1.getCad() + " <= " + e2.getCad() + ") goto " + "L" + (etiqActual + 1)+";");
     		Output.writeLn("goto " + "L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		 RESULT = e2; 
     		
              CUP$CppParser$result = new java_cup.runtime.Symbol(55/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // relational_expression ::= relational_expression GT additive_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		Output.writeLn("if (" + e1.getCad() + " > " + e2.getCad() + ") goto " + "L" + (etiqActual + 1)+";");
     		Output.writeLn("goto " + "L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		 RESULT = e2; 
     		
              CUP$CppParser$result = new java_cup.runtime.Symbol(55/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // relational_expression ::= relational_expression LT additive_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		Output.writeLn("if (" + e1.getCad() + " < " + e2.getCad() + ") goto " + "L" + (etiqActual + 1)+";");
     		Output.writeLn("goto " + "L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		 RESULT = e2; 
     		
              CUP$CppParser$result = new java_cup.runtime.Symbol(55/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // relational_expression ::= additive_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(55/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		if(SymTab.tiposCompatibles(e1.getTipo(),e2.getTipo())){
     		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e1.getTipo());  
     		 Output.writeLn(pe.getCad() + " = " + e1.getCad() + " - " + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
     		}
     		else{
     			ErrorManager.agregarErrorSemantico(s.getPosLine(),s.getPosChar(),"Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     			throw new Exception("Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     		}
     	
              CUP$CppParser$result = new java_cup.runtime.Symbol(53/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		if(SymTab.tiposCompatibles(e1.getTipo(),e2.getTipo())){
     		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e1.getTipo());  
     		 Output.writeLn(pe.getCad() + " = " + e1.getCad() + " + " + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
     		}
     		else{
     			ErrorManager.agregarErrorSemantico(s.getPosLine(),s.getPosChar(),"Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     			throw new Exception("Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     		}
     	
              CUP$CppParser$result = new java_cup.runtime.Symbol(53/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // additive_expression ::= multiplicative_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1; 
              CUP$CppParser$result = new java_cup.runtime.Symbol(53/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // multiplicative_expression ::= multiplicative_expression PERCENT cast_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		if(SymTab.tiposCompatibles(e1.getTipo(),e2.getTipo())){
     		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e1.getTipo());  
     		 Output.writeLn(pe.getCad() + " = " + e1.getCad() + " % " + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
     		}
     		else{
     			ErrorManager.agregarErrorSemantico(s.getPosLine(),s.getPosChar(),"Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     			throw new Exception("Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     		}
     	
              CUP$CppParser$result = new java_cup.runtime.Symbol(52/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // multiplicative_expression ::= multiplicative_expression SLASH cast_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		if(SymTab.tiposCompatibles(e1.getTipo(),e2.getTipo())){
     		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e1.getTipo());  
     		 Output.writeLn(pe.getCad() + " = " + e1.getCad() + " / " + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
     		 }
     		else{
     			ErrorManager.agregarErrorSemantico(s.getPosLine(),s.getPosChar(),"Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     			throw new Exception("Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     		}
     	
              CUP$CppParser$result = new java_cup.runtime.Symbol(52/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // multiplicative_expression ::= multiplicative_expression ASTERISK cast_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
     		if(SymTab.tiposCompatibles(e1.getTipo(),e2.getTipo())){
     		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e1.getTipo()); 
     		 Output.writeLn(pe.getCad() + " = " + e1.getCad() + " * " + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
     		 }
     		else{
     			ErrorManager.agregarErrorSemantico(s.getPosLine(),s.getPosChar(),"Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     			throw new Exception("Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     		}
     	
              CUP$CppParser$result = new java_cup.runtime.Symbol(52/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // multiplicative_expression ::= cast_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(52/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cast_expression ::= unary_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(50/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // new_initializer_opt ::= APAR listaargs CPAR 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(49/*new_initializer_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // new_initializer_opt ::= 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(49/*new_initializer_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // direct_new_declarator ::= direct_new_declarator ACOR constant_expression CCOR 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(48/*direct_new_declarator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // direct_new_declarator ::= ACOR expression CCOR 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(48/*direct_new_declarator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // new_declarator ::= direct_new_declarator 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(47/*new_declarator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // new_declarator ::= ptr_operator new_declarator 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(47/*new_declarator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // new_type_id ::= datatype new_declarator 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(46/*new_type_id*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // new_type_id ::= datatype ptr_operator_seq_opt 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(46/*new_type_id*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // new_expression ::= NEW new_type_id new_initializer_opt 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(45/*new_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // delete_expression ::= DELETE cast_expression 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(44/*delete_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unary_expression ::= delete_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(42/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unary_expression ::= new_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(42/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unary_expression ::= SIZEOF unary_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(42/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unary_expression ::= NOTLOG primary_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		relleno.invertir();RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(42/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unary_expression ::= MINUS cast_expression 
            {
              ExpAttribute RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e2.getTipo()); 
     		 Output.writeLn(pe.getCad() + " = " + "0 - " + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
              CUP$CppParser$result = new java_cup.runtime.Symbol(42/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unary_expression ::= primary_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(42/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression_list ::= expression_list COMA assignment_expression 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(41/*expression_list*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_list ::= assignment_expression 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(41/*expression_list*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression_list_opt ::= expression_list 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(40/*expression_list_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_list_opt ::= 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(40/*expression_list_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // mark_e1 ::= 
            {
              ExpAttribute RESULT = null;
		 relleno.nuevaLista();/*Creamos nueva lista de V y F y las asignamos como actual*/
              CUP$CppParser$result = new java_cup.runtime.Symbol(110/*mark_e1*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // primary_expression ::= APAR mark_e1 expression CPAR 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 /*Fusionamos listas de verdadero y false*/
    					relleno.fusionarListas(); 
    					RESULT = e1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(35/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // primary_expression ::= matrix 
            {
              ExpAttribute RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute m = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = m;
              CUP$CppParser$result = new java_cup.runtime.Symbol(35/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // primary_expression ::= call 
            {
              ExpAttribute RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute c = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		RESULT = c;
              CUP$CppParser$result = new java_cup.runtime.Symbol(35/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primary_expression ::= IDENTIFIER 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
    		ExpAttribute pe = new ExpAttribute();
    		try{
    			
    			IlGen.Symbol s = tablaSimbolos.getVar(new String(id.toString()),currScope);
    			if(s==null){
    				s = tablaSimbolos.getVar(new String(id.toString()),"global");
    			}
    			if(s==null){
    				throw new Exception("Variable " + id.toString() + " no existe");
    			}
    			pe.setTipo(s.getType().getType());
    			if(s.getScope().equals("global")){
    				//devolvemos string con nombre de variable global
    				pe.setCad(new String(s.getId()));
    			}
    			else{	  				// devolvemos pila
    				Output.writeLn("t" + temp +" = p + " + s.getPosition() + ";");
    				temp++;
    				Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    				temp++;
    				pe.setCad("t" + (temp - 1));
    			}    			
    			RESULT = pe;
    		}
    		catch(Exception e){
    			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
    			throw(e);
    		}
    		
              CUP$CppParser$result = new java_cup.runtime.Symbol(35/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primary_expression ::= THIS 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(35/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primary_expression ::= literal 
            {
              ExpAttribute RESULT = null;
		int lileft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute li = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 /*ExpAttribute pe = new ExpAttribute(new String(li.toString()));*/RESULT = li;
              CUP$CppParser$result = new java_cup.runtime.Symbol(35/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // range_expl ::= ACOR expression CCOR 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 
		ArrayList ret = new ArrayList();
		/*temp++;*/ idxActual++;
		ArrElem arrElemActual = (ArrElem) idxListActual.get(idxActual);
		Output.writeLn("t" + temp +" = "+ e.getCad() + " * " + (arrElemActual.getTo() - arrElemActual.getFrom()) + ";");		
		temp++;
		ExpAttribute pe = new ExpAttribute(new String("t" + (temp - 1)),SymTab.C_ARRAY);
		ret.add(pe);
		RESULT = ret;
		//idxListActual ++;
		
              CUP$CppParser$result = new java_cup.runtime.Symbol(17/*range_expl*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // range_expl ::= range_expl ACOR expression CCOR 
            {
              ArrayList RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		ArrayList re = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 
		/*temp++;*/ idxActual++;
		Output.writeLn("t" + temp +" = " + ((ExpAttribute)re.get(re.size() - 1)).getCad() + " + " + e1.getCad() + ";");
		temp++;
		ArrElem arrElemActual;// = (ArrElem)idxListActual.get(idxActual);
		try{
			arrElemActual = (ArrElem)idxListActual.get(idxActual);
			if(arrElemActual!= null){
				//temp++;
				Output.writeLn("t" + temp +" = " + e1.getCad() + " * " + (arrElemActual.getTo() - arrElemActual.getFrom()) + ";");
				temp++;		
		//	idxActual ++;
			}
			ExpAttribute pe = new ExpAttribute(new String("t" + (temp - 1)),SymTab.C_ARRAY);
			re.add(pe);
			RESULT = re;
		}
		catch(IndexOutOfBoundsException ex1){			
			ExpAttribute pe = new ExpAttribute(new String("t" + (temp - 1)),SymTab.C_ARRAY);
			re.add(pe);
			RESULT = re;
		}
		catch(Exception ex2){
			throw ex2;
		}			
		/*
		ExpAttribute pe = new ExpAttribute(new String("$t" + (temp - 1)),SymTab.C_ARRAY);
		re.add(pe);
		RESULT = re;*/
		
              CUP$CppParser$result = new java_cup.runtime.Symbol(17/*range_expl*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // matrix_head ::= IDENTIFIER 
            {
              Symbol RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
			try{
				IlGen.Symbol symMatActual = tablaSimbolos.getVar(new String(id.toString()),currScope);
				if(symMatActual==null){
    					symMatActual = tablaSimbolos.getVar(new String(id.toString()),"global");
    				}
    				if(symMatActual==null){
    					throw new Exception("Array " + id.toString() + " no existe");
    				}
				idxListActual = (ArrayList) symMatActual.getContents();
				idxActual = 0;
				RESULT = symMatActual;
			}
			catch(Exception e){
				ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
				throw(e);
			}
              CUP$CppParser$result = new java_cup.runtime.Symbol(108/*matrix_head*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // matrix ::= matrix_head range_expl 
            {
              ExpAttribute RESULT = null;
		int mhleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int mhright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		Symbol mh = (Symbol)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ArrayList re = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 
		ExpAttribute pe = new ExpAttribute();
    		try{
    			IlGen.Symbol s = mh;
    			if(s.getScope().equals("global")){
    				//devolvemos string con nombre de variable global
    				pe.setCad(new String(s.getId()));
				pe.setTipo(s.getType().getType());
    			}
    			else{	  				// devolvemos pila
				Output.writeLn("t" + temp +" = " +((ExpAttribute)re.get(re.size()-1)).getCad() + " + p" + /*pos + */";");
    				temp++;
    				Output.writeLn("t" + temp +" = " +s.getPosition() + " + t" + (temp-1) + ";");
    				temp++;
    				Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    				temp++;
    				pe.setCad("t" + (temp-1));
				pe.setTipo(s.getType().getType());
    			}
    			RESULT = pe;
    		}
    		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(68/*matrix*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= NULL_LITERAL 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(null,SymTab.T_VOID); RESULT = pe;
              CUP$CppParser$result = new java_cup.runtime.Symbol(34/*literal*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= FALSE 
            {
              ExpAttribute RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue f = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(f.toString()),SymTab.T_BOOL); RESULT = pe;
              CUP$CppParser$result = new java_cup.runtime.Symbol(34/*literal*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= TRUE 
            {
              ExpAttribute RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(t.toString()),SymTab.T_BOOL); RESULT = pe;
              CUP$CppParser$result = new java_cup.runtime.Symbol(34/*literal*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= STRING_LITERAL 
            {
              ExpAttribute RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue st = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(st.toString()),SymTab.T_STRING); RESULT = pe;
              CUP$CppParser$result = new java_cup.runtime.Symbol(34/*literal*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= FLOATING_LITERAL 
            {
              ExpAttribute RESULT = null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue ft = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(ft.toString()),SymTab.T_FLOAT); RESULT = pe;
              CUP$CppParser$result = new java_cup.runtime.Symbol(34/*literal*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= CHAR_LITERAL 
            {
              ExpAttribute RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue ct = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(ct.toString()),SymTab.T_CHAR); RESULT = pe;
              CUP$CppParser$result = new java_cup.runtime.Symbol(34/*literal*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= INTEGER_LITERAL 
            {
              ExpAttribute RESULT = null;
		int itleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue it = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(it.toString()),SymTab.T_INT); RESULT = pe;
              CUP$CppParser$result = new java_cup.runtime.Symbol(34/*literal*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constructor_declaration ::= IDENTIFIER APAR CPAR 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		
		try{
			IlGen.Symbol s = tablaSimbolos.addConstructor(new String(id.toString()),currScope,0,new ArrayList());	
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(31/*constructor_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // constructor_declaration ::= IDENTIFIER APAR params CPAR 
            {
              ExpAttribute RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 
		try{
			IlGen.Symbol s = tablaSimbolos.addConstructor(new String(ident.toString()),currScope,contadorparams,p);
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(ident.getPosLine(),ident.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(31/*constructor_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // constructor_declaration ::= 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(31/*constructor_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // access_type_opt ::= PUBLIC 
            {
              ExpAttribute RESULT = null;
		currAccess = SymTab.A_PUBLIC;
              CUP$CppParser$result = new java_cup.runtime.Symbol(28/*access_type_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // access_type_opt ::= PRIVATE 
            {
              ExpAttribute RESULT = null;
		currAccess = SymTab.A_PRIVATE;
              CUP$CppParser$result = new java_cup.runtime.Symbol(28/*access_type_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // access_type_opt ::= 
            {
              ExpAttribute RESULT = null;
		currAccess = SymTab.A_PRIVATE;
              CUP$CppParser$result = new java_cup.runtime.Symbol(28/*access_type_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // member ::= variable_declaration SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(30/*member*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // member ::= function_declaration SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(30/*member*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // member ::= constructor_declaration SEMICOLON 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(30/*member*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // members ::= member 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(29/*members*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // members ::= members member 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(29/*members*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // member_list ::= access_type_opt COLON members 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(27/*member_list*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // member_lists ::= member_list 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(26/*member_lists*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // member_lists ::= member_lists member_list 
            {
              ExpAttribute RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(26/*member_lists*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // class_body ::= ALLAVE member_lists CLLAVE 
            {
              ExpAttribute RESULT = null;
		
		try{
			IlGen.Symbol s = tablaSimbolos.addClass(currScope,new String("global"));		
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString()/*"Error: Funcion " +
			 ident.toString() +" ya definida previamente"*/);
			 throw(e);
		}
              CUP$CppParser$result = new java_cup.runtime.Symbol(33/*class_body*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // class_head ::= CLASS IDENTIFIER 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		currScope = new String(id.toString());desplazamiento = 0;
              CUP$CppParser$result = new java_cup.runtime.Symbol(32/*class_head*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // class_declaration ::= class_head class_body 
            {
              ExpAttribute RESULT = null;
		currAccess = -1; currScope = new String("global"); desplazamiento = 0;
              CUP$CppParser$result = new java_cup.runtime.Symbol(25/*class_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // assignment_operator ::= ASS_SUB 
            {
              Integer RESULT = null;
		RESULT = new Integer(5);
              CUP$CppParser$result = new java_cup.runtime.Symbol(23/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // assignment_operator ::= ASS_MUL 
            {
              Integer RESULT = null;
		RESULT = new Integer(4);
              CUP$CppParser$result = new java_cup.runtime.Symbol(23/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment_operator ::= ASS_MOD 
            {
              Integer RESULT = null;
		RESULT = new Integer(3);
              CUP$CppParser$result = new java_cup.runtime.Symbol(23/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment_operator ::= ASS_DIV 
            {
              Integer RESULT = null;
		RESULT = new Integer(2);
              CUP$CppParser$result = new java_cup.runtime.Symbol(23/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment_operator ::= ASS_ADD 
            {
              Integer RESULT = null;
		RESULT = new Integer(1);
              CUP$CppParser$result = new java_cup.runtime.Symbol(23/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment_operator ::= EQUALS 
            {
              Integer RESULT = null;
		RESULT = new Integer(0);
              CUP$CppParser$result = new java_cup.runtime.Symbol(23/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // id_list ::= IDENTIFIER 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ArrayList res = new ArrayList(); res.add(new String(id.toString())); RESULT = res;
              CUP$CppParser$result = new java_cup.runtime.Symbol(14/*id_list*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // id_list ::= id_list COMA IDENTIFIER 
            {
              ArrayList RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ArrayList id1 = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		id1.add(id2.toString()); RESULT = id1;
              CUP$CppParser$result = new java_cup.runtime.Symbol(14/*id_list*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // range ::= ACOR INTEGER_LITERAL CCOR 
            {
              ArrElem RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue il = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		ArrElem ar = new ArrElem(0,il.toInt()); RESULT = ar;
              CUP$CppParser$result = new java_cup.runtime.Symbol(24/*range*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // range_list ::= range 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ArrElem r = (ArrElem)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		ArrayList res = new ArrayList(); res.add(r); RESULT = res;
              CUP$CppParser$result = new java_cup.runtime.Symbol(16/*range_list*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // range_list ::= range_list range 
            {
              ArrayList RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ArrayList rl = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ArrElem r = (ArrElem)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		rl.add(r); RESULT = rl;
              CUP$CppParser$result = new java_cup.runtime.Symbol(16/*range_list*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declaration ::= datatype IDENTIFIER range_list 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ArrayList rl = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
			
		try{
			IlGen.Symbol s = tablaSimbolos.addArray(new String(id.toString()),rl,currScope,dt,currAccess,desplazamiento);
			Iterator i = rl.iterator();
			ArrElem aractual;
			int sizeActual = 1;
			while(i.hasNext()){
				aractual = (ArrElem)(i.next());
				sizeActual *= aractual.getFrom() - aractual.getTo();				
			}
			if(!currScope.equals("global"))
				desplazamiento += sizeActual;//s.getSize() + 1;
			s.setSize(sizeActual);
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(7/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_declaration ::= datatype ASTERISK IDENTIFIER assignment_operator expression 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		try{
			ArrayList il = new ArrayList();
			il.add(id);
		IlGen.Symbol s = tablaSimbolos.addPointers(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento += 1;
			String str = new String();
			if(s.getScope().equals("global")){
				//devolvemos string con nombre de variable global
				str = new String(s.getId());
			}
			else{	  				// devolvemos pila
				Output.writeLn("t" + temp +" = p + " + s.getPosition() + ";");
    				temp++;
    				//Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    				//temp++;
				str = new String("STACK[ t" + (temp - 1) + "]");		
			}
		//RESULT = pe;
		Output.writeLn(str + " = " + e.getCad() + ";");
		}
		catch(Exception exc){
			ErrorManager.agregarErrorSemantico(0,0,exc.toString());
			throw(exc);
		}	
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(7/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_declaration ::= datatype IDENTIFIER assignment_operator expression 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
			
		try{
			ArrayList il = new ArrayList();
			il.add(new String(id.toString()));
			IlGen.Symbol s = tablaSimbolos.addVariables(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento += 1;
			String str = new String();
			if(s.getScope().equals("global")){
				//devolvemos string con nombre de variable global
				str = new String(s.getId());
			}
			else{	  				// devolvemos pila
				Output.writeLn("t" + temp +" = p + " + s.getPosition() + ";");
    				temp++;
    				//Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    				
    				//temp++;
				str = new String("STACK[ t" + (temp - 1) + "]");		
			}
		//RESULT = pe;
		Output.writeLn(str + " = " + e.getCad() + ";");
		}
		catch(Exception exc){
			ErrorManager.agregarErrorSemantico(0,0,exc.toString());
			throw(exc);
		}
		
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(7/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable_declaration ::= datatype ASTERISK id_list 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
		try{
			IlGen.Symbol s = tablaSimbolos.addPointers(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento += il.size();
			
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString());
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(7/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_declaration ::= datatype id_list 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		
		try{
			IlGen.Symbol s = tablaSimbolos.addVariables(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento += il.size();
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString());
			throw(e);
		}
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(7/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // datatype ::= IDENTIFIER 
            {
              DataType RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 RESULT = new DataType(new String(id.toString()),true,tablaSimbolos.getSize(id.toString()));
              CUP$CppParser$result = new java_cup.runtime.Symbol(21/*datatype*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // datatype ::= VOID 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_VOID);
              CUP$CppParser$result = new java_cup.runtime.Symbol(21/*datatype*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // datatype ::= FLOAT 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_FLOAT);
              CUP$CppParser$result = new java_cup.runtime.Symbol(21/*datatype*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // datatype ::= CHAR 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_CHAR);
              CUP$CppParser$result = new java_cup.runtime.Symbol(21/*datatype*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // datatype ::= BOOL 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_BOOL);
              CUP$CppParser$result = new java_cup.runtime.Symbol(21/*datatype*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // datatype ::= INT 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_INT);
              CUP$CppParser$result = new java_cup.runtime.Symbol(21/*datatype*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // datatype_opt ::= datatype 
            {
              DataType RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(22/*datatype_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // datatype_opt ::= 
            {
              DataType RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(22/*datatype_opt*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param ::= datatype AMPERSAND 
            {
              IlGen.Symbol RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 dt.setReference(true);  RESULT = new IlGen.Symbol(dt,SymTab.C_VAR); 
              CUP$CppParser$result = new java_cup.runtime.Symbol(20/*param*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param ::= datatype ASTERISK 
            {
              IlGen.Symbol RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 dt.setReference(true);  RESULT = new IlGen.Symbol(dt,SymTab.C_VAR); 
              CUP$CppParser$result = new java_cup.runtime.Symbol(20/*param*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param ::= datatype 
            {
              IlGen.Symbol RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		  RESULT = new IlGen.Symbol(dt,SymTab.C_VAR); 
              CUP$CppParser$result = new java_cup.runtime.Symbol(20/*param*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // params ::= param 
            {
              ArrayList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		IlGen.Symbol p1 = (IlGen.Symbol)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 ArrayList res = new ArrayList(); res.add(p1); contadorparams = res.size(); RESULT = res;
              CUP$CppParser$result = new java_cup.runtime.Symbol(13/*params*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // params ::= params COMA param 
            {
              ArrayList RESULT = null;
		int p2left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		ArrayList p2 = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right;
		IlGen.Symbol p1 = (IlGen.Symbol)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).value;
		 p2.add(p1); contadorparams = p2.size(); RESULT = p2;
              CUP$CppParser$result = new java_cup.runtime.Symbol(13/*params*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_declaration ::= datatype IDENTIFIER APAR CPAR 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-2)).value;
		
		try{
			Symbol s = tablaSimbolos.addFunction(new String(id.toString()),currScope,dt,0,new ArrayList(),currAccess);
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
              CUP$CppParser$result = new java_cup.runtime.Symbol(6/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_declaration ::= datatype IDENTIFIER APAR params CPAR 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).right;
		TokenValue ident = (TokenValue)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		 
		//if(tablaSimbolos.getFunction(ident.toString(),contadorparams,"global",dt) == null)
		try{
			Symbol s = tablaSimbolos.addFunction(new String(ident.toString()),"global",dt,contadorparams,p,currAccess);
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(ident.getPosLine(),ident.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(6/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= SEMICOLON 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(5/*declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= class_declaration SEMICOLON 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(5/*declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= variable_declaration SEMICOLON 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(5/*declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= function_declaration SEMICOLON 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(5/*declaration*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mark_decl ::= 
            {
              ExpAttribute RESULT = null;
		 desplazamiento = 0;
              CUP$CppParser$result = new java_cup.runtime.Symbol(109/*mark_decl*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declaration 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(3/*declarations*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarations ::= declarations declaration 
            {
              Object RESULT = null;

              CUP$CppParser$result = new java_cup.runtime.Symbol(3/*declarations*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // init_decl ::= 
            {
              ExpAttribute RESULT = null;
		 //Agregamos funciones printf, pcanf, free. tc
		DataType dt;
		Symbol s;
		dt = new DataType(SymTab.T_INT);
		s = tablaSimbolos.addFunction(new String("printf"),"global",dt,-1,null,-1);
		dt = new DataType(SymTab.T_STRING);
		s = tablaSimbolos.addFunction(new String("scanf"),"global",dt,-1,null,-1);
		dt = new DataType(SymTab.T_VOID);
		s = tablaSimbolos.addFunction(new String("main"),"global",dt,0,null,-1);
//		dt = new DataType(SymTab.T_INT);
//		s = tablaSimbolos.addFunction(new String("main"),"global",dt,0,null,-1);
		Output.writeHeader();

	
	
              CUP$CppParser$result = new java_cup.runtime.Symbol(114/*init_decl*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translation_unit ::= init_decl declarations SHR definitions 
            {
              Object RESULT = null;
		 Output.createHeader(temp,tablaSimbolos);
              CUP$CppParser$result = new java_cup.runtime.Symbol(1/*translation_unit*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          return CUP$CppParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translation_unit EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).value;
		RESULT = start_val;
              CUP$CppParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$CppParser$stack.elementAt(CUP$CppParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$CppParser$parser.done_parsing();
          return CUP$CppParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

