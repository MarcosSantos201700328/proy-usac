
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue May 29 21:39:38 CST 2007
//----------------------------------------------------

package IlGen;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import errormanager.*;

/** CUP v0.10k generated parser.
  * @version Tue May 29 21:39:38 CST 2007
  */
public class PascalParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PascalParser() {super();}

  /** Constructor which sets the default scanner. */
  public PascalParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0114\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\007\000\002\210\002\000\002\005\004" +
    "\000\002\005\007\000\002\006\002\000\002\006\003\000" +
    "\002\007\004\000\002\007\003\000\002\010\005\000\002" +
    "\174\005\000\002\174\003\000\002\011\011\000\002\012" +
    "\006\000\002\013\005\000\002\013\002\000\002\014\005" +
    "\000\002\014\003\000\002\015\003\000\002\016\004\000" +
    "\002\016\002\000\002\017\004\000\002\017\003\000\002" +
    "\020\006\000\002\021\003\000\002\021\005\000\002\022" +
    "\003\000\002\022\005\000\002\023\003\000\002\023\005" +
    "\000\002\024\004\000\002\024\003\000\002\025\003\000" +
    "\002\025\005\000\002\026\003\000\002\026\005\000\002" +
    "\026\003\000\002\026\004\000\002\162\003\000\002\162" +
    "\004\000\002\162\003\000\002\027\003\000\002\027\003" +
    "\000\002\164\003\000\002\164\003\000\002\030\004\000" +
    "\002\030\002\000\002\031\004\000\002\031\003\000\002" +
    "\032\006\000\002\206\003\000\002\222\003\000\002\222" +
    "\003\000\002\222\003\000\002\222\003\000\002\222\003" +
    "\000\002\222\003\000\002\231\003\000\002\231\003\000" +
    "\002\170\002\000\002\170\003\000\002\167\005\000\002" +
    "\226\003\000\002\227\003\000\002\227\003\000\002\227" +
    "\003\000\002\227\003\000\002\230\010\000\002\173\005" +
    "\000\002\173\003\000\002\172\003\000\002\171\003\000" +
    "\002\223\003\000\002\034\005\000\002\034\007\000\002" +
    "\034\005\000\002\035\005\000\002\035\003\000\002\036" +
    "\005\000\002\037\007\000\002\037\006\000\002\037\002" +
    "\000\002\040\005\000\002\040\003\000\002\041\005\000" +
    "\002\041\003\000\002\042\007\000\002\042\011\000\002" +
    "\042\007\000\002\043\005\000\002\043\003\000\002\044" +
    "\003\000\002\045\003\000\002\046\003\000\002\047\005" +
    "\000\002\050\003\000\002\051\005\000\002\052\004\000" +
    "\002\225\003\000\002\053\005\000\002\053\002\000\002" +
    "\054\005\000\002\054\003\000\002\055\005\000\002\056" +
    "\004\000\002\056\002\000\002\057\005\000\002\057\003" +
    "\000\002\060\003\000\002\060\003\000\002\061\005\000" +
    "\002\061\005\000\002\062\004\000\002\062\005\000\002" +
    "\207\002\000\002\063\003\000\002\063\003\000\002\177" +
    "\005\000\002\176\005\000\002\176\003\000\002\203\003" +
    "\000\002\203\003\000\002\202\005\000\002\201\006\000" +
    "\002\165\004\000\002\064\003\000\002\065\005\000\002" +
    "\065\005\000\002\066\006\000\002\066\007\000\002\166" +
    "\004\000\002\224\003\000\002\067\003\000\002\070\003" +
    "\000\002\071\006\000\002\221\002\000\002\072\005\000" +
    "\002\072\003\000\002\073\003\000\002\073\003\000\002" +
    "\074\005\000\002\074\003\000\002\075\005\000\002\075" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\004\000\002\076\004\000" +
    "\002\076\003\000\002\076\004\000\002\076\004\000\002" +
    "\076\002\000\002\077\003\000\002\077\004\000\002\077" +
    "\004\000\002\233\002\000\002\100\010\000\002\101\010" +
    "\000\002\102\010\000\002\103\012\000\002\104\012\000" +
    "\002\105\006\000\002\106\006\000\002\107\010\000\002" +
    "\107\016\000\002\110\015\000\002\214\002\000\002\215" +
    "\002\000\002\216\002\000\002\217\002\000\002\220\002" +
    "\000\002\111\005\000\002\111\010\000\002\160\003\000" +
    "\002\160\003\000\002\160\003\000\002\160\004\000\002" +
    "\156\006\000\002\232\003\000\002\175\005\000\002\175" +
    "\003\000\002\151\003\000\002\112\005\000\002\113\004" +
    "\000\002\113\006\000\002\113\006\000\002\113\006\000" +
    "\002\113\006\000\002\113\003\000\002\200\005\000\002" +
    "\204\005\000\002\204\003\000\002\157\003\000\002\157" +
    "\005\000\002\157\007\000\002\114\004\000\002\115\007" +
    "\000\002\115\010\000\002\115\012\000\002\115\013\000" +
    "\002\116\003\000\002\117\005\000\002\117\003\000\002" +
    "\120\007\000\002\121\003\000\002\121\004\000\002\121" +
    "\003\000\002\121\004\000\002\124\003\000\002\125\003" +
    "\000\002\122\003\000\002\122\003\000\002\126\003\000" +
    "\002\123\005\000\002\123\003\000\002\127\003\000\002" +
    "\154\003\000\002\154\006\000\002\155\003\000\002\155" +
    "\006\000\002\211\002\000\002\212\002\000\002\130\003" +
    "\000\002\130\005\000\002\131\003\000\002\131\005\000" +
    "\002\132\003\000\002\132\005\000\002\133\004\000\002" +
    "\133\003\000\002\134\003\000\002\134\005\000\002\135" +
    "\003\000\002\135\003\000\002\135\003\000\002\135\006" +
    "\000\002\135\004\000\002\213\002\000\002\136\003\000" +
    "\002\136\003\000\002\136\003\000\002\137\003\000\002" +
    "\137\003\000\002\140\003\000\002\141\003\000\002\142" +
    "\004\000\002\205\005\000\002\205\003\000\002\161\003" +
    "\000\002\161\003\000\002\143\005\000\002\143\004\000" +
    "\002\144\005\000\002\144\003\000\002\145\005\000\002" +
    "\145\003\000\002\146\003\000\002\146\003\000\002\147" +
    "\003\000\002\147\003\000\002\147\003\000\002\147\003" +
    "\000\002\150\003\000\002\150\003\000\002\150\003\000" +
    "\002\150\003\000\002\150\003\000\002\150\003\000\002" +
    "\150\003\000\002\163\003\000\002\152\003\000\002\153" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b9\000\020\002\uffeb\013\004\031\uffeb\061\uffeb\062" +
    "\012\077\uffeb\102\uffeb\001\002\000\004\035\014\001\002" +
    "\000\014\002\uffd1\031\uffd1\061\uffd1\077\041\102\uffd1\001" +
    "\002\000\004\002\000\001\002\000\004\002\u019b\001\002" +
    "\000\004\070\ufffd\001\002\000\004\002\uffff\001\002\000" +
    "\004\035\014\001\002\000\006\043\015\070\ufffc\001\002" +
    "\000\110\004\ufef0\006\ufef0\011\ufef0\012\ufef0\016\ufef0\017" +
    "\ufef0\020\ufef0\021\ufef0\022\ufef0\023\ufef0\024\ufef0\025\ufef0" +
    "\032\ufef0\034\ufef0\037\ufef0\041\ufef0\042\ufef0\043\ufef0\044" +
    "\ufef0\045\ufef0\046\ufef0\051\ufef0\052\ufef0\053\ufef0\060\ufef0" +
    "\063\ufef0\067\ufef0\070\ufef0\072\ufef0\073\ufef0\074\ufef0\075" +
    "\ufef0\076\ufef0\100\ufef0\101\ufef0\001\002\000\004\035\014" +
    "\001\002\000\010\011\ufff4\012\ufff4\067\ufff4\001\002\000" +
    "\006\012\020\067\022\001\002\000\030\010\ufeee\012\ufeee" +
    "\014\ufeee\035\ufeee\043\ufeee\045\ufeee\047\ufeee\050\ufeee\060" +
    "\ufeee\063\ufeee\064\ufeee\001\002\000\004\035\014\001\002" +
    "\000\004\070\ufffb\001\002\000\010\011\ufff5\012\ufff5\067" +
    "\ufff5\001\002\000\004\070\025\001\002\000\100\002\ufeef" +
    "\007\ufeef\010\ufeef\013\ufeef\014\ufeef\015\ufeef\024\ufeef\026" +
    "\ufeef\027\ufeef\030\ufeef\031\ufeef\033\ufeef\035\ufeef\036\ufeef" +
    "\040\ufeef\045\ufeef\056\ufeef\060\ufeef\061\ufeef\064\ufeef\066" +
    "\ufeef\067\ufeef\070\ufeef\077\ufeef\100\ufeef\102\ufeef\103\ufeef" +
    "\105\ufeef\106\ufeef\107\ufeef\110\ufeef\001\002\000\022\013" +
    "\ufffa\015\030\031\ufffa\040\ufffa\056\ufffa\061\ufffa\077\ufffa" +
    "\102\ufffa\001\002\000\022\013\ufff9\015\030\031\ufff9\040" +
    "\ufff9\056\ufff9\061\ufff9\077\ufff9\102\ufff9\001\002\000\004" +
    "\035\014\001\002\000\020\013\ufff0\031\ufff0\040\035\056" +
    "\ufff0\061\ufff0\077\ufff0\102\ufff0\001\002\000\004\020\034" +
    "\001\002\000\022\013\ufff7\015\ufff7\031\ufff7\040\ufff7\056" +
    "\ufff7\061\ufff7\077\ufff7\102\ufff7\001\002\000\004\002\ufffe" +
    "\001\002\000\004\014\261\001\002\000\016\013\004\031" +
    "\uffeb\056\uffeb\061\uffeb\077\uffeb\102\uffeb\001\002\000\014" +
    "\031\uffd1\056\uffd1\061\uffd1\077\041\102\uffd1\001\002\000" +
    "\012\031\uff9b\056\uff9b\061\uff9b\102\201\001\002\000\004" +
    "\035\014\001\002\000\004\025\047\001\002\000\016\002" +
    "\uffcf\031\uffcf\035\uffcf\056\uffcf\061\uffcf\102\uffcf\001\002" +
    "\000\004\025\uffcd\001\002\000\016\002\uffd2\031\uffd2\035" +
    "\014\056\uffd2\061\uffd2\102\uffd2\001\002\000\016\002\uffd0" +
    "\031\uffd0\035\uffd0\056\uffd0\061\uffd0\102\uffd0\001\002\000" +
    "\026\005\070\035\014\057\061\065\063\071\062\101\057" +
    "\111\065\112\067\113\060\114\052\001\002\000\010\024" +
    "\uffcc\067\uffcc\070\uffcc\001\002\000\010\024\uffbd\067\uffbd" +
    "\070\uffbd\001\002\000\010\024\uffc7\067\uffc7\070\uffc7\001" +
    "\002\000\010\024\uffc5\067\uffc5\070\uffc5\001\002\000\010" +
    "\024\uffc6\067\uffc6\070\uffc6\001\002\000\010\024\uffcb\067" +
    "\uffcb\070\uffcb\001\002\000\010\024\uffbf\067\uffbf\070\uffbf" +
    "\001\002\000\026\005\070\035\014\057\061\065\063\071" +
    "\062\101\057\111\065\112\067\113\060\114\052\001\002" +
    "\000\010\024\uffc8\067\uffc8\070\uffc8\001\002\000\004\052" +
    "\175\001\002\000\004\052\172\001\002\000\010\007\127" +
    "\024\uffae\035\014\001\002\000\004\070\025\001\002\000" +
    "\010\024\uffca\067\uffca\070\uffca\001\002\000\010\024\uffc0" +
    "\067\uffc0\070\uffc0\001\002\000\010\024\uffc9\067\uffc9\070" +
    "\uffc9\001\002\000\004\041\073\001\002\000\010\024\uffc1" +
    "\067\uffc1\070\uffc1\001\002\000\010\024\uffbe\067\uffbe\070" +
    "\uffbe\001\002\000\020\010\075\012\uffc4\035\014\045\074" +
    "\060\102\063\uffc4\064\100\001\002\000\024\010\uffd5\014" +
    "\uffd5\035\uffd5\043\uffd5\045\uffd5\047\uffd5\050\uffd5\060\uffd5" +
    "\064\uffd5\001\002\000\020\011\uffd7\012\uffd7\021\uffd7\024" +
    "\uffd7\063\uffd7\067\uffd7\070\uffd7\001\002\000\014\012\uffc3" +
    "\024\uffc3\063\uffc3\067\uffc3\070\uffc3\001\002\000\006\035" +
    "\014\064\100\001\002\000\020\011\uffd3\012\uffd3\021\uffd3" +
    "\024\uffd3\063\uffd3\067\uffd3\070\uffd3\001\002\000\006\012" +
    "\uffb9\063\uffb9\001\002\000\024\010\uffd6\014\uffd6\035\uffd6" +
    "\043\uffd6\045\uffd6\047\uffd6\050\uffd6\060\uffd6\064\uffd6\001" +
    "\002\000\020\011\uffd9\012\uffd9\021\uffd9\024\uffd9\063\uffd9" +
    "\067\uffd9\070\uffd9\001\002\000\020\011\uffd4\012\uffd4\021" +
    "\uffd4\024\uffd4\063\uffd4\067\uffd4\070\uffd4\001\002\000\004" +
    "\021\117\001\002\000\006\012\020\063\112\001\002\000" +
    "\014\012\uffb8\024\uffb8\063\uffb8\067\uffb8\070\uffb8\001\002" +
    "\000\006\012\uffba\063\uffba\001\002\000\020\010\075\012" +
    "\uffc4\035\014\045\074\060\102\063\uffc4\064\100\001\002" +
    "\000\004\052\113\001\002\000\026\005\070\035\014\057" +
    "\061\065\063\071\062\101\057\111\065\112\067\113\060" +
    "\114\052\001\002\000\010\024\uffb7\067\uffb7\070\uffb7\001" +
    "\002\000\010\024\uffbc\067\uffbc\070\uffbc\001\002\000\006" +
    "\012\uffbb\063\uffbb\001\002\000\014\010\075\035\014\045" +
    "\074\060\102\064\100\001\002\000\014\012\uffc2\024\uffc2" +
    "\063\uffc2\067\uffc2\070\uffc2\001\002\000\020\011\uffd8\012" +
    "\uffd8\021\uffd8\024\uffd8\063\uffd8\067\uffd8\070\uffd8\001\002" +
    "\000\016\002\uffce\031\uffce\035\uffce\056\uffce\061\uffce\102" +
    "\uffce\001\002\000\004\024\171\001\002\000\010\024\uffb2" +
    "\067\uffb2\070\uffb2\001\002\000\006\024\166\070\025\001" +
    "\002\000\006\011\163\012\020\001\002\000\004\035\014" +
    "\001\002\000\004\052\uffac\001\002\000\004\011\160\001" +
    "\002\000\004\052\134\001\002\000\006\011\uffa3\052\uffa2" +
    "\001\002\000\014\010\075\035\014\045\074\060\102\064" +
    "\100\001\002\000\006\011\145\012\020\001\002\000\010" +
    "\024\uffaa\067\uffaa\070\uffaa\001\002\000\010\024\uffaf\067" +
    "\uffaf\070\025\001\002\000\006\011\uffa4\012\uffa4\001\002" +
    "\000\006\011\uffa5\012\uffa5\001\002\000\020\010\075\024" +
    "\uffb0\035\014\045\074\060\102\064\100\067\uffb0\001\002" +
    "\000\010\024\uffab\067\uffab\070\uffab\001\002\000\014\010" +
    "\075\035\014\045\074\060\102\064\100\001\002\000\004" +
    "\043\146\001\002\000\010\007\127\035\014\067\uffae\001" +
    "\002\000\004\067\156\001\002\000\006\067\151\070\025" +
    "\001\002\000\010\024\uffa9\067\uffa9\070\uffa9\001\002\000" +
    "\010\007\127\035\014\067\uffae\001\002\000\004\067\155" +
    "\001\002\000\010\024\uffb3\067\uffb3\070\uffb3\001\002\000" +
    "\010\024\uffa8\067\uffa8\070\uffa8\001\002\000\010\024\uffa7" +
    "\067\uffa7\070\uffa7\001\002\000\006\011\uffa6\012\uffa6\001" +
    "\002\000\004\035\014\001\002\000\004\052\uffad\001\002" +
    "\000\004\052\uffa2\001\002\000\026\005\070\035\014\057" +
    "\061\065\063\071\062\101\057\111\065\112\067\113\060" +
    "\114\052\001\002\000\010\024\uffb1\067\uffb1\070\uffb1\001" +
    "\002\000\010\007\127\024\uffae\035\014\001\002\000\010" +
    "\024\uffb6\067\uffb6\070\uffb6\001\002\000\004\024\170\001" +
    "\002\000\010\024\uffb5\067\uffb5\070\uffb5\001\002\000\010" +
    "\024\uffb4\067\uffb4\070\uffb4\001\002\000\022\010\075\024" +
    "\uffc4\035\014\045\074\060\102\064\100\067\uffc4\070\uffc4" +
    "\001\002\000\010\024\uffa0\067\uffa0\070\uffa0\001\002\000" +
    "\010\024\uffa1\067\uffa1\070\uffa1\001\002\000\026\005\070" +
    "\035\014\057\061\065\063\071\062\101\057\111\065\112" +
    "\067\113\060\114\052\001\002\000\010\024\uff9f\067\uff9f" +
    "\070\uff9f\001\002\000\010\024\uff9e\067\uff9e\070\uff9e\001" +
    "\002\000\010\024\uff9d\067\uff9d\070\uff9d\001\002\000\004" +
    "\035\014\001\002\000\010\031\213\056\uff96\061\206\001" +
    "\002\000\006\011\uff8d\043\uff8d\001\002\000\004\070\uff92" +
    "\001\002\000\004\070\025\001\002\000\004\035\u0180\001" +
    "\002\000\004\070\025\001\002\000\006\043\uff8d\070\uff8d" +
    "\001\002\000\004\070\uff94\001\002\000\004\070\uff93\001" +
    "\002\000\004\035\u0168\001\002\000\004\056\220\001\002" +
    "\000\004\070\025\001\002\000\012\002\uff97\031\213\056" +
    "\uff97\061\206\001\002\000\004\070\uff95\001\002\000\040" +
    "\007\uff78\014\uff78\024\uff78\027\uff78\033\uff78\035\uff78\036" +
    "\uff78\056\uff78\066\uff78\070\uff78\103\uff78\105\uff78\106\uff78" +
    "\107\uff78\110\uff78\001\002\000\006\020\uff7a\070\uff7a\001" +
    "\002\000\006\020\ufff3\070\ufff3\001\002\000\040\007\253" +
    "\014\261\024\uff66\027\256\033\230\035\014\036\237\056" +
    "\220\066\257\070\uff66\103\231\105\242\106\232\107\224" +
    "\110\263\001\002\000\004\043\u0165\001\002\000\010\024" +
    "\uff75\070\uff75\100\uff75\001\002\000\010\024\uff76\070\uff76" +
    "\100\uff76\001\002\000\020\006\u0120\023\uff41\024\uff41\041" +
    "\uff4b\043\u0100\070\uff41\100\uff41\001\002\000\004\014\261" +
    "\001\002\000\024\010\uff62\014\uff62\035\uff62\043\uff62\045" +
    "\uff62\047\uff62\050\uff62\060\uff62\064\uff62\001\002\000\004" +
    "\043\u015a\001\002\000\010\024\uff74\070\uff74\100\uff74\001" +
    "\002\000\010\024\uff56\070\uff56\100\uff56\001\002\000\012" +
    "\023\uff56\024\uff56\070\uff56\100\uff56\001\002\000\012\023" +
    "\uff6f\024\uff6f\070\uff6f\100\uff6f\001\002\000\024\010\265" +
    "\014\274\035\014\043\317\045\074\047\267\050\316\060" +
    "\102\064\270\001\002\000\012\023\uff6c\024\uff6c\070\uff6c" +
    "\100\uff6c\001\002\000\004\011\u0146\001\002\000\004\043" +
    "\u0143\001\002\000\010\024\uff56\070\uff56\100\uff56\001\002" +
    "\000\010\024\uff65\070\uff65\100\uff65\001\002\000\012\023" +
    "\uff6e\024\uff6e\070\uff6e\100\uff6e\001\002\000\012\023\uff6d" +
    "\024\uff6d\070\uff6d\100\uff6d\001\002\000\012\023\uff53\024" +
    "\uff53\070\uff53\100\uff53\001\002\000\004\041\u013c\001\002" +
    "\000\010\024\uff72\070\uff72\100\uff72\001\002\000\012\023" +
    "\uff70\024\uff70\070\uff70\100\uff70\001\002\000\024\010\265" +
    "\014\274\035\014\043\317\045\074\047\267\050\316\060" +
    "\102\064\270\001\002\000\012\023\uff56\024\uff56\070\uff56" +
    "\100\uff56\001\002\000\012\023\uff57\024\uff57\070\uff57\100" +
    "\uff57\001\002\000\004\035\uff62\001\002\000\040\007\uff62" +
    "\014\uff62\027\uff62\033\uff62\035\uff62\036\uff62\056\uff62\066" +
    "\uff62\070\uff62\100\uff62\103\uff62\105\uff62\106\uff62\107\uff62" +
    "\110\uff62\001\002\000\006\024\u010d\070\025\001\002\000" +
    "\016\011\uffed\012\uffed\023\uffed\024\uffed\070\uffed\100\uffed" +
    "\001\002\000\012\023\uff69\024\uff69\070\uff69\100\uff69\001" +
    "\002\000\004\043\264\001\002\000\014\010\265\014\274" +
    "\035\014\047\267\064\270\001\002\000\074\004\uff0e\011" +
    "\uff0e\012\uff0e\016\uff0e\017\uff0e\022\uff0e\023\uff0e\024\uff0e" +
    "\025\uff0e\032\uff0e\034\uff0e\037\uff0e\042\uff0e\044\uff0e\045" +
    "\uff0e\046\uff0e\051\uff0e\052\uff0e\053\uff0e\060\uff0e\063\uff0e" +
    "\067\uff0e\070\uff0e\072\uff0e\073\uff0e\074\uff0e\075\uff0e\076" +
    "\uff0e\100\uff0e\001\002\000\004\041\312\001\002\000\074" +
    "\004\uff0d\011\uff0d\012\uff0d\016\uff0d\017\uff0d\022\uff0d\023" +
    "\uff0d\024\uff0d\025\uff0d\032\uff0d\034\uff0d\037\uff0d\042\uff0d" +
    "\044\uff0d\045\uff0d\046\uff0d\051\uff0d\052\uff0d\053\uff0d\060" +
    "\uff0d\063\uff0d\067\uff0d\070\uff0d\072\uff0d\073\uff0d\074\uff0d" +
    "\075\uff0d\076\uff0d\100\uff0d\001\002\000\074\004\uff09\011" +
    "\uff09\012\uff09\016\uff09\017\uff09\022\uff09\023\uff09\024\uff09" +
    "\025\uff09\032\uff09\034\uff09\037\uff09\042\uff09\044\uff09\045" +
    "\uff09\046\uff09\051\uff09\052\uff09\053\uff09\060\uff09\063\uff09" +
    "\067\uff09\070\uff09\072\uff09\073\uff09\074\uff09\075\uff09\076" +
    "\uff09\100\uff09\001\002\000\006\012\307\067\310\001\002" +
    "\000\100\004\uff4e\011\uff4e\012\uff4e\016\uff4e\017\uff4e\020" +
    "\uff4e\022\uff4e\023\uff4e\024\uff4e\025\uff4e\032\uff4e\034\uff4e" +
    "\037\uff4e\042\uff4e\044\uff4e\045\uff4e\046\uff4e\051\uff4e\052" +
    "\uff4e\053\uff4e\060\uff4e\063\uff4e\067\uff4e\070\uff4e\072\uff4e" +
    "\073\uff4e\074\uff4e\075\uff4e\076\uff4e\100\uff4e\101\uff4e\001" +
    "\002\000\074\004\uff0c\011\uff0c\012\uff0c\016\uff0c\017\uff0c" +
    "\022\uff0c\023\uff0c\024\uff0c\025\uff0c\032\uff0c\034\uff0c\037" +
    "\uff0c\042\uff0c\044\uff0c\045\uff0c\046\uff0c\051\uff0c\052\uff0c" +
    "\053\uff0c\060\uff0c\063\uff0c\067\uff0c\070\uff0c\072\uff0c\073" +
    "\uff0c\074\uff0c\075\uff0c\076\uff0c\100\uff0c\001\002\000\074" +
    "\004\uff0a\011\uff0a\012\uff0a\016\uff0a\017\uff0a\022\uff0a\023" +
    "\uff0a\024\uff0a\025\uff0a\032\uff0a\034\uff0a\037\uff0a\042\uff0a" +
    "\044\uff0a\045\uff0a\046\uff0a\051\uff0a\052\uff0a\053\uff0a\060" +
    "\uff0a\063\uff0a\067\uff0a\070\uff0a\072\uff0a\073\uff0a\074\uff0a" +
    "\075\uff0a\076\uff0a\100\uff0a\001\002\000\100\004\uff4f\011" +
    "\uff4f\012\uff4f\016\uff4f\017\uff4f\020\uff4f\022\uff4f\023\uff4f" +
    "\024\uff4f\025\uff4f\032\uff4f\034\uff4f\037\uff4f\042\uff4f\044" +
    "\uff4f\045\uff4f\046\uff4f\051\uff4f\052\uff4f\053\uff4f\060\uff4f" +
    "\063\uff4f\067\uff4f\070\uff4f\072\uff4f\073\uff4f\074\uff4f\075" +
    "\uff4f\076\uff4f\100\uff4f\101\uff4f\001\002\000\014\012\uff50" +
    "\020\uff50\041\uff4b\067\uff50\101\uff50\001\002\000\074\004" +
    "\uff0f\011\uff0f\012\uff0f\016\uff0f\017\uff0f\022\uff0f\023\uff0f" +
    "\024\uff0f\025\uff0f\032\uff0f\034\uff0f\037\uff0f\042\uff0f\044" +
    "\uff0f\045\uff0f\046\uff0f\051\uff0f\052\uff0f\053\uff0f\060\uff0f" +
    "\063\uff0f\067\uff0f\070\uff0f\072\uff0f\073\uff0f\074\uff0f\075" +
    "\uff0f\076\uff0f\100\uff0f\001\002\000\012\012\uff05\020\305" +
    "\067\uff05\101\304\001\002\000\006\012\uff04\067\uff04\001" +
    "\002\000\006\012\uff06\067\uff06\001\002\000\074\004\uff0b" +
    "\011\uff0b\012\uff0b\016\uff0b\017\uff0b\022\uff0b\023\uff0b\024" +
    "\uff0b\025\uff0b\032\uff0b\034\uff0b\037\uff0b\042\uff0b\044\uff0b" +
    "\045\uff0b\046\uff0b\051\uff0b\052\uff0b\053\uff0b\060\uff0b\063" +
    "\uff0b\067\uff0b\070\uff0b\072\uff0b\073\uff0b\074\uff0b\075\uff0b" +
    "\076\uff0b\100\uff0b\001\002\000\100\004\uff4d\011\uff4d\012" +
    "\uff4d\016\uff4d\017\uff4d\020\uff4d\022\uff4d\023\uff4d\024\uff4d" +
    "\025\uff4d\032\uff4d\034\uff4d\037\uff4d\042\uff4d\044\uff4d\045" +
    "\uff4d\046\uff4d\051\uff4d\052\uff4d\053\uff4d\060\uff4d\063\uff4d" +
    "\067\uff4d\070\uff4d\072\uff4d\073\uff4d\074\uff4d\075\uff4d\076" +
    "\uff4d\100\uff4d\101\uff4d\001\002\000\004\035\014\001\002" +
    "\000\100\004\uff47\011\uff47\012\uff47\016\uff47\017\uff47\020" +
    "\uff47\022\uff47\023\uff47\024\uff47\025\uff47\032\uff47\034\uff47" +
    "\037\uff47\042\uff47\044\uff47\045\uff47\046\uff47\051\uff47\052" +
    "\uff47\053\uff47\060\uff47\063\uff47\067\uff47\070\uff47\072\uff47" +
    "\073\uff47\074\uff47\075\uff47\076\uff47\100\uff47\101\uff47\001" +
    "\002\000\014\010\265\014\274\035\014\047\267\064\270" +
    "\001\002\000\012\023\uff42\024\uff42\070\uff42\100\uff42\001" +
    "\002\000\006\012\uff07\067\uff07\001\002\000\024\010\265" +
    "\014\274\035\014\043\317\045\074\047\267\050\316\060" +
    "\102\064\270\001\002\000\100\004\uff15\011\uff15\012\uff15" +
    "\016\uff15\017\uff15\020\305\022\uff15\023\uff15\024\uff15\025" +
    "\uff15\032\uff15\034\uff15\037\uff15\042\uff15\044\uff15\045\uff15" +
    "\046\uff15\051\uff15\052\uff15\053\uff15\060\uff15\063\uff15\067" +
    "\uff15\070\uff15\072\uff15\073\uff15\074\uff15\075\uff15\076\uff15" +
    "\100\uff15\101\304\001\002\000\104\004\uff50\011\uff50\012" +
    "\uff50\016\uff50\017\uff50\020\uff50\022\uff50\023\uff50\024\uff50" +
    "\025\uff50\032\uff50\034\uff50\037\uff50\041\uff4b\042\uff50\043" +
    "\u0100\044\uff50\045\uff50\046\uff50\051\uff50\052\uff50\053\uff50" +
    "\060\uff50\063\uff50\067\uff50\070\uff50\072\uff50\073\uff50\074" +
    "\uff50\075\uff50\076\uff50\100\uff50\101\uff50\001\002\000\006" +
    "\012\020\063\376\001\002\000\020\010\265\014\274\035" +
    "\014\043\317\047\267\050\316\064\270\001\002\000\024" +
    "\010\uff10\014\uff10\035\uff10\043\uff10\045\uff10\047\uff10\050" +
    "\uff10\060\uff10\064\uff10\001\002\000\072\004\uff18\011\uff18" +
    "\012\uff18\016\uff18\017\uff18\022\uff18\023\uff18\024\uff18\025" +
    "\uff18\032\uff18\034\uff18\037\uff18\042\uff18\044\uff18\045\uff18" +
    "\046\uff18\051\uff18\052\uff18\053\uff18\060\uff18\063\uff18\067" +
    "\uff18\070\uff18\072\uff18\073\uff18\075\uff18\076\uff18\100\uff18" +
    "\001\002\000\024\012\uff48\025\353\032\355\034\351\037" +
    "\350\042\354\044\347\051\356\063\uff48\001\002\000\072" +
    "\004\uff1b\011\uff1b\012\uff1b\016\uff1b\017\uff1b\022\uff1b\023" +
    "\uff1b\024\uff1b\025\uff1b\032\uff1b\034\uff1b\037\uff1b\042\uff1b" +
    "\044\uff1b\045\uff1b\046\uff1b\051\uff1b\052\uff1b\053\uff1b\060" +
    "\uff1b\063\uff1b\067\uff1b\070\uff1b\072\uff1b\073\uff1b\075\uff1b" +
    "\076\uff1b\100\uff1b\001\002\000\006\012\uff49\063\uff49\001" +
    "\002\000\072\004\uff1d\011\uff1d\012\uff1d\016\345\017\uff1d" +
    "\022\uff1d\023\uff1d\024\uff1d\025\uff1d\032\uff1d\034\uff1d\037" +
    "\uff1d\042\uff1d\044\uff1d\045\uff1d\046\342\051\uff1d\052\uff1d" +
    "\053\uff1d\060\uff1d\063\uff1d\067\uff1d\070\uff1d\072\344\073" +
    "\341\075\uff1d\076\uff1d\100\uff1d\001\002\000\062\004\uff1f" +
    "\011\uff1f\012\uff1f\017\uff1f\022\uff1f\023\uff1f\024\uff1f\025" +
    "\uff1f\032\uff1f\034\uff1f\037\uff1f\042\uff1f\044\uff1f\045\337" +
    "\051\uff1f\052\uff1f\053\uff1f\060\336\063\uff1f\067\uff1f\070" +
    "\uff1f\075\uff1f\076\uff1f\100\uff1f\001\002\000\074\004\uff14" +
    "\011\uff14\012\uff14\016\uff14\017\uff14\022\uff14\023\uff14\024" +
    "\uff14\025\uff14\032\uff14\034\uff14\037\uff14\042\uff14\044\uff14" +
    "\045\uff14\046\uff14\051\uff14\052\uff14\053\uff14\060\uff14\063" +
    "\uff14\067\uff14\070\uff14\072\uff14\073\uff14\074\uff14\075\uff14" +
    "\076\uff14\100\uff14\001\002\000\074\004\uff17\011\uff17\012" +
    "\uff17\016\uff17\017\uff17\022\uff17\023\uff17\024\uff17\025\uff17" +
    "\032\uff17\034\uff17\037\uff17\042\uff17\044\uff17\045\uff17\046" +
    "\uff17\051\uff17\052\uff17\053\uff17\060\uff17\063\uff17\067\uff17" +
    "\070\uff17\072\uff17\073\uff17\074\333\075\uff17\076\uff17\100" +
    "\uff17\001\002\000\074\004\uff13\011\uff13\012\uff13\016\uff13" +
    "\017\uff13\022\uff13\023\uff13\024\uff13\025\uff13\032\uff13\034" +
    "\uff13\037\uff13\042\uff13\044\uff13\045\uff13\046\uff13\051\uff13" +
    "\052\uff13\053\uff13\060\uff13\063\uff13\067\uff13\070\uff13\072" +
    "\uff13\073\uff13\074\uff13\075\uff13\076\uff13\100\uff13\001\002" +
    "\000\024\010\265\014\274\035\014\043\317\045\074\047" +
    "\267\050\316\060\102\064\270\001\002\000\072\004\uff19" +
    "\011\uff19\012\uff19\016\uff19\017\uff19\022\uff19\023\uff19\024" +
    "\uff19\025\uff19\032\uff19\034\uff19\037\uff19\042\uff19\044\uff19" +
    "\045\uff19\046\uff19\051\uff19\052\uff19\053\uff19\060\uff19\063" +
    "\uff19\067\uff19\070\uff19\072\uff19\073\uff19\075\uff19\076\uff19" +
    "\100\uff19\001\002\000\020\010\265\014\274\035\014\043" +
    "\317\047\267\050\316\064\270\001\002\000\072\004\uff16" +
    "\011\uff16\012\uff16\016\uff16\017\uff16\022\uff16\023\uff16\024" +
    "\uff16\025\uff16\032\uff16\034\uff16\037\uff16\042\uff16\044\uff16" +
    "\045\uff16\046\uff16\051\uff16\052\uff16\053\uff16\060\uff16\063" +
    "\uff16\067\uff16\070\uff16\072\uff16\073\uff16\075\uff16\076\uff16" +
    "\100\uff16\001\002\000\024\010\265\014\274\035\014\043" +
    "\317\045\074\047\267\050\316\060\102\064\270\001\002" +
    "\000\024\010\ufefd\014\ufefd\035\ufefd\043\ufefd\045\ufefd\047" +
    "\ufefd\050\ufefd\060\ufefd\064\ufefd\001\002\000\024\010\ufefc" +
    "\014\ufefc\035\ufefc\043\ufefc\045\ufefc\047\ufefc\050\ufefc\060" +
    "\ufefc\064\ufefc\001\002\000\072\004\uff1c\011\uff1c\012\uff1c" +
    "\016\345\017\uff1c\022\uff1c\023\uff1c\024\uff1c\025\uff1c\032" +
    "\uff1c\034\uff1c\037\uff1c\042\uff1c\044\uff1c\045\uff1c\046\342" +
    "\051\uff1c\052\uff1c\053\uff1c\060\uff1c\063\uff1c\067\uff1c\070" +
    "\uff1c\072\344\073\341\075\uff1c\076\uff1c\100\uff1c\001\002" +
    "\000\024\010\ufefb\014\ufefb\035\ufefb\043\ufefb\045\ufefb\047" +
    "\ufefb\050\ufefb\060\ufefb\064\ufefb\001\002\000\024\010\ufef8" +
    "\014\ufef8\035\ufef8\043\ufef8\045\ufef8\047\ufef8\050\ufef8\060" +
    "\ufef8\064\ufef8\001\002\000\024\010\265\014\274\035\014" +
    "\043\317\045\074\047\267\050\316\060\102\064\270\001" +
    "\002\000\024\010\ufefa\014\ufefa\035\ufefa\043\ufefa\045\ufefa" +
    "\047\ufefa\050\ufefa\060\ufefa\064\ufefa\001\002\000\024\010" +
    "\ufef9\014\ufef9\035\ufef9\043\ufef9\045\ufef9\047\ufef9\050\ufef9" +
    "\060\ufef9\064\ufef9\001\002\000\072\004\uff1a\011\uff1a\012" +
    "\uff1a\016\uff1a\017\uff1a\022\uff1a\023\uff1a\024\uff1a\025\uff1a" +
    "\032\uff1a\034\uff1a\037\uff1a\042\uff1a\044\uff1a\045\uff1a\046" +
    "\uff1a\051\uff1a\052\uff1a\053\uff1a\060\uff1a\063\uff1a\067\uff1a" +
    "\070\uff1a\072\uff1a\073\uff1a\075\uff1a\076\uff1a\100\uff1a\001" +
    "\002\000\024\010\ufef5\014\ufef5\035\ufef5\043\ufef5\045\ufef5" +
    "\047\ufef5\050\ufef5\060\ufef5\064\ufef5\001\002\000\024\010" +
    "\ufef1\014\ufef1\035\ufef1\043\ufef1\045\ufef1\047\ufef1\050\ufef1" +
    "\060\ufef1\064\ufef1\001\002\000\024\010\ufef4\014\ufef4\035" +
    "\ufef4\043\ufef4\045\ufef4\047\ufef4\050\ufef4\060\ufef4\064\ufef4" +
    "\001\002\000\024\010\265\014\274\035\014\043\317\045" +
    "\074\047\267\050\316\060\102\064\270\001\002\000\024" +
    "\010\ufef7\014\ufef7\035\ufef7\043\ufef7\045\ufef7\047\ufef7\050" +
    "\ufef7\060\ufef7\064\ufef7\001\002\000\024\010\ufef3\014\ufef3" +
    "\035\ufef3\043\ufef3\045\ufef3\047\ufef3\050\ufef3\060\ufef3\064" +
    "\ufef3\001\002\000\024\010\ufef2\014\ufef2\035\ufef2\043\ufef2" +
    "\045\ufef2\047\ufef2\050\ufef2\060\ufef2\064\ufef2\001\002\000" +
    "\024\010\ufef6\014\ufef6\035\ufef6\043\ufef6\045\ufef6\047\ufef6" +
    "\050\ufef6\060\ufef6\064\ufef6\001\002\000\062\004\uff1e\011" +
    "\uff1e\012\uff1e\017\uff1e\022\uff1e\023\uff1e\024\uff1e\025\uff1e" +
    "\032\uff1e\034\uff1e\037\uff1e\042\uff1e\044\uff1e\045\337\051" +
    "\uff1e\052\uff1e\053\uff1e\060\336\063\uff1e\067\uff1e\070\uff1e" +
    "\075\uff1e\076\uff1e\100\uff1e\001\002\000\024\010\265\014" +
    "\274\035\014\043\317\045\074\047\267\050\316\060\102" +
    "\064\270\001\002\000\042\004\uff25\017\uff25\023\uff25\024" +
    "\uff25\025\353\032\355\034\351\037\350\042\354\044\347" +
    "\051\356\053\uff25\067\uff25\070\uff25\075\uff25\100\uff25\001" +
    "\002\000\024\004\371\017\uff23\023\uff23\024\uff23\053\uff23" +
    "\067\uff23\070\uff23\075\uff23\100\uff23\001\002\000\022\017" +
    "\uff26\023\uff26\024\uff26\053\366\067\uff26\070\uff26\075\uff26" +
    "\100\uff26\001\002\000\004\067\365\001\002\000\074\004" +
    "\uff12\011\uff12\012\uff12\016\uff12\017\uff12\022\uff12\023\uff12" +
    "\024\uff12\025\uff12\032\uff12\034\uff12\037\uff12\042\uff12\044" +
    "\uff12\045\uff12\046\uff12\051\uff12\052\uff12\053\uff12\060\uff12" +
    "\063\uff12\067\uff12\070\uff12\072\uff12\073\uff12\074\uff12\075" +
    "\uff12\076\uff12\100\uff12\001\002\000\024\010\uff20\014\uff20" +
    "\035\uff20\043\uff20\045\uff20\047\uff20\050\uff20\060\uff20\064" +
    "\uff20\001\002\000\024\010\265\014\274\035\014\043\317" +
    "\045\074\047\267\050\316\060\102\064\270\001\002\000" +
    "\024\004\371\017\uff22\023\uff22\024\uff22\053\uff22\067\uff22" +
    "\070\uff22\075\uff22\100\uff22\001\002\000\024\010\uff21\014" +
    "\uff21\035\uff21\043\uff21\045\uff21\047\uff21\050\uff21\060\uff21" +
    "\064\uff21\001\002\000\024\010\265\014\274\035\014\043" +
    "\317\045\074\047\267\050\316\060\102\064\270\001\002" +
    "\000\042\004\uff24\017\uff24\023\uff24\024\uff24\025\353\032" +
    "\355\034\351\037\350\042\354\044\347\051\356\053\uff24" +
    "\067\uff24\070\uff24\075\uff24\100\uff24\001\002\000\074\004" +
    "\uff11\011\uff11\012\uff11\016\uff11\017\uff11\022\uff11\023\uff11" +
    "\024\uff11\025\uff11\032\uff11\034\uff11\037\uff11\042\uff11\044" +
    "\uff11\045\uff11\046\uff11\051\uff11\052\uff11\053\uff11\060\uff11" +
    "\063\uff11\067\uff11\070\uff11\072\uff11\073\uff11\074\uff11\075" +
    "\uff11\076\uff11\100\uff11\001\002\000\024\010\265\014\274" +
    "\035\014\043\317\045\074\047\267\050\316\060\102\064" +
    "\270\001\002\000\100\004\uff4c\011\uff4c\012\uff4c\016\uff4c" +
    "\017\uff4c\020\uff4c\022\uff4c\023\uff4c\024\uff4c\025\uff4c\032" +
    "\uff4c\034\uff4c\037\uff4c\042\uff4c\044\uff4c\045\uff4c\046\uff4c" +
    "\051\uff4c\052\uff4c\053\uff4c\060\uff4c\063\uff4c\067\uff4c\070" +
    "\uff4c\072\uff4c\073\uff4c\074\uff4c\075\uff4c\076\uff4c\100\uff4c" +
    "\101\uff4c\001\002\000\006\012\uff4a\063\uff4a\001\002\000" +
    "\024\010\265\014\274\035\014\043\317\045\074\047\267" +
    "\050\316\060\102\064\270\001\002\000\074\004\uff08\011" +
    "\uff08\012\uff08\016\uff08\017\uff08\022\uff08\023\uff08\024\uff08" +
    "\025\uff08\032\uff08\034\uff08\037\uff08\042\uff08\044\uff08\045" +
    "\uff08\046\uff08\051\uff08\052\uff08\053\uff08\060\uff08\063\uff08" +
    "\067\uff08\070\uff08\072\uff08\073\uff08\074\uff08\075\uff08\076" +
    "\uff08\100\uff08\001\002\000\006\012\uff3e\067\uff3e\001\002" +
    "\000\026\011\u0108\012\uff3d\025\353\032\355\034\351\037" +
    "\350\042\354\044\347\051\356\067\uff3d\001\002\000\006" +
    "\012\020\067\u0106\001\002\000\024\010\265\014\274\035" +
    "\014\043\317\045\074\047\267\050\316\060\102\064\270" +
    "\001\002\000\074\004\uff40\011\uff40\012\uff40\016\uff40\017" +
    "\uff40\022\uff40\023\uff40\024\uff40\025\uff40\032\uff40\034\uff40" +
    "\037\uff40\042\uff40\044\uff40\045\uff40\046\uff40\051\uff40\052" +
    "\uff40\053\uff40\060\uff40\063\uff40\067\uff40\070\uff40\072\uff40" +
    "\073\uff40\074\uff40\075\uff40\076\uff40\100\uff40\001\002\000" +
    "\006\012\uff3f\067\uff3f\001\002\000\024\010\265\014\274" +
    "\035\014\043\317\045\074\047\267\050\316\060\102\064" +
    "\270\001\002\000\026\011\u010a\012\uff3c\025\353\032\355" +
    "\034\351\037\350\042\354\044\347\051\356\067\uff3c\001" +
    "\002\000\024\010\265\014\274\035\014\043\317\045\074" +
    "\047\267\050\316\060\102\064\270\001\002\000\024\012" +
    "\uff3b\025\353\032\355\034\351\037\350\042\354\044\347" +
    "\051\356\067\uff3b\001\002\000\042\007\253\014\261\024" +
    "\uff66\027\256\033\230\035\014\036\237\056\220\066\257" +
    "\070\uff66\100\uff66\103\231\105\242\106\232\107\224\110" +
    "\263\001\002\000\014\020\uff79\023\uff79\024\uff79\070\uff79" +
    "\100\uff79\001\002\000\010\024\uff77\070\uff77\100\uff77\001" +
    "\002\000\040\007\uff57\014\uff57\027\uff57\033\uff57\035\uff57" +
    "\036\uff57\056\uff57\066\uff57\070\uff57\100\uff57\103\uff57\105" +
    "\uff57\106\uff57\107\uff57\110\uff57\001\002\000\040\007\253" +
    "\014\261\027\256\033\230\035\014\036\237\056\220\066" +
    "\257\070\uff66\100\uff66\103\231\105\242\106\232\107\224" +
    "\110\263\001\002\000\006\070\025\100\u0112\001\002\000" +
    "\024\010\265\014\274\035\014\043\317\045\074\047\267" +
    "\050\316\060\102\064\270\001\002\000\012\023\uff61\024" +
    "\uff61\070\uff61\100\uff61\001\002\000\004\035\014\001\002" +
    "\000\006\006\u0120\041\uff4b\001\002\000\006\022\u0119\076" +
    "\u0117\001\002\000\024\010\uff2b\014\uff2b\035\uff2b\043\uff2b" +
    "\045\uff2b\047\uff2b\050\uff2b\060\uff2b\064\uff2b\001\002\000" +
    "\024\010\265\014\274\035\014\043\317\045\074\047\267" +
    "\050\316\060\102\064\270\001\002\000\024\010\uff2a\014" +
    "\uff2a\035\uff2a\043\uff2a\045\uff2a\047\uff2a\050\uff2a\060\uff2a" +
    "\064\uff2a\001\002\000\022\017\uff29\025\353\032\355\034" +
    "\351\037\350\042\354\044\347\051\356\001\002\000\004" +
    "\017\u011c\001\002\000\044\007\uff57\014\uff57\023\uff57\024" +
    "\uff57\027\uff57\033\uff57\035\uff57\036\uff57\056\uff57\066\uff57" +
    "\070\uff57\100\uff57\103\uff57\105\uff57\106\uff57\107\uff57\110" +
    "\uff57\001\002\000\044\007\253\014\261\023\uff66\024\uff66" +
    "\027\256\033\230\035\014\036\237\056\220\066\257\070" +
    "\uff66\100\uff66\103\231\105\242\106\232\107\224\110\263" +
    "\001\002\000\010\024\uff5e\070\uff5e\100\uff5e\001\002\000" +
    "\012\023\uff5d\024\uff5d\070\uff5d\100\uff5d\001\002\000\024" +
    "\010\265\014\274\035\014\043\317\045\074\047\267\050" +
    "\316\060\102\064\270\001\002\000\034\022\uff52\023\uff52" +
    "\024\uff52\025\353\032\355\034\351\037\350\042\354\044" +
    "\347\051\356\070\uff52\076\uff52\100\uff52\001\002\000\012" +
    "\023\uff6a\024\uff6a\070\uff6a\100\uff6a\001\002\000\012\023" +
    "\uff68\024\uff68\070\uff68\100\uff68\001\002\000\022\025\353" +
    "\032\355\034\351\037\350\042\354\044\347\051\356\052" +
    "\uff35\001\002\000\004\052\u0126\001\002\000\014\010\075" +
    "\035\014\045\074\060\102\064\100\001\002\000\006\011" +
    "\u0138\012\020\001\002\000\006\024\u012c\070\u012a\001\002" +
    "\000\006\024\uff33\070\uff33\001\002\000\022\010\ufeef\023" +
    "\ufeef\024\u0137\035\ufeef\045\ufeef\054\ufeef\060\ufeef\064\ufeef" +
    "\001\002\000\020\010\075\023\u012f\035\014\045\074\054" +
    "\u012d\060\102\064\100\001\002\000\012\023\uff39\024\uff39" +
    "\070\uff39\100\uff39\001\002\000\042\007\uff31\011\u0136\014" +
    "\uff31\024\uff31\027\uff31\033\uff31\035\uff31\036\uff31\056\uff31" +
    "\066\uff31\070\uff31\103\uff31\105\uff31\106\uff31\107\uff31\110" +
    "\uff31\001\002\000\006\024\uff34\070\uff34\001\002\000\042" +
    "\007\uff2f\011\u0135\014\uff2f\024\uff2f\027\uff2f\033\uff2f\035" +
    "\uff2f\036\uff2f\056\uff2f\066\uff2f\070\uff2f\103\uff2f\105\uff2f" +
    "\106\uff2f\107\uff2f\110\uff2f\001\002\000\040\007\253\014" +
    "\261\024\uff66\027\256\033\230\035\014\036\237\056\220" +
    "\066\257\070\uff66\103\231\105\242\106\232\107\224\110" +
    "\263\001\002\000\006\024\u0133\070\u0132\001\002\000\004" +
    "\024\u0134\001\002\000\012\023\uff37\024\uff37\070\uff37\100" +
    "\uff37\001\002\000\012\023\uff36\024\uff36\070\uff36\100\uff36" +
    "\001\002\000\040\007\uff2e\014\uff2e\024\uff2e\027\uff2e\033" +
    "\uff2e\035\uff2e\036\uff2e\056\uff2e\066\uff2e\070\uff2e\103\uff2e" +
    "\105\uff2e\106\uff2e\107\uff2e\110\uff2e\001\002\000\040\007" +
    "\uff30\014\uff30\024\uff30\027\uff30\033\uff30\035\uff30\036\uff30" +
    "\056\uff30\066\uff30\070\uff30\103\uff30\105\uff30\106\uff30\107" +
    "\uff30\110\uff30\001\002\000\012\023\uff38\024\uff38\070\uff38" +
    "\100\uff38\001\002\000\040\007\uff57\014\uff57\024\uff57\027" +
    "\uff57\033\uff57\035\uff57\036\uff57\056\uff57\066\uff57\070\uff57" +
    "\103\uff57\105\uff57\106\uff57\107\uff57\110\uff57\001\002\000" +
    "\040\007\253\014\261\024\uff66\027\256\033\230\035\014" +
    "\036\237\056\220\066\257\070\uff66\103\231\105\242\106" +
    "\232\107\224\110\263\001\002\000\006\024\uff54\070\uff54" +
    "\001\002\000\006\024\uff32\070\uff32\001\002\000\024\010" +
    "\265\014\274\035\014\043\317\045\074\047\267\050\316" +
    "\060\102\064\270\001\002\000\006\012\020\063\u013e\001" +
    "\002\000\004\006\u013f\001\002\000\024\010\265\014\274" +
    "\035\014\043\317\045\074\047\267\050\316\060\102\064" +
    "\270\001\002\000\034\022\uff51\023\uff51\024\uff51\025\353" +
    "\032\355\034\351\037\350\042\354\044\347\051\356\070" +
    "\uff51\076\uff51\100\uff51\001\002\000\012\023\uff6b\024\uff6b" +
    "\070\uff6b\100\uff6b\001\002\000\010\024\uff64\070\uff64\100" +
    "\uff64\001\002\000\014\010\265\014\274\035\014\047\267" +
    "\064\270\001\002\000\006\012\307\067\u0145\001\002\000" +
    "\012\023\uff45\024\uff45\070\uff45\100\uff45\001\002\000\042" +
    "\007\253\023\uff66\024\uff66\027\256\033\230\035\014\036" +
    "\237\056\220\066\257\070\uff66\100\uff66\103\231\105\242" +
    "\106\232\107\224\110\263\001\002\000\012\023\uff71\024" +
    "\uff71\070\uff71\100\uff71\001\002\000\010\024\uff73\070\uff73" +
    "\100\uff73\001\002\000\004\075\uff57\001\002\000\004\075" +
    "\u014b\001\002\000\044\007\253\014\261\023\uff66\024\uff66" +
    "\027\256\033\230\035\014\036\237\056\220\066\257\070" +
    "\uff66\100\uff66\103\231\105\242\106\232\107\224\110\263" +
    "\001\002\000\010\024\uff55\070\uff55\100\uff55\001\002\000" +
    "\012\023\uff54\024\uff74\070\uff74\100\uff74\001\002\000\004" +
    "\023\uff56\001\002\000\004\023\u0150\001\002\000\044\007" +
    "\uff55\014\uff55\023\uff55\024\uff55\027\uff55\033\uff55\035\uff55" +
    "\036\uff55\056\uff55\066\uff55\070\uff55\100\uff55\103\uff55\105" +
    "\uff55\106\uff55\107\uff55\110\uff55\001\002\000\044\007\253" +
    "\014\261\023\uff66\024\uff66\027\256\033\230\035\014\036" +
    "\237\056\220\066\257\070\uff66\100\uff66\103\231\105\242" +
    "\106\232\107\224\110\263\001\002\000\010\024\uff54\070" +
    "\uff54\100\uff54\001\002\000\012\023\uff54\024\uff54\070\uff54" +
    "\100\uff54\001\002\000\012\023\uff58\024\uff58\070\uff58\100" +
    "\uff58\001\002\000\010\024\uff53\070\uff53\100\uff53\001\002" +
    "\000\010\024\uff59\070\uff59\100\uff59\001\002\000\010\024" +
    "\uff5a\070\uff5a\100\uff5a\001\002\000\012\023\uff67\024\uff67" +
    "\070\uff67\100\uff67\001\002\000\010\024\uff63\070\uff63\100" +
    "\uff63\001\002\000\014\010\265\014\274\035\014\047\267" +
    "\064\270\001\002\000\006\012\307\067\u015c\001\002\000" +
    "\012\023\uff44\024\uff44\070\uff44\100\uff44\001\002\000\024" +
    "\010\265\014\274\035\014\043\317\045\074\047\267\050" +
    "\316\060\102\064\270\001\002\000\004\017\u015f\001\002" +
    "\000\044\007\uff57\014\uff57\023\uff57\024\uff57\027\uff57\033" +
    "\uff57\035\uff57\036\uff57\056\uff57\066\uff57\070\uff57\100\uff57" +
    "\103\uff57\105\uff57\106\uff57\107\uff57\110\uff57\001\002\000" +
    "\044\007\253\014\261\023\uff66\024\uff66\027\256\033\230" +
    "\035\014\036\237\056\220\066\257\070\uff66\100\uff66\103" +
    "\231\105\242\106\232\107\224\110\263\001\002\000\010" +
    "\024\uff60\070\uff60\100\uff60\001\002\000\012\023\uff5f\024" +
    "\uff5f\070\uff5f\100\uff5f\001\002\000\012\023\uff3a\024\uff3a" +
    "\070\uff3a\100\uff3a\001\002\000\012\023\uff46\024\uff46\070" +
    "\uff46\100\uff46\001\002\000\014\010\265\014\274\035\014" +
    "\047\267\064\270\001\002\000\006\012\307\067\u0167\001" +
    "\002\000\012\023\uff43\024\uff43\070\uff43\100\uff43\001\002" +
    "\000\006\011\uff7d\043\uff7d\001\002\000\006\043\u016b\070" +
    "\uff8f\001\002\000\004\070\uff8e\001\002\000\006\035\014" +
    "\102\u016c\001\002\000\004\035\014\001\002\000\006\067" +
    "\uff86\070\uff86\001\002\000\006\067\uff88\070\uff88\001\002" +
    "\000\006\067\uff87\070\uff87\001\002\000\006\067\u0174\070" +
    "\025\001\002\000\006\011\u0172\012\020\001\002\000\026" +
    "\005\070\035\014\057\061\065\063\071\062\101\057\111" +
    "\065\112\067\113\060\114\052\001\002\000\006\067\uff85" +
    "\070\uff85\001\002\000\006\011\uff8a\070\uff8a\001\002\000" +
    "\006\035\014\102\u016c\001\002\000\006\067\uff89\070\uff89" +
    "\001\002\000\006\011\u0178\012\020\001\002\000\026\005" +
    "\070\035\014\057\061\065\063\071\062\101\057\111\065" +
    "\112\067\113\060\114\052\001\002\000\006\067\uff84\070" +
    "\uff84\001\002\000\026\013\ufffa\015\030\026\u017e\030\u017b" +
    "\031\ufffa\040\ufffa\056\ufffa\061\ufffa\077\ufffa\102\ufffa\001" +
    "\002\000\004\070\uff8c\001\002\000\004\070\uff90\001\002" +
    "\000\004\070\uff82\001\002\000\004\070\uff8b\001\002\000" +
    "\004\070\uff91\001\002\000\006\043\uff83\070\uff83\001\002" +
    "\000\026\013\ufffa\015\030\026\u017e\030\u017b\031\ufffa\040" +
    "\ufffa\056\ufffa\061\ufffa\077\ufffa\102\ufffa\001\002\000\004" +
    "\070\uff80\001\002\000\004\070\uff7b\001\002\000\004\070" +
    "\uff81\001\002\000\006\011\u0187\043\u016b\001\002\000\004" +
    "\011\u018a\001\002\000\026\005\070\035\014\057\061\065" +
    "\063\071\062\101\057\111\065\112\067\113\060\114\052" +
    "\001\002\000\004\070\uff7c\001\002\000\004\070\uff7f\001" +
    "\002\000\026\005\070\035\014\057\061\065\063\071\062" +
    "\101\057\111\065\112\067\113\060\114\052\001\002\000" +
    "\004\070\uff7e\001\002\000\004\070\025\001\002\000\006" +
    "\011\u018f\012\020\001\002\000\004\070\uff99\001\002\000" +
    "\026\005\070\035\014\057\061\065\063\071\062\101\057" +
    "\111\065\112\067\113\060\114\052\001\002\000\004\070" +
    "\uff98\001\002\000\014\002\uff9c\031\uff9c\035\014\056\uff9c" +
    "\061\uff9c\001\002\000\004\070\uff9a\001\002\000\006\012" +
    "\uffee\070\uffee\001\002\000\006\012\020\070\025\001\002" +
    "\000\004\014\261\001\002\000\016\013\ufff1\031\ufff1\056" +
    "\ufff1\061\ufff1\077\ufff1\102\ufff1\001\002\000\006\012\uffef" +
    "\070\uffef\001\002\000\004\070\025\001\002\000\022\013" +
    "\ufff6\015\ufff6\031\ufff6\040\ufff6\056\ufff6\061\ufff6\077\ufff6" +
    "\102\ufff6\001\002\000\022\013\ufff8\015\ufff8\031\ufff8\040" +
    "\ufff8\056\ufff8\061\ufff8\077\ufff8\102\ufff8\001\002\000\004" +
    "\002\001\001\002\000\012\002\uff9b\031\uff9b\061\uff9b\102" +
    "\201\001\002\000\010\002\uff96\031\213\061\206\001\002" +
    "\000\004\002\ufff2\001\002\000\004\025\u01a3\001\002\000" +
    "\020\002\uffec\031\uffec\035\014\056\uffec\061\uffec\077\uffec" +
    "\102\uffec\001\002\000\020\002\uffe9\031\uffe9\035\uffe9\056" +
    "\uffe9\061\uffe9\077\uffe9\102\uffe9\001\002\000\020\002\uffea" +
    "\031\uffea\035\uffea\056\uffea\061\uffea\077\uffea\102\uffea\001" +
    "\002\000\024\010\265\014\274\035\014\043\u01a9\045\074" +
    "\047\267\050\u01a7\060\102\064\270\001\002\000\030\025" +
    "\353\032\355\034\351\037\350\042\354\044\347\045\337" +
    "\051\356\060\336\067\uffe7\070\uffe7\001\002\000\042\016" +
    "\uffdf\025\uffdf\032\uffdf\034\uffdf\037\uffdf\042\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\051\uffdf\060\uffdf\067\uffdf\070\uffdf\072" +
    "\uffdf\073\uffdf\074\u01b6\001\002\000\042\016\uffdd\025\uffdd" +
    "\032\uffdd\034\uffdd\037\uffdd\042\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\051\uffdd\060\uffdd\067\uffdd\070\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\001\002\000\020\010\265\014\274\035\014\043" +
    "\u01a9\047\267\050\u01a7\064\270\001\002\000\040\016\uffe0" +
    "\025\uffe0\032\uffe0\034\uffe0\037\uffe0\042\uffe0\044\uffe0\045" +
    "\uffe0\046\uffe0\051\uffe0\060\uffe0\067\uffe0\070\uffe0\072\uffe0" +
    "\073\uffe0\001\002\000\024\010\265\014\274\035\014\043" +
    "\u01a9\045\074\047\267\050\u01a7\060\102\064\270\001\002" +
    "\000\042\016\uffdb\025\uffdb\032\uffdb\034\uffdb\037\uffdb\042" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\051\uffdb\060\uffdb\067\uffdb" +
    "\070\uffdb\072\uffdb\073\uffdb\074\uffdb\001\002\000\004\070" +
    "\025\001\002\000\040\016\uffe3\025\uffe3\032\uffe3\034\uffe3" +
    "\037\uffe3\042\uffe3\044\uffe3\045\uffe3\046\uffe3\051\uffe3\060" +
    "\uffe3\067\uffe3\070\uffe3\072\uffe3\073\uffe3\001\002\000\040" +
    "\016\345\025\uffe5\032\uffe5\034\uffe5\037\uffe5\042\uffe5\044" +
    "\uffe5\045\uffe5\046\342\051\uffe5\060\uffe5\067\uffe5\070\uffe5" +
    "\072\344\073\341\001\002\000\024\010\265\014\274\035" +
    "\014\043\u01a9\045\074\047\267\050\u01a7\060\102\064\270" +
    "\001\002\000\040\016\uffe1\025\uffe1\032\uffe1\034\uffe1\037" +
    "\uffe1\042\uffe1\044\uffe1\045\uffe1\046\uffe1\051\uffe1\060\uffe1" +
    "\067\uffe1\070\uffe1\072\uffe1\073\uffe1\001\002\000\024\010" +
    "\265\014\274\035\014\043\u01a9\045\074\047\267\050\u01a7" +
    "\060\102\064\270\001\002\000\040\016\uffe2\025\uffe2\032" +
    "\uffe2\034\uffe2\037\uffe2\042\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\051\uffe2\060\uffe2\067\uffe2\070\uffe2\072\uffe2\073\uffe2\001" +
    "\002\000\020\002\uffe8\031\uffe8\035\uffe8\056\uffe8\061\uffe8" +
    "\077\uffe8\102\uffe8\001\002\000\004\067\u01b4\001\002\000" +
    "\042\016\uffdc\025\uffdc\032\uffdc\034\uffdc\037\uffdc\042\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\051\uffdc\060\uffdc\067\uffdc\070" +
    "\uffdc\072\uffdc\073\uffdc\074\uffdc\001\002\000\042\016\uffda" +
    "\025\uffda\032\uffda\034\uffda\037\uffda\042\uffda\044\uffda\045" +
    "\uffda\046\uffda\051\uffda\060\uffda\067\uffda\070\uffda\072\uffda" +
    "\073\uffda\074\uffda\001\002\000\020\010\265\014\274\035" +
    "\014\043\u01a9\047\267\050\u01a7\064\270\001\002\000\040" +
    "\016\uffde\025\uffde\032\uffde\034\uffde\037\uffde\042\uffde\044" +
    "\uffde\045\uffde\046\uffde\051\uffde\060\uffde\067\uffde\070\uffde" +
    "\072\uffde\073\uffde\001\002\000\024\010\265\014\274\035" +
    "\014\043\u01a9\045\074\047\267\050\u01a7\060\102\064\270" +
    "\001\002\000\024\010\265\014\274\035\014\043\u01a9\045" +
    "\074\047\267\050\u01a7\060\102\064\270\001\002\000\012" +
    "\045\337\060\336\067\uffe6\070\uffe6\001\002\000\040\016" +
    "\345\025\uffe4\032\uffe4\034\uffe4\037\uffe4\042\uffe4\044\uffe4" +
    "\045\uffe4\046\342\051\uffe4\060\uffe4\067\uffe4\070\uffe4\072" +
    "\344\073\341\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b9\000\014\003\006\004\005\005\007\012\010\016" +
    "\004\001\001\000\010\017\u019f\020\u01a0\163\u019e\001\001" +
    "\000\004\030\u019b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\210\023\001\001\000\002\001\001\000\004" +
    "\163\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\163\015\174\016\001\001\000\002\001\001\000\004" +
    "\153\020\001\001\000\002\001\001\000\004\163\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\152\025" +
    "\001\001\000\002\001\001\000\012\006\030\007\026\010" +
    "\032\011\031\001\001\000\004\010\u0199\001\001\000\004" +
    "\163\u0197\001\001\000\004\013\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\u0193" +
    "\015\u0192\001\001\000\004\016\036\001\001\000\004\030" +
    "\037\001\001\000\004\053\201\001\001\000\012\031\044" +
    "\032\042\163\043\206\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\045\163\043" +
    "\206\041\001\001\000\002\001\001\000\026\034\055\047" +
    "\071\051\050\052\052\163\047\222\063\226\053\227\070" +
    "\230\065\231\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\034\055\047" +
    "\071\051\050\052\052\163\047\222\177\225\176\226\053" +
    "\227\070\230\065\231\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\035\124\036\123" +
    "\037\122\163\015\174\125\001\001\000\004\152\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\027\076\162\104\163\103\164\102\167\075\170\106" +
    "\171\100\172\107\173\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\163\103\164\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\153\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\027\076\162\104\163\103\164\102\167\075" +
    "\170\106\171\100\172\115\001\001\000\002\001\001\000" +
    "\030\034\055\047\071\051\050\052\052\163\047\222\113" +
    "\223\114\226\053\227\070\230\065\231\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\076\162\117\163\103\164\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\152\164\001\001\000\004\153" +
    "\020\001\001\000\012\040\131\045\130\046\127\163\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\027\076\041\136\042\135" +
    "\043\134\044\140\162\137\163\103\164\102\001\001\000" +
    "\004\153\143\001\001\000\002\001\001\000\004\152\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\027" +
    "\076\042\142\043\134\044\140\162\137\163\103\164\102" +
    "\001\001\000\002\001\001\000\014\027\076\044\156\162" +
    "\137\163\103\164\102\001\001\000\002\001\001\000\014" +
    "\035\147\036\123\037\146\163\015\174\125\001\001\000" +
    "\002\001\001\000\004\152\151\001\001\000\002\001\001" +
    "\000\012\036\153\037\152\163\015\174\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\160\163\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\034\055" +
    "\047\071\051\050\052\052\163\047\222\163\226\053\227" +
    "\070\230\065\231\054\001\001\000\002\001\001\000\012" +
    "\036\153\037\166\163\015\174\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\027\076\050\173\162\104\163\103\164\102\167" +
    "\075\170\106\171\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\034\055\047\071\051\050\052\052\163" +
    "\047\222\113\223\175\226\053\227\070\230\065\231\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\054\u018b\055\u018d\163\015\174\u018c\001\001" +
    "\000\024\056\213\057\214\060\210\061\211\062\206\065" +
    "\203\066\204\165\207\166\202\001\001\000\004\207\u0184" +
    "\001\001\000\002\001\001\000\004\152\u0180\001\001\000" +
    "\002\001\001\000\004\152\u0179\001\001\000\004\207\u0168" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\070\221\071\220\001\001\000\004\152\215" +
    "\001\001\000\020\060\216\061\211\062\206\065\203\066" +
    "\204\165\207\166\202\001\001\000\002\001\001\000\004" +
    "\221\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\015\240\071\237\072\257\073\225\074\224\075\232" +
    "\076\251\077\250\100\254\101\242\102\253\103\233\104" +
    "\234\107\243\110\261\111\235\113\244\114\245\115\246" +
    "\163\226\232\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\200\u0163\001\001\000\004" +
    "\015\u0162\001\001\000\004\233\u015c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\215\u0158\001\001\000\004" +
    "\215\u0157\001\001\000\002\001\001\000\052\027\330\112" +
    "\271\127\u0148\130\360\131\324\132\323\133\321\134\317" +
    "\135\326\136\325\137\276\140\272\141\302\142\327\154" +
    "\361\155\362\156\274\160\312\163\313\232\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\215\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\220\u0140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\027\330" +
    "\112\271\116\u0124\130\u0123\131\324\132\323\133\321\134" +
    "\317\135\326\136\325\137\276\140\272\141\302\142\327" +
    "\156\274\160\312\163\313\232\265\001\001\000\004\215" +
    "\u0122\001\001\000\004\214\u0121\001\001\000\004\233\u0113" +
    "\001\001\000\004\233\u010e\001\001\000\004\152\u010b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\112\271\136\300\137\276\140\272\141\302\156" +
    "\274\160\277\161\301\163\275\205\270\232\265\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\163\305\001\001\000\002\001\001\000\026\112\271" +
    "\136\300\137\276\140\272\141\302\156\274\160\277\161" +
    "\310\163\275\232\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\027\330\112\271\130\320\131\324\132" +
    "\323\133\321\134\317\135\326\136\325\137\276\140\272" +
    "\141\302\142\327\151\322\156\274\160\312\163\313\175" +
    "\314\232\265\001\001\000\002\001\001\000\004\200\u0100" +
    "\001\001\000\004\153\374\001\001\000\030\112\271\135" +
    "\373\136\325\137\276\140\272\141\302\142\327\156\274" +
    "\160\312\163\313\232\265\001\001\000\004\213\357\001" +
    "\001\000\002\001\001\000\004\150\351\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\147\342\001\001\000" +
    "\004\146\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\027\330\112\271\133\331\134" +
    "\317\135\326\136\325\137\276\140\272\141\302\142\327" +
    "\156\274\160\312\163\313\232\265\001\001\000\002\001" +
    "\001\000\032\112\271\134\333\135\326\136\325\137\276" +
    "\140\272\141\302\142\327\156\274\160\312\163\313\232" +
    "\265\001\001\000\002\001\001\000\040\027\330\112\271" +
    "\132\337\133\321\134\317\135\326\136\325\137\276\140" +
    "\272\141\302\142\327\156\274\160\312\163\313\232\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\147" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\027\330\112\271\133\345\134\317\135\326\136\325\137" +
    "\276\140\272\141\302\142\327\156\274\160\312\163\313" +
    "\232\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\027\330\112\271\131\356\132\323\133" +
    "\321\134\317\135\326\136\325\137\276\140\272\141\302" +
    "\142\327\156\274\160\312\163\313\232\265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\146\334\001\001\000\052\027\330\112" +
    "\271\127\363\130\360\131\324\132\323\133\321\134\317" +
    "\135\326\136\325\137\276\140\272\141\302\142\327\154" +
    "\361\155\362\156\274\160\312\163\313\232\265\001\001" +
    "\000\004\150\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\212\366" +
    "\001\001\000\046\027\330\112\271\130\360\131\324\132" +
    "\323\133\321\134\317\135\326\136\325\137\276\140\272" +
    "\141\302\142\327\154\367\156\274\160\312\163\313\232" +
    "\265\001\001\000\002\001\001\000\004\211\371\001\001" +
    "\000\044\027\330\112\271\130\372\131\324\132\323\133" +
    "\321\134\317\135\326\136\325\137\276\140\272\141\302" +
    "\142\327\156\274\160\312\163\313\232\265\001\001\000" +
    "\004\150\351\001\001\000\002\001\001\000\046\027\330" +
    "\112\271\130\320\131\324\132\323\133\321\134\317\135" +
    "\326\136\325\137\276\140\272\141\302\142\327\151\376" +
    "\156\274\160\312\163\313\232\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\027\330\112\271\130\u0102" +
    "\131\324\132\323\133\321\134\317\135\326\136\325\137" +
    "\276\140\272\141\302\142\327\156\274\157\u0101\160\312" +
    "\163\313\204\u0103\232\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\150\351\001\001\000\004\153\u0104" +
    "\001\001\000\046\027\330\112\271\130\u0102\131\324\132" +
    "\323\133\321\134\317\135\326\136\325\137\276\140\272" +
    "\141\302\142\327\156\274\157\u0106\160\312\163\313\232" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\027\330\112\271\130\u0108\131\324\132\323\133\321\134" +
    "\317\135\326\136\325\137\276\140\272\141\302\142\327" +
    "\156\274\160\312\163\313\232\265\001\001\000\004\150" +
    "\351\001\001\000\044\027\330\112\271\130\u010a\131\324" +
    "\132\323\133\321\134\317\135\326\136\325\137\276\140" +
    "\272\141\302\142\327\156\274\160\312\163\313\232\265" +
    "\001\001\000\004\150\351\001\001\000\052\015\240\071" +
    "\237\073\u010d\074\224\075\232\076\251\077\250\100\254" +
    "\101\242\102\253\103\233\104\234\107\243\110\261\111" +
    "\235\113\244\114\245\115\246\163\226\232\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\214\u010f\001" +
    "\001\000\054\015\240\071\237\072\u0110\073\225\074\224" +
    "\075\232\076\251\077\250\100\254\101\242\102\253\103" +
    "\233\104\234\107\243\110\261\111\235\113\244\114\245" +
    "\115\246\163\226\232\247\001\001\000\004\152\u010b\001" +
    "\001\000\052\027\330\112\271\127\u0112\130\360\131\324" +
    "\132\323\133\321\134\317\135\326\136\325\137\276\140" +
    "\272\141\302\142\327\154\361\155\362\156\274\160\312" +
    "\163\313\232\265\001\001\000\002\001\001\000\010\111" +
    "\u0115\163\u0114\232\247\001\001\000\002\001\001\000\004" +
    "\122\u0117\001\001\000\002\001\001\000\046\027\330\112" +
    "\271\126\u011a\130\u0119\131\324\132\323\133\321\134\317" +
    "\135\326\136\325\137\276\140\272\141\302\142\327\156" +
    "\274\160\312\163\313\232\265\001\001\000\002\001\001" +
    "\000\004\150\351\001\001\000\002\001\001\000\004\214" +
    "\u011c\001\001\000\050\015\240\071\237\074\u011d\075\u011e" +
    "\076\251\077\250\100\254\101\242\102\253\103\233\104" +
    "\234\107\243\110\261\111\235\113\244\114\245\115\246" +
    "\163\226\232\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\027\330\112\271\130\u0120\131\324\132\323" +
    "\133\321\134\317\135\326\136\325\137\276\140\272\141" +
    "\302\142\327\156\274\160\312\163\313\232\265\001\001" +
    "\000\004\150\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\150\351\001\001\000\002\001\001\000\022" +
    "\027\076\043\u0126\044\140\117\u0127\120\u0128\162\137\163" +
    "\103\164\102\001\001\000\004\153\143\001\001\000\004" +
    "\152\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\027\076\043\u0126\044\140\120\u012d\121\u012f\162\137" +
    "\163\103\164\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\015\240" +
    "\071\237\073\u0130\074\224\075\232\076\251\077\250\100" +
    "\254\101\242\102\253\103\233\104\234\107\243\110\261" +
    "\111\235\113\244\114\245\115\246\163\226\232\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\214\u0138\001\001\000\052\015\240" +
    "\071\237\073\u0139\074\224\075\232\076\251\077\250\100" +
    "\254\101\242\102\253\103\233\104\234\107\243\110\261" +
    "\111\235\113\244\114\245\115\246\163\226\232\247\001" +
    "\001\000\004\217\u013a\001\001\000\002\001\001\000\050" +
    "\027\330\112\271\130\320\131\324\132\323\133\321\134" +
    "\317\135\326\136\325\137\276\140\272\141\302\142\327" +
    "\151\322\156\274\160\312\163\313\175\u013c\232\265\001" +
    "\001\000\004\153\374\001\001\000\002\001\001\000\044" +
    "\027\330\112\271\130\u013f\131\324\132\323\133\321\134" +
    "\317\135\326\136\325\137\276\140\272\141\302\142\327" +
    "\156\274\160\312\163\313\232\265\001\001\000\004\150" +
    "\351\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\112\271\136\300\137\276\140\272\141\302\156\274\160" +
    "\277\161\301\163\275\205\u0143\232\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\071\237\076\u0146\077" +
    "\u0147\100\254\101\242\102\253\103\233\104\234\107\243" +
    "\110\261\111\235\113\244\114\245\115\246\163\226\232" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\214\u0149\001\001\000\002\001\001\000\052\015\240\071" +
    "\237\073\u014b\074\224\075\u014c\076\251\077\250\100\254" +
    "\101\242\102\253\103\233\104\234\107\243\110\261\111" +
    "\235\113\244\114\245\115\246\163\226\232\247\001\001" +
    "\000\004\216\u0156\001\001\000\004\217\u014d\001\001\000" +
    "\004\215\u014e\001\001\000\002\001\001\000\004\216\u0150" +
    "\001\001\000\050\015\240\071\237\074\u0151\075\u0152\076" +
    "\251\077\250\100\254\101\242\102\253\103\233\104\234" +
    "\107\243\110\261\111\235\113\244\114\245\115\246\163" +
    "\226\232\247\001\001\000\004\217\u0154\001\001\000\004" +
    "\217\u0153\001\001\000\002\001\001\000\004\220\u0155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\112\271\136\300\137\276\140" +
    "\272\141\302\156\274\160\277\161\301\163\275\205\u015a" +
    "\232\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\027\330\112\271\127\u015d\130\360\131\324\132\323" +
    "\133\321\134\317\135\326\136\325\137\276\140\272\141" +
    "\302\142\327\154\361\155\362\156\274\160\312\163\313" +
    "\232\265\001\001\000\002\001\001\000\004\214\u015f\001" +
    "\001\000\050\015\240\071\237\074\u0160\075\u0161\076\251" +
    "\077\250\100\254\101\242\102\253\103\233\104\234\107" +
    "\243\110\261\111\235\113\244\114\245\115\246\163\226" +
    "\232\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\112\271\136\300" +
    "\137\276\140\272\141\302\156\274\160\277\161\301\163" +
    "\275\205\u0165\232\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\177\u0169\001\001\000" +
    "\002\001\001\000\016\163\015\174\u0170\176\u016f\201\u016c" +
    "\202\u016e\203\u016d\001\001\000\006\163\015\174\u0176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\152\u0174\001\001\000\004\153\020\001\001\000" +
    "\026\034\055\047\071\051\050\052\052\163\047\222\u0172" +
    "\226\053\227\070\230\065\231\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\163\015\174\u0170\201\u016c" +
    "\202\u016e\203\u0175\001\001\000\002\001\001\000\004\153" +
    "\020\001\001\000\026\034\055\047\071\051\050\052\052" +
    "\163\047\222\u0178\226\053\227\070\230\065\231\054\001" +
    "\001\000\002\001\001\000\016\006\030\007\026\010\032" +
    "\011\u017c\063\u017e\064\u017b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\030\007\026\010" +
    "\032\011\u0182\063\u0183\067\u0181\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\177\u0185\001" +
    "\001\000\002\001\001\000\030\034\055\047\071\051\050" +
    "\052\052\163\047\222\u0187\224\u0188\226\053\227\070\230" +
    "\065\231\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\034\055\047\071\051\050\052\052\163\047\222" +
    "\u0187\224\u018a\226\053\227\070\230\065\231\054\001\001" +
    "\000\002\001\001\000\004\152\u0190\001\001\000\004\153" +
    "\020\001\001\000\002\001\001\000\026\034\055\047\071" +
    "\051\050\052\052\163\047\222\u018f\226\053\227\070\230" +
    "\065\231\054\001\001\000\002\001\001\000\010\055\u0191" +
    "\163\015\174\u018c\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\152\u0195\153\u0194\001\001\000\004\015\u0196" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\152" +
    "\u0198\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u019c\001\001\000\024\056\u019d\057" +
    "\214\060\210\061\211\062\206\065\203\066\204\165\207" +
    "\166\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\u01a1\163\u019e\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\021\u01aa\022\u01a3\023\u01ac\024\u01ab\025" +
    "\u01a7\026\u01a4\027\u01ad\136\u01a9\137\276\140\272\141\302" +
    "\163\u01a5\001\001\000\006\146\u01b7\150\u01b8\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\026\u01b4\136\u01a9" +
    "\137\276\140\272\141\302\163\u01a5\001\001\000\002\001" +
    "\001\000\032\021\u01b2\022\u01a3\023\u01ac\024\u01ab\025\u01a7" +
    "\026\u01a4\027\u01ad\136\u01a9\137\276\140\272\141\302\163" +
    "\u01a5\001\001\000\002\001\001\000\004\152\u01b1\001\001" +
    "\000\002\001\001\000\004\147\u01af\001\001\000\024\024" +
    "\u01ae\025\u01a7\026\u01a4\027\u01ad\136\u01a9\137\276\140\272" +
    "\141\302\163\u01a5\001\001\000\002\001\001\000\024\024" +
    "\u01b0\025\u01a7\026\u01a4\027\u01ad\136\u01a9\137\276\140\272" +
    "\141\302\163\u01a5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\025\u01b6\026\u01a4\136\u01a9\137\276\140\272\141" +
    "\302\163\u01a5\001\001\000\002\001\001\000\026\023\u01ba" +
    "\024\u01ab\025\u01a7\026\u01a4\027\u01ad\136\u01a9\137\276\140" +
    "\272\141\302\163\u01a5\001\001\000\030\022\u01b9\023\u01ac" +
    "\024\u01ab\025\u01a7\026\u01a4\027\u01ad\136\u01a9\137\276\140" +
    "\272\141\302\163\u01a5\001\001\000\004\146\u01b7\001\001" +
    "\000\004\147\u01af\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PascalParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PascalParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PascalParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public void syntax_error(java_cup.runtime.Symbol cur_token){
		//TokenValue tk = (TokenValue) cur_token.value;
		//if(cur_token.value == null){
			ErrorManager.agregarErrorSintactico(((TokenValue)cur_token.value).getPosLine(),((TokenValue)cur_token.value).getPosChar(),"Error de Sintaxis al leer " + cur_token.value + " esto no va aqui");
			System.out.println("(" + ((TokenValue)cur_token.value).getPosLine() + "," + ((TokenValue)cur_token.value).getPosChar() + "): Error de Sintaxis al leer " + cur_token.value + " esto no va aqui");
	//	}
	//	else{
	//		ErrorManager.agregarErrorSintactico(tk.getPosLine(),tk.getPosChar(),"Error de Sintaxis en simbolo " + tk.toString());
	//		System.out.println("Error de Sintaxis");
	//	}
		//report_fatal_error("Error de Sintaxis", tk);
		done_parsing();
	}


	public static void main(String args[]){
		if(args[0] != null){
			
			try{
			Output.setOutputFile("/home/kreig/test","outtest");
			PascalParser p = new PascalParser(new PascalLexer(new FileReader(args[0])));
			p.debug_parse();			
			}
			catch(Exception e){
				System.out.println(e);
				
			}
			finally{
				Output.close();
			}
		}
	}
	
	public static String a_bitoActual = new String("$root");


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PascalParser$actions {

	
	int contadorparams = 0; /**contador de parametros*/
	SymTab tablaSimbolos = new SymTab(); /**Tabla de Simbolos*/
	SymTab aux = new SymTab(); /**Tablas de simbolos auxiliares*/
	String currScope = new String("global");/**Ambito Actual*/
	String currType = new String();/**Tipo actual*/
	String currFunc = new String();/**Funcion actual*/
	int currAccess = -1; /**Class Access Type*/
	int desplazamiento = 0; /**Desplazamiento del puntero*/
	int pos = 0; /**Posicion del puntero*/
	int temp = 0; /**Temporales*/
	int etiqActual = 0; /**Etiquetas normales*/
	int etiqSig = 0; /**Etiquetas de verdadero false*/
	int etiqInic = 0; /**Etiquetas de ciclos*/
	ArrayList idxListActual = new ArrayList(); /**Lista de indices actual para matrices*/
	int idxActual = 0; /**Indice actual para matrices*/
	ExpAttribute switchExp;/**Atributo del switch*/// == new ExpAttribute();
	BackFill relleno = new BackFill(); /**relleno de retroceso*/	

  private final PascalParser parser;

  /** Constructor */
  CUP$PascalParser$actions(PascalParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PascalParser$do_action(
    int                        CUP$PascalParser$act_num,
    java_cup.runtime.lr_parser CUP$PascalParser$parser,
    java.util.Stack            CUP$PascalParser$stack,
    int                        CUP$PascalParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PascalParser$result;

      /* select the action based on the action number */
      switch (CUP$PascalParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // comma ::= COMMA 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(105/*comma*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // semicolon ::= SEMICOLON 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(104/*semicolon*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // identifier ::= IDENTIFIER 
            {
              TokenValue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 RESULT = id; 
              CUP$PascalParser$result = new java_cup.runtime.Symbol(113/*identifier*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // relop ::= IN 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" IN "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(102/*relop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // relop ::= GE 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" >= "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(102/*relop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // relop ::= LE 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" <= "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(102/*relop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // relop ::= GT 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" > "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(102/*relop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // relop ::= LT 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" < "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(102/*relop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // relop ::= NOTEQUAL 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" != "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(102/*relop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // relop ::= EQUAL 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" == "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(102/*relop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // mulop ::= MOD 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" % "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(101/*mulop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // mulop ::= DIV 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" / "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(101/*mulop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // mulop ::= SLASH 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" / "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(101/*mulop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // mulop ::= STAR 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" * "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(101/*mulop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // addop ::= MINUS 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" - "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(100/*addop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // addop ::= PLUS 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(new String(" + "),SymTab.T_OP); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(100/*addop*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // member_designator ::= expression 
            {
              ExpAttribute RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(99/*member_designator*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // member_designator ::= member_designator DOTDOT expression 
            {
              ExpAttribute RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(99/*member_designator*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // member_designator_list ::= member_designator 
            {
              ExpAttribute RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(98/*member_designator_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // member_designator_list ::= member_designator_list comma member_designator 
            {
              ExpAttribute RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(98/*member_designator_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // set_constructor ::= LBRAC RBRAC 
            {
              ExpAttribute RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(97/*set_constructor*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // set_constructor ::= LBRAC member_designator_list RBRAC 
            {
              ExpAttribute RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(97/*set_constructor*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // rwarg ::= unsigned_constant 
            {
              ExpAttribute RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute c = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 
		//ExpAttribute e = new ExpAttribute(c.toString());
		RESULT = c;
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(111/*rwarg*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // rwarg ::= variable_access 
            {
              ExpAttribute RESULT = null;
		int valeft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute va = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
		RESULT = va;
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(111/*rwarg*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // rwargs ::= rwarg 
            {
              ArrayList RESULT = null;
		int raleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute ra = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
		ArrayList ret = new ArrayList();
		ret.add(ra);
		RESULT = ret;
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(131/*rwargs*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // rwargs ::= rwargs COMMA rwarg 
            {
              ArrayList RESULT = null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList rs = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int raleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int raright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute ra = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 rs.add(ra); RESULT = rs;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(131/*rwargs*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // function_designator ::= identifier params 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
		try{			
			ExpAttribute pe = new ExpAttribute();
			int count = 0;
			IlGen.Symbol symActual = tablaSimbolos.getFunc(id.toString(),currScope);
			//si es funcion, apartamos memoria para valor de retorno y lo devolvemos cmo expAttributte
			if(symActual==null){
				symActual = tablaSimbolos.getFunc(id.toString(),"global");
			}
			if(symActual==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Funcion " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
			}
			if(symActual.getSize() != la.size() && symActual.getSize() != -1){
				ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error: Numero de parametros invalido para la llamada a " + id.toString());
				throw new Exception("Error: Numero de parametros invalido para la llamada");				
			}
			if(symActual.getType().getType() != SymTab.T_VOID){
				

				//pos += desplazamiento;	
				desplazamiento++; // apartamos memoria para el valor de retorno
				count = 1;
				Iterator i = la.iterator();
				ExpAttribute eactual;				
				while(i.hasNext()){
					eactual = (ExpAttribute) i.next();				
					Output.writeLn("t" + temp +" = p + " + count/*s.getPosition()*/ + ";");
    				temp++;
					Output.writeLn("STACK[ t" + (temp - 1) + "] = " + eactual.getCad() +";");// obtenemos
					//desplazamiento ++;
					count ++;
				}			
				//if(!symActual.getScope().equals("global"))
				//	pos += desplazamiento;					
				
				Output.writeLn("p = p + " + count + ";");
				Output.writeLn(symActual.getId() + "();");
				Output.writeLn("p = p - " + count + ";");
				Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
				// push a todos los parametros y les asignamos memoria
    				pe.setCad("t" + temp);
    				temp++;
    				RESULT = pe;
    			}// si es funcion a void no apartamos ni devolvemos nada
    			else{
    				pos += desplazamiento;
				Iterator i = la.iterator();
				ExpAttribute eactual;				
				while(i.hasNext()){
					eactual = (ExpAttribute) i.next();				
					Output.writeLn("t" + temp +" = p + " + count/*s.getPosition()*/ + ";");
    				temp++;			
					Output.writeLn("STACK[ t" + (temp - 1) + "] = " + eactual.getCad() +";");// obtenemos
					//desplazamiento ++;
					count ++;
				}			
				if(!symActual.getScope().equals("global"))
					pos += desplazamiento;					
				Output.writeLn("p = p + " + count + ";");
				Output.writeLn(symActual.getId() + "();");
				Output.writeLn("p = p - " + count + ";");
				Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
				// push a todos los parametros y les asignamos memoria
    				pe.setCad("t" + temp);
    				temp++;
    				RESULT = pe;
    			}    		
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(96/*function_designator*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // unsigned_real ::= REALNUMBER 
            {
              ExpAttribute RESULT = null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue ft = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(ft.toString()),SymTab.T_FLOAT); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(95/*unsigned_real*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // unsigned_integer ::= DIGSEQ 
            {
              ExpAttribute RESULT = null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue ft = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(ft.toString()),SymTab.T_INT); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(94/*unsigned_integer*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // unsigned_number ::= unsigned_real 
            {
              ExpAttribute RESULT = null;
		int enleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute en = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = en;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(93/*unsigned_number*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // unsigned_number ::= unsigned_integer 
            {
              ExpAttribute RESULT = null;
		int enleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute en = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = en;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(93/*unsigned_number*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // unsigned_constant ::= NIL 
            {
              ExpAttribute RESULT = null;
		ExpAttribute pe = new ExpAttribute(null,SymTab.T_VOID); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(92/*unsigned_constant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // unsigned_constant ::= CHARACTER_STRING 
            {
              ExpAttribute RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue st = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		ExpAttribute pe = new ExpAttribute(new String(st.toString()),SymTab.T_STRING); RESULT = pe;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(92/*unsigned_constant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // unsigned_constant ::= unsigned_number 
            {
              ExpAttribute RESULT = null;
		int enleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute en = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = en;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(92/*unsigned_constant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // mark_e1 ::= 
            {
              Object RESULT = null;
		 relleno.nuevaLista();/*Creamos nueva lista de V y F y las asignamos como actual*/
              CUP$PascalParser$result = new java_cup.runtime.Symbol(137/*mark_e1*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // primary ::= NOT primary 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		relleno.invertir();RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(91/*primary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // primary ::= LPAREN mark_e1 boolean_expression RPAREN 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		 /*Fusionamos listas de verdadero y false*/
    					relleno.fusionarListas(); 
    					RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(91/*primary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // primary ::= function_designator 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(91/*primary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // primary ::= unsigned_constant 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(91/*primary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // primary ::= variable_access 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(91/*primary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // exponentiation ::= primary STARSTAR exponentiation 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		TokenValue s = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
     		if(SymTab.tiposCompatibles(e1.getTipo(),e2.getTipo())){
     		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e1.getTipo()); 
     		 Output.writeLn(pe.getCad() + " = " + e1.getCad() + " ^ " + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
     		 }
     		else{
     			ErrorManager.agregarErrorSemantico(s.getPosLine(),s.getPosChar(),"Error: Type Mismatch, Tipo de datos entre operandos de exponenciacion es invalido");
     			throw new Exception("Error: Type Mismatch, Tipo de datos entre operandos de exponenciacion es invalido");
     		}
     	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(90/*exponentiation*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // exponentiation ::= primary 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(90/*exponentiation*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // factor ::= exponentiation 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(89/*factor*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // factor ::= sign factor 
            {
              ExpAttribute RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e2.getTipo()); 
     		 Output.writeLn(pe.getCad() + " = " + "0 - " + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
              CUP$PascalParser$result = new java_cup.runtime.Symbol(89/*factor*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // term ::= term mulop factor 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ExpAttribute op = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
     		if(SymTab.tiposCompatibles(e1.getTipo(),e2.getTipo())){
     		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e1.getTipo()); 
     		 Output.writeLn(pe.getCad() + " = " + e1.getCad() + op.getCad() + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
     		 }
     		else{
     			ErrorManager.agregarErrorSemantico(/*s.getPosLine()*/-1,/*s.getPosChar()*/-1,"Error: Type Mismatch, Tipo de datos entre operandos de multiplicacion es invalido");
     			throw new Exception("Error: Type Mismatch, Tipo de datos entre operandos de multiplicacion es invalido");
     		}
     	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(88/*term*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // term ::= factor 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(88/*term*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // simple_expression ::= simple_expression addop term 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ExpAttribute op = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
     		if(SymTab.tiposCompatibles(e1.getTipo(),e2.getTipo())){
     		 ExpAttribute pe = new ExpAttribute(new String("t" + temp),e1.getTipo()); 
     		 Output.writeLn(pe.getCad() + " = " + e1.getCad() + op.getCad() + e2.getCad() + ";");
     		 temp++;
     		 RESULT = pe; 
     		 }
     		else{
     			ErrorManager.agregarErrorSemantico(/*s.getPosLine()*/-1,/*s.getPosChar()*/-1,"Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     			throw new Exception("Error: Type Mismatch, Tipo de datos entre operandos es invalido");
     		}
     	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(87/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // simple_expression ::= term 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(87/*simple_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expression ::= expression relop simple_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ExpAttribute op = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
     		Output.writeLn("if (" + e1.getCad() + op.getCad() + e2.getCad() + ") goto " + "L" + (etiqActual + 1)+";");
     		Output.writeLn("goto " + "L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		 RESULT = e2; 
     		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(86/*expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expression ::= simple_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(86/*expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // mark_or ::= 
            {
              Object RESULT = null;
		Output.writeLn(relleno.sacarFalsas());
              CUP$PascalParser$result = new java_cup.runtime.Symbol(136/*mark_or*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // mark_and ::= 
            {
              Object RESULT = null;
		Output.writeLn(relleno.sacarVerdaderas());
              CUP$PascalParser$result = new java_cup.runtime.Symbol(135/*mark_and*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // logical_or_expression ::= logical_or_expression OR mark_or logical_and_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 RESULT = e2;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(107/*logical_or_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // logical_or_expression ::= logical_and_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(107/*logical_or_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // logical_and_expression ::= logical_and_expression AND mark_and expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e2 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 RESULT = e2;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(106/*logical_and_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // logical_and_expression ::= expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(106/*logical_and_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // boolean_expression ::= logical_or_expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(85/*boolean_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // record_variable_list ::= variable_access 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(81/*record_variable_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // record_variable_list ::= record_variable_list comma variable_access 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(81/*record_variable_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // final_value ::= expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(84/*final_value*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // direction ::= DOWNTO 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(80/*direction*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // direction ::= TO 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(80/*direction*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // initial_value ::= expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(83/*initial_value*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // control_variable ::= identifier 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
    		ExpAttribute pe = new ExpAttribute();
    		try{
    			
    			IlGen.Symbol s = tablaSimbolos.getVar(new String(id.toString()),currScope);
    			if(s==null){
    				s = tablaSimbolos.getVar(new String(id.toString()),"global");
    			}
    			if(s==null){
    				throw new Exception("Variable " + id.toString() + " no existe");
    			}
    			pe.setTipo(s.getType().getType());
    			if(s.getScope().equals("global")){
    				//devolvemos string con nombre de variable global
    				pe.setCad(new String(s.getId()));
    			}
    			else{	  				// devolvemos pila
    				Output.writeLn("t" + temp +" = " + s.getPosition() + " + " + pos + ";");
    				temp++;
    				Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    				temp++;
    				pe.setCad("t" + (temp - 1));
    			}    			
    			RESULT = pe;
    		}
    		catch(Exception e){
    			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
    			throw(e);
    		}
    		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(82/*control_variable*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // otherwisepart ::= ELSE COLON 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(79/*otherwisepart*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // otherwisepart ::= ELSE 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(79/*otherwisepart*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // otherwisepart ::= OTHERWISE COLON 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(79/*otherwisepart*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // otherwisepart ::= OTHERWISE 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(79/*otherwisepart*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // case_list_element ::= case_constant_list COLON iev statement fef 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(78/*case_list_element*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // case_list_element_list ::= case_list_element 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(77/*case_list_element_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // case_list_element_list ::= case_list_element_list semicolon case_list_element 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(77/*case_list_element_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // case_index ::= expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 switchExp = e;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(76/*case_index*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // case_statement ::= CASE case_index OF case_list_element_list semicolon otherwisepart statement SEMICOLON END 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(75/*case_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // case_statement ::= CASE case_index OF case_list_element_list semicolon otherwisepart statement END 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(75/*case_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // case_statement ::= CASE case_index OF case_list_element_list SEMICOLON END 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(75/*case_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // case_statement ::= CASE case_index OF case_list_element_list END 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(75/*case_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // goto_statement ::= GOTO label 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(74/*goto_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // actual_parameter ::= expression COLON expression COLON expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).value;
		 RESULT  = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(109/*actual_parameter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // actual_parameter ::= expression COLON expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		 RESULT  = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(109/*actual_parameter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // actual_parameter ::= expression 
            {
              ExpAttribute RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 RESULT  = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(109/*actual_parameter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // actual_parameter_list ::= actual_parameter 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		ArrayList ret = new ArrayList(); ret.add(e); RESULT = ret;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(130/*actual_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // actual_parameter_list ::= actual_parameter_list comma actual_parameter 
            {
              ArrayList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList e1 = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 e1.add(e); RESULT = e1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(130/*actual_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // params ::= LPAREN actual_parameter_list RPAREN 
            {
              ArrayList RESULT = null;
		int aplleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int aplright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ArrayList apl = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		RESULT = apl;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(126/*params*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // procedure_statement ::= identifier 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
		try{
			ExpAttribute pe = new ExpAttribute();
			IlGen.Symbol symActual = tablaSimbolos.getFunc(id.toString(),currScope);
			//si es funcion, apartamos memoria para valor de retorno y lo devolvemos cmo expAttributte
			if(symActual==null){
				symActual = tablaSimbolos.getFunc(id.toString(),"global");
			}
			if(symActual==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Funcion " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
			}
			if(symActual.getType().getType() != tablaSimbolos.T_VOID){
				desplazamiento++; // apartamos memoria para el valor de retorno
				Output.writeLn(symActual.getId() + "();");
				Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
    				pe.setCad("t" + temp);
    				temp++;
    				desplazamiento--;
    				RESULT = pe;
    			}// si es funcion a void no apartamos ni devolvemos nada
    			else{
    				Output.writeLn(symActual.getId() + "();");
    				RESULT = null;
    			}
    		
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(73/*procedure_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // procedure_statement ::= READLN LPAREN rwargs RPAREN 
            {
              Object RESULT = null;
		int laleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		
			Output.write("scanf(\"" + Utility.getScanFormat(la) + "\\n\"");        
			Iterator i = la.iterator();
			while(i.hasNext()){
				Output.write(",&");
				Output.write(((ExpAttribute)i.next()).getCad());        	
			}
			Output.writeLn(");");			
			Output.writeLn("STACK[ t" + (temp - 2) +"] = t" + (temp - 1) + ";");
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(73/*procedure_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // procedure_statement ::= READ LPAREN rwargs RPAREN 
            {
              Object RESULT = null;
		int laleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		
			Output.write("scanf(\"" + Utility.getScanFormat(la) + "\"");        
			Iterator i = la.iterator();
			while(i.hasNext()){
				Output.write(",");
				Output.write(((ExpAttribute)i.next()).getCad());        	
			}
			Output.writeLn(");");
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(73/*procedure_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // procedure_statement ::= WRITELN LPAREN rwargs RPAREN 
            {
              Object RESULT = null;
		int laleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		
			Output.write("printf(\"" + Utility.getPrintFormat(la) + "\\n\"");        
			Iterator i = la.iterator();
			while(i.hasNext()){
				Output.write(",");
				Output.write(((ExpAttribute)i.next()).getCad());        	
			}
			Output.writeLn(");");
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(73/*procedure_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // procedure_statement ::= WRITE LPAREN rwargs RPAREN 
            {
              Object RESULT = null;
		int laleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		
			Output.write("printf(\"" + Utility.getPrintFormat(la) + "\"");        
			Iterator i = la.iterator();
			while(i.hasNext()){
				Output.write(",");
				Output.write(((ExpAttribute)i.next()).getCad());        	
			}
			Output.writeLn(");");
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(73/*procedure_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // procedure_statement ::= identifier params 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrayList la = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
		try{			
			ExpAttribute pe = new ExpAttribute();
			int count = 0;
			IlGen.Symbol symActual = tablaSimbolos.getFunc(id.toString(),currScope);
			//si es funcion, apartamos memoria para valor de retorno y lo devolvemos cmo expAttributte
			if(symActual==null){
				symActual = tablaSimbolos.getFunc(id.toString(),"global");
			}
			if(symActual==null){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Funcion " + id.toString() + " no existe");
			throw new Exception("Variable " + id.toString() + " no existe");
			}
			if(symActual.getSize() != la.size() && symActual.getSize() != -1){
				ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),"Error: Numero de parametros invalido para la llamada a " + id.toString());
				throw new Exception("Error: Numero de parametros invalido para la llamada");				
			}
			if(symActual.getType().getType() != SymTab.T_VOID){
				
				//pos += desplazamiento;	
				desplazamiento++; // apartamos memoria para el valor de retorno
				count = 1;
				Iterator i = la.iterator();
				ExpAttribute eactual;				
				while(i.hasNext()){
					eactual = (ExpAttribute) i.next();
					Output.writeLn("t" + temp +" = p + " + count/*s.getPosition()*/ + ";");
    				temp++;
					Output.writeLn("STACK[ t" + (temp - 1) + "] = " + eactual.getCad() +";");// obtenemos
					//desplazamiento ++;
					count ++;
				}			
				//if(!symActual.getScope().equals("global"))
					//pos += desplazamiento;				
				Output.writeLn("p = p + " + count + ";");
				//desplazamiento += count;
				Output.writeLn(symActual.getId() + "();");
				Output.writeLn("p = p - " + count + ";");
				//desplazamiento -= count;
				Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
				// push a todos los parametros y les asignamos memoria
    				pe.setCad("t" + temp);
    				temp++;
    				RESULT = pe;
    			}// si es funcion a void no apartamos ni devolvemos nada
    			else{
    				pos += desplazamiento;
				Iterator i = la.iterator();
				ExpAttribute eactual;				
				while(i.hasNext()){
					eactual = (ExpAttribute) i.next();	
					Output.writeLn("t" + temp +" = p + " + count/*s.getPosition()*/ + ";");
    				temp++;			
					Output.writeLn("STACK[ t" + (temp - 1) + "] = " + eactual.getCad() +";");// obtenemos
					//desplazamiento ++;
					count ++;
				}			
				if(!symActual.getScope().equals("global"))
					pos += desplazamiento;					
				Output.writeLn("p = p + " + count + ";");
				Output.writeLn(symActual.getId() + "();");
				Output.writeLn("p = p - " + count + ";");
				Output.writeLn("t" + temp +" = STACK[p];");// obtenemos valor de retorno				
				// push a todos los parametros y les asignamos memoria
    				pe.setCad("t" + temp);
    				temp++;
    				RESULT = pe;
    			}    		
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(73/*procedure_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // field_designator ::= variable_access DOT identifier 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(72/*field_designator*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // index_expression ::= expression 
            {
              ExpAttribute RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = e;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(103/*index_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // index_expression_list ::= index_expression 
            {
              ArrayList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 
		ArrayList ret = new ArrayList();
		/*temp++;*/ idxActual++;
		ArrElem arrElemActual = (ArrElem) idxListActual.get(idxActual);
		Output.writeLn("t" + temp +" = "+ e.getCad() + " * " + (arrElemActual.getTo() - arrElemActual.getFrom()) + ";");		
		temp++;
		ExpAttribute pe = new ExpAttribute(new String("t" + (temp - 1)),SymTab.C_ARRAY);
		ret.add(pe);
		RESULT = ret;
		//idxListActual ++;
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(123/*index_expression_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // index_expression_list ::= index_expression_list comma index_expression 
            {
              ArrayList RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList re = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute e1 = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 
		/*temp++;*/ idxActual++;
		Output.writeLn("t" + temp +" = " + ((ExpAttribute)re.get(re.size() - 1)).getCad() + " + " + e1.getCad() + ";");
		temp++;
		ArrElem arrElemActual;// = (ArrElem)idxListActual.get(idxActual);
		try{
			arrElemActual = (ArrElem)idxListActual.get(idxActual);
			if(arrElemActual!= null){
				//temp++;
				Output.writeLn("t" + temp +" = " + e1.getCad() + " * " + (arrElemActual.getTo() - arrElemActual.getFrom()) + ";");
				temp++;		
		//	idxActual ++;
			}
			ExpAttribute pe = new ExpAttribute(new String("t" + (temp - 1)),SymTab.C_ARRAY);
			re.add(pe);
			RESULT = re;
		}
		catch(IndexOutOfBoundsException ex1){			
			ExpAttribute pe = new ExpAttribute(new String("t" + (temp - 1)),SymTab.C_ARRAY);
			re.add(pe);
			RESULT = re;
		}
		catch(Exception ex2){
			throw ex2;
		}		
		/*
		ExpAttribute pe = new ExpAttribute(new String("$t" + (temp - 1)),SymTab.C_ARRAY);
		re.add(pe);
		RESULT = re;*/
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(123/*index_expression_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // matrix_head ::= identifier 
            {
              IlGen.Symbol RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
			try{
				IlGen.Symbol symMatActual = tablaSimbolos.getVar(new String(id.toString()),currScope);
				if(symMatActual==null){
    					symMatActual = tablaSimbolos.getVar(new String(id.toString()),"global");
    				}
    				if(symMatActual==null){
    					throw new Exception("Array " + id.toString() + " no existe");
    				}
				idxListActual = (ArrayList) symMatActual.getContents();
				idxActual = 0;
				RESULT = symMatActual;
			}
			catch(Exception e){
				ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
				throw(e);
			}
              CUP$PascalParser$result = new java_cup.runtime.Symbol(152/*matrix_head*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // indexed_variable ::= matrix_head LBRAC index_expression_list RBRAC 
            {
              ExpAttribute RESULT = null;
		int mhleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left;
		int mhright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).right;
		IlGen.Symbol mh = (IlGen.Symbol)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ArrayList re = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		 
		ExpAttribute pe = new ExpAttribute();		
    		try{
    			IlGen.Symbol s = mh;
    			if(s.getScope().equals("global")){
    				//devolvemos string con nombre de variable global
    				pe.setCad(new String(s.getId()));
				pe.setTipo(s.getType().getType());
    			}
    			else{	  				// devolvemos pila
    				Output.writeLn("t" + temp +" = " +((ExpAttribute)re.get(re.size()-1)).getCad() + " + p" + /*pos + */";");
    				temp++;
    				Output.writeLn("t" + temp +" = " +s.getPosition() + " + t" + (temp-1) + ";");
    				temp++;
    				Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    				temp++;
    				pe.setCad("t" + (temp-1));
				pe.setTipo(s.getType().getType());
    			}
    			RESULT = pe;
    		}
    		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(108/*indexed_variable*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // variable_access ::= variable_access UPARROW 
            {
              ExpAttribute RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(110/*variable_access*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // variable_access ::= field_designator 
            {
              ExpAttribute RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(110/*variable_access*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // variable_access ::= indexed_variable 
            {
              ExpAttribute RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute m = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = m;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(110/*variable_access*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variable_access ::= identifier 
            {
              ExpAttribute RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
    		ExpAttribute pe = new ExpAttribute();
    		try{
    			
    			IlGen.Symbol s = tablaSimbolos.getVar(new String(id.toString()),currScope);
    			if(s==null){
    				s = tablaSimbolos.getVar(new String(id.toString()),"global");
    			}
    			if(s==null){
    				throw new Exception("Variable " + id.toString() + " no existe");
    			}
    			pe.setTipo(s.getType().getType());
    			if(s.getScope().equals("global")){
    				//devolvemos string con nombre de variable global
    				pe.setCad(new String(s.getId()));
    			}
    			else{	  				// devolvemos pila
    				Output.writeLn("t" + temp +" = p + " + s.getPosition() + ";");
    				temp++;
    				Output.writeLn("t" + temp +" = STACK[ t" + (temp - 1) + "];");
    				temp++;
    				pe.setCad("t" + (temp - 1));
    			}    			
    			RESULT = pe;
    		}
    		catch(Exception e){
    			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
    			throw(e);
    		}
    		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(110/*variable_access*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // assignment_statement ::= matrix_head LBRAC index_expression_list RBRAC ASSIGNMENT expression 
            {
              Object RESULT = null;
		int mhleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left;
		int mhright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).right;
		IlGen.Symbol mh = (IlGen.Symbol)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).right;
		ArrayList re = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute ex = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 
		ExpAttribute pe = new ExpAttribute();		
    		try{
    			IlGen.Symbol s = mh;
    			if(s.getScope().equals("global")){
    				//devolvemos string con nombre de variable global
    				pe.setCad(new String(s.getId()));
				pe.setTipo(s.getType().getType());
    			}
    			else{	  				// devolvemos pila
    				Output.writeLn("t" + temp +" = " +((ExpAttribute)re.get(re.size()-1)).getCad() + " + p" + /*pos + */";");
    				temp++;
    				Output.writeLn("t" + temp +" = " +s.getPosition() + " + t" + (temp-1) + ";");
    				temp++;
    				Output.writeLn("STACK[ t" + (temp - 1) + "] = "+ ex.getCad() +";");
    				//temp++;
    				pe.setCad("t" + (temp-1));
				pe.setTipo(s.getType().getType());
    			}
    			RESULT = pe;
    		}
    		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(71/*assignment_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // assignment_statement ::= identifier ASSIGNMENT expression 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ExpAttribute ex = (ExpAttribute)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
    		ExpAttribute pe = new ExpAttribute();
    		try{
    			
    			IlGen.Symbol s = tablaSimbolos.getVar(new String(id.toString()),currScope);
    			if(s==null){
    				s = tablaSimbolos.getVar(new String(id.toString()),"global");
    			}
    			if(s==null){
    				throw new Exception("Variable " + id.toString() + " no existe");
    			}
    			pe.setTipo(s.getType().getType());
    			if(s.getScope().equals("global")){
    				//devolvemos string con nombre de variable global
				Output.writeLn(s.getId() + " = "+ ex.getCad() +";");
    				pe.setCad(new String(s.getId()));
    			}
    			else{	  				// devolvemos pila
    				Output.writeLn("t" + temp +" = p + " + s.getPosition() + ";");
    				temp++;
    				Output.writeLn("STACK[ t" + (temp - 1) + "] = "+ ex.getCad() +";");
    				//temp++;
    				pe.setCad("t" + (temp - 1));
    			}    			
    			RESULT = pe;
    		}
    		catch(Exception e){
    			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString());
    			throw(e);
    		}
    		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(71/*assignment_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // write_etiq_sig ::= 
            {
              Object RESULT = null;
		Output.writeLn("Lsig" + (etiqSig)+":"); etiqSig++;	RESULT = new Integer(etiqSig);
              CUP$PascalParser$result = new java_cup.runtime.Symbol(142/*write_etiq_sig*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // fef ::= 
            {
              Object RESULT = null;
		Output.writeLn("goto " + "Lsig" + (etiqSig) + ";");
		//etiqSig++;
		Output.writeLn(relleno.sacarFalsas());
		RESULT = etiqSig;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(141/*fef*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ief ::= 
            {
              Object RESULT = null;
		Output.writeLn(relleno.sacarVerdaderas());
              CUP$PascalParser$result = new java_cup.runtime.Symbol(140/*ief*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // fev ::= 
            {
              Object RESULT = null;
		Output.writeLn(relleno.sacarFalsas());
              CUP$PascalParser$result = new java_cup.runtime.Symbol(139/*fev*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // iev ::= 
            {
              Object RESULT = null;
		Output.writeLn(relleno.sacarVerdaderas());
              CUP$PascalParser$result = new java_cup.runtime.Symbol(138/*iev*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // closed_if_statement ::= IF boolean_expression iev THEN closed_statement fef fev ELSE ief closed_statement fef 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(70/*closed_if_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // open_if_statement ::= IF boolean_expression iev THEN closed_statement fef fev ELSE ief open_statement fef write_etiq_sig 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(69/*open_if_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // open_if_statement ::= IF boolean_expression iev THEN statement ief 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(69/*open_if_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // closed_with_statement ::= WITH record_variable_list DO closed_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(68/*closed_with_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // open_with_statement ::= WITH record_variable_list DO open_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(67/*open_with_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // closed_for_statement ::= FOR p_inic assignment_statement direction final_value DO iev closed_statement 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-6)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-6)).value;
		Output.writeLn("goto " + "LInic" + p.toString() + ";");
              CUP$PascalParser$result = new java_cup.runtime.Symbol(66/*closed_for_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // open_for_statement ::= FOR p_inic assignment_statement direction final_value DO iev open_statement 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-6)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-6)).value;
		Output.writeLn("goto " + "LInic" + p.toString() + ";");
              CUP$PascalParser$result = new java_cup.runtime.Symbol(65/*open_for_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // closed_while_statement ::= WHILE p_inic boolean_expression DO iev closed_statement 
            {
              Object RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).value;
		Output.writeLn("goto " + "LInic" + pe.toString() + ";");
              CUP$PascalParser$result = new java_cup.runtime.Symbol(64/*closed_while_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // open_while_statement ::= WHILE p_inic boolean_expression DO iev open_statement 
            {
              Object RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).value;
		Output.writeLn("goto " + "LInic" + pe.toString() + ";");
              CUP$PascalParser$result = new java_cup.runtime.Symbol(63/*open_while_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // repeat_statement ::= REPEAT p_inic iev statement_sequence UNTIL boolean_expression 
            {
              Object RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).right;
		Integer pe = (Integer)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).value;
		Output.writeLn("goto " + "LInic" + pe.toString() + ";");
              CUP$PascalParser$result = new java_cup.runtime.Symbol(62/*repeat_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // p_inic ::= 
            {
              Integer RESULT = null;
		Output.writeLn("Linic" + (etiqInic) + ":");			
			etiqInic++;
			RESULT = new Integer(etiqInic - 1);
              CUP$PascalParser$result = new java_cup.runtime.Symbol(153/*p_inic*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // non_labeled_open_statement ::= open_for_statement fev 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(61/*non_labeled_open_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // non_labeled_open_statement ::= open_while_statement fev 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(61/*non_labeled_open_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // non_labeled_open_statement ::= open_if_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(61/*non_labeled_open_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // non_labeled_closed_statement ::= 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // non_labeled_closed_statement ::= closed_for_statement fev 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // non_labeled_closed_statement ::= closed_while_statement fev 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // non_labeled_closed_statement ::= closed_if_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // non_labeled_closed_statement ::= repeat_statement iev 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // non_labeled_closed_statement ::= case_statement write_etiq_sig 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // non_labeled_closed_statement ::= compound_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // non_labeled_closed_statement ::= goto_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // non_labeled_closed_statement ::= procedure_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_labeled_closed_statement ::= assignment_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(60/*non_labeled_closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // closed_statement ::= non_labeled_closed_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(59/*closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // closed_statement ::= label COLON non_labeled_closed_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(59/*closed_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // open_statement ::= non_labeled_open_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(58/*open_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // open_statement ::= label COLON non_labeled_open_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(58/*open_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // statement ::= closed_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(57/*statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // statement ::= open_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(57/*statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // statement_sequence ::= statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(56/*statement_sequence*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // statement_sequence ::= statement_sequence semicolon statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(56/*statement_sequence*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // beginmark ::= 
            {
              Object RESULT = null;
		
if(currScope.equals("global")){
		Output.writeLn("void main(){");
}

              CUP$PascalParser$result = new java_cup.runtime.Symbol(143/*beginmark*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // compound_statement ::= PBEGIN beginmark statement_sequence END 
            {
              Object RESULT = null;
		
if(currScope.equals("global")){
		Output.writeLn("}");
}

              CUP$PascalParser$result = new java_cup.runtime.Symbol(55/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // statement_part ::= compound_statement 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(54/*statement_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // function_block ::= block 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(53/*function_block*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // result_type ::= type_denoter 
            {
              DataType RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = dt;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(146/*result_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // function_identification ::= FUNCTION IDENTIFIER 
            {
              TokenValue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		currFunc = new String(id.toString());
			currScope = new String(id.toString()); RESULT = id;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(116/*function_identification*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // function_heading ::= function_identification mrk_func formal_parameter_list COLON result_type 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 
		//if(tablaSimbolos.getFunction(ident.toString(),contadorparams,"global",dt) == null)
		try{	
			Symbol s = tablaSimbolos.addFunction(new String(id.toString()),"global",dt,contadorparams,p,currAccess);
			currFunc = new String(id.toString());
			currScope = new String(id.toString());
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(52/*function_heading*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // function_heading ::= function_identification mrk_func COLON result_type 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 try{			
			Symbol s = tablaSimbolos.addFunction(new String(id.toString()),"global",dt,0,new ArrayList(),currAccess);
			
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(52/*function_heading*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // function_declaration ::= function_heading semicolon function_block 
            {
              Object RESULT = null;
		currScope = new String("global");Output.writeLn("}");
              CUP$PascalParser$result = new java_cup.runtime.Symbol(51/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // function_declaration ::= function_heading semicolon directive 
            {
              Object RESULT = null;
		currScope = new String("global");Output.writeLn("}"); contadorparams = 0;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(51/*function_declaration*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // procedure_block ::= block 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(50/*procedure_block*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // procedure_identification ::= PROCEDURE IDENTIFIER 
            {
              TokenValue RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 /*RESULT = id;*/			currFunc = new String(id.toString());
			currScope = new String(id.toString());  RESULT = id;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(115/*procedure_identification*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // variable_parameter_specification ::= VAR identifier_list COLON type_denoter 
            {
              ArrayList RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		/* dt.setReference(true);  RESULT = new IlGen.Symbol(dt,SymTab.C_VAR); */
 try{
			
			tablaSimbolos.addPointers(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento += il.size();
			RESULT = il;
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString());
			throw(e);
		}	


              CUP$PascalParser$result = new java_cup.runtime.Symbol(127/*variable_parameter_specification*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // value_parameter_specification ::= identifier_list COLON type_denoter 
            {
              ArrayList RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 /* RESULT = new IlGen.Symbol(dt,SymTab.C_VAR); */
		try{
			if (dt.getType() == SymTab.T_INT || dt.getType() == SymTab.T_CHAR || dt.getType() == SymTab.T_FLOAT || dt.getType() == SymTab.T_STRING){
				tablaSimbolos.addVariables(il,currScope,dt,currAccess,desplazamiento);
			}
			desplazamiento += il.size();
			RESULT = il;
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString());
			throw(e);
		}	

              CUP$PascalParser$result = new java_cup.runtime.Symbol(128/*value_parameter_specification*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // formal_parameter_section ::= variable_parameter_specification 
            {
              ArrayList RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrayList v1 = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = v1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(129/*formal_parameter_section*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // formal_parameter_section ::= value_parameter_specification 
            {
              ArrayList RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrayList v1 = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = v1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(129/*formal_parameter_section*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // formal_parameter_section_list ::= formal_parameter_section 
            {
              ArrayList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrayList p1 = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 /*ArrayList res = new ArrayList(); res.add(p1); contadorparams = 1;*/contadorparams = p1.size(); RESULT = p1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(124/*formal_parameter_section_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // formal_parameter_section_list ::= formal_parameter_section_list semicolon formal_parameter_section 
            {
              ArrayList RESULT = null;
		int p1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList p1 = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrayList p2 = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		  p1.addAll(p2);contadorparams = p1.size(); RESULT = p1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(124/*formal_parameter_section_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // formal_parameter_list ::= LPAREN formal_parameter_section_list RPAREN 
            {
              ArrayList RESULT = null;
		int fplsleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int fplsright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		ArrayList fpls = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		RESULT = fpls;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(125/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // directive ::= EXTERNAL 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(49/*directive*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // directive ::= FORWARD 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(49/*directive*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // mrk_func ::= 
            {
              Object RESULT = null;
		
Output.writeLn("void " + currFunc.toString() + "(){");// desplazamiento = 0;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(133/*mrk_func*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // procedure_heading ::= procedure_identification mrk_func formal_parameter_list 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrayList p = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 
		//if(tablaSimbolos.getFunction(ident.toString(),contadorparams,"global",dt) == null)
		try{
			DataType dt = new DataType(SymTab.T_VOID);		
			Symbol s = tablaSimbolos.addFunction(new String(id.toString()),"global",dt,contadorparams,p,currAccess);

		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(48/*procedure_heading*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // procedure_heading ::= procedure_identification mrk_func 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		
		try{
			DataType dt = new DataType(SymTab.T_VOID);
			Symbol s = tablaSimbolos.addFunction(new String(id.toString()),"global",dt,0,new ArrayList(),currAccess);
			currFunc = new String(id.toString());
			currScope = new String(id.toString());
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(id.getPosLine(),id.getPosChar(),e.toString()/*"Error: Funcion " + ident.toString() +" ya definida previamente"*/);
			throw(e);
		}
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(48/*procedure_heading*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // procedure_declaration ::= procedure_heading semicolon procedure_block 
            {
              Object RESULT = null;
		currScope = new String("global");Output.writeLn("}");
              CUP$PascalParser$result = new java_cup.runtime.Symbol(47/*procedure_declaration*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // procedure_declaration ::= procedure_heading semicolon directive 
            {
              Object RESULT = null;
		currScope = new String("global");Output.writeLn("}"); contadorparams = 0;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(47/*procedure_declaration*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // proc_or_func_declaration ::= function_declaration 
            {
              Object RESULT = null;
		desplazamiento = 0;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(46/*proc_or_func_declaration*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // proc_or_func_declaration ::= procedure_declaration 
            {
              Object RESULT = null;
		desplazamiento = 0;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(46/*proc_or_func_declaration*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // proc_or_func_declaration_list ::= proc_or_func_declaration 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(45/*proc_or_func_declaration_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // proc_or_func_declaration_list ::= proc_or_func_declaration_list semicolon proc_or_func_declaration 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(45/*proc_or_func_declaration_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // procedure_and_function_declaration_part ::= 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(44/*procedure_and_function_declaration_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // procedure_and_function_declaration_part ::= proc_or_func_declaration_list semicolon 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(44/*procedure_and_function_declaration_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variable_declaration ::= identifier_list COLON type_denoter 
            {
              Object RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList il = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
		try{
			IlGen.Symbol s = tablaSimbolos.addVariables(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento += il.size();			
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString());
			throw(e);
		}
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(43/*variable_declaration*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable_declaration_list ::= variable_declaration 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(42/*variable_declaration_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable_declaration_list ::= variable_declaration_list semicolon variable_declaration 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(42/*variable_declaration_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable_declaration_part ::= 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(41/*variable_declaration_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable_declaration_part ::= VAR variable_declaration_list semicolon 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(41/*variable_declaration_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // domain_type ::= type_denoter 
            {
              DataType RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = dt;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(147/*domain_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // new_pointer_type ::= UPARROW domain_type 
            {
              Object RESULT = null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 try{
			ArrayList il = new ArrayList();
			il.add(new String(currType));
			IlGen.Symbol s = tablaSimbolos.addPointers(il,currScope,dt,currAccess,desplazamiento);
			desplazamiento += il.size();
			
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(0,0,e.toString());
			throw(e);
		}
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(40/*new_pointer_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // file_type ::= PFILE OF component_type 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(39/*file_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // base_type ::= ordinal_type 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(38/*base_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // set_type ::= SET OF base_type 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(37/*set_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tag_type ::= identifier 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(36/*tag_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tag_field ::= identifier 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(35/*tag_field*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_constant ::= constant 
            {
              Object RESULT = null;
		int c2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue c2 = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 Output.writeLn(" if (" + switchExp.getCad() + " == " + c2.toString() + ") goto L" + (etiqActual + 1)+";");
     		Output.writeLn("goto L" + (etiqActual + 2)+";");
     		relleno.insertarTrue(etiqActual + 1); /*Insertamos a listado de etiquetas en relleno*/
     		relleno.insertarFalse(etiqActual + 2); 
     		etiqActual += 2; /*Aumentamos etiquetas*/
     		RESULT = new ExpAttribute(); 
     		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(34/*case_constant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_constant_list ::= case_constant 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(33/*case_constant_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_constant_list ::= case_constant_list comma case_constant 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(33/*case_constant_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variant ::= case_constant_list COLON LPAREN variant_part RPAREN 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(32/*variant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variant ::= case_constant_list COLON LPAREN record_section_list semicolon variant_part RPAREN 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(32/*variant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variant ::= case_constant_list COLON LPAREN record_section_list RPAREN 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(32/*variant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variant_list ::= variant 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(31/*variant_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variant_list ::= variant_list semicolon variant 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(31/*variant_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variant_selector ::= tag_type 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(30/*variant_selector*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variant_selector ::= tag_field COLON tag_type 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(30/*variant_selector*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variant_part ::= 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(29/*variant_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variant_part ::= CASE variant_selector OF variant_list 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(29/*variant_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variant_part ::= CASE variant_selector OF variant_list semicolon 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(29/*variant_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // record_section ::= identifier_list COLON type_denoter 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(28/*record_section*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // record_section_list ::= record_section 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(27/*record_section_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // record_section_list ::= record_section_list semicolon record_section 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(27/*record_section_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // record_type ::= RECORD variant_part END 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(26/*record_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // record_type ::= RECORD record_section_list semicolon variant_part END 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(26/*record_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // record_type ::= RECORD record_section_list END 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(26/*record_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // component_type ::= type_denoter 
            {
              DataType RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType td = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = td;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(145/*component_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ordinal_type ::= new_ordinal_type 
            {
              ArrElem RESULT = null;
		int notleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrElem not = (ArrElem)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = not;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(119/*ordinal_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // index_type ::= ordinal_type 
            {
              ArrElem RESULT = null;
		int otleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrElem ot = (ArrElem)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = ot;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(120/*index_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // index_list ::= index_type 
            {
              ArrayList RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrElem r = (ArrElem)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		ArrayList res = new ArrayList(); res.add(r); RESULT = res;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(121/*index_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // index_list ::= index_list comma index_type 
            {
              ArrayList RESULT = null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList rl = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrElem r = (ArrElem)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		rl.add(r); RESULT = rl;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(121/*index_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // array_type ::= ARRAY LBRAC index_list RBRAC OF component_type 
            {
              DataType RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).right;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).right;
		ArrayList rl = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType dt = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
			
		try{
			 
			IlGen.Symbol s = tablaSimbolos.addArray(new String(currType.toString()),rl,currScope,dt,currAccess,desplazamiento);
			Iterator i = rl.iterator();
			ArrElem aractual;
			int sizeActual = 1;
			while(i.hasNext()){
				aractual = (ArrElem)(i.next());
				sizeActual *= aractual.getFrom() - aractual.getTo();				
			}
			if(!currScope.equals("global"))
				desplazamiento += sizeActual;//s.getSize() + 1;
			s.setSize(sizeActual);
			RESULT = new DataType(SymTab.C_ARRAY);
		}
		catch(Exception e){
			ErrorManager.agregarErrorSemantico(a.getPosLine(),a.getPosChar(),e.toString());
			throw(e);
		}
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(150/*array_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // structured_type ::= file_type 
            {
              DataType RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(149/*structured_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // structured_type ::= set_type 
            {
              DataType RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(149/*structured_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // structured_type ::= record_type 
            {
              DataType RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(149/*structured_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // structured_type ::= array_type 
            {
              DataType RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType a = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = a;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(149/*structured_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // new_structured_type ::= structured_type 
            {
              DataType RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType s = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = s;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(148/*new_structured_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // subrange_type ::= constant DOTDOT constant 
            {
              ArrElem RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		TokenValue c1 = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue c2 = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		ArrElem ar = new ArrElem(c1.toInt(),c2.toInt()); RESULT = ar;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(117/*subrange_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // new_ordinal_type ::= subrange_type 
            {
              ArrElem RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		ArrElem st = (ArrElem)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 RESULT = st;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(118/*new_ordinal_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // new_ordinal_type ::= 
            {
              ArrElem RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(118/*new_ordinal_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // new_type ::= new_pointer_type 
            {
              DataType RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(151/*new_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // new_type ::= new_structured_type 
            {
              DataType RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType s = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = s;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(151/*new_type*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type_denoter ::= CHAR 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_CHAR);
              CUP$PascalParser$result = new java_cup.runtime.Symbol(144/*type_denoter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type_denoter ::= STRING 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_STRING);
              CUP$PascalParser$result = new java_cup.runtime.Symbol(144/*type_denoter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type_denoter ::= REAL 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_FLOAT);
              CUP$PascalParser$result = new java_cup.runtime.Symbol(144/*type_denoter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // type_denoter ::= INTEGER 
            {
              DataType RESULT = null;
		 RESULT = new DataType(SymTab.T_INT);
              CUP$PascalParser$result = new java_cup.runtime.Symbol(144/*type_denoter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_denoter ::= new_type 
            {
              DataType RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		DataType s = (DataType)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = s;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(144/*type_denoter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_denoter ::= identifier 
            {
              DataType RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		 RESULT = new DataType(new String(id.toString()),true,tablaSimbolos.getSize(id.toString()));
              CUP$PascalParser$result = new java_cup.runtime.Symbol(144/*type_denoter*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // td_head ::= identifier 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		
	currType = new String(id.toString());
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(132/*td_head*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_definition ::= td_head EQUAL type_denoter semicolon 
            {
              Object RESULT = null;
		 currType = new String();
              CUP$PascalParser$result = new java_cup.runtime.Symbol(24/*type_definition*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_definition_list ::= type_definition 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(23/*type_definition_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_definition_list ::= type_definition_list type_definition 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(23/*type_definition_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_definition_part ::= 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(22/*type_definition_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_definition_part ::= TYPE type_definition_list 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(22/*type_definition_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // non_string ::= REALNUMBER 
            {
              TokenValue RESULT = null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue dg = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = dg;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(114/*non_string*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // non_string ::= identifier 
            {
              TokenValue RESULT = null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue dg = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = dg;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(114/*non_string*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sign ::= MINUS 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(21/*sign*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sign ::= PLUS 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(21/*sign*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // constant ::= CHARACTER_STRING 
            {
              TokenValue RESULT = null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue ns = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = ns;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(112/*constant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // constant ::= sign non_string 
            {
              TokenValue RESULT = null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue ns = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = ns;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(112/*constant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // constant ::= non_string 
            {
              TokenValue RESULT = null;
		int nsleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int nsright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue ns = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		RESULT = ns;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(112/*constant*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cprimary ::= NOT cprimary 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(20/*cprimary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cprimary ::= unsigned_constant 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(20/*cprimary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cprimary ::= LPAREN cexpression RPAREN 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(20/*cprimary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cprimary ::= identifier 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(20/*cprimary*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cexponentiation ::= cprimary STARSTAR cexponentiation 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(19/*cexponentiation*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cexponentiation ::= cprimary 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(19/*cexponentiation*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cfactor ::= cexponentiation 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(18/*cfactor*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cfactor ::= sign cfactor 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(18/*cfactor*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cterm ::= cterm mulop cfactor 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(17/*cterm*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cterm ::= cfactor 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(17/*cterm*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // csimple_expression ::= csimple_expression addop cterm 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(16/*csimple_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // csimple_expression ::= cterm 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(16/*csimple_expression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cexpression ::= csimple_expression relop csimple_expression 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(15/*cexpression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cexpression ::= csimple_expression 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(15/*cexpression*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // constant_definition ::= identifier EQUAL cexpression semicolon 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(14/*constant_definition*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // constant_list ::= constant_definition 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(13/*constant_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constant_list ::= constant_list constant_definition 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(13/*constant_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant_definition_part ::= 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(12/*constant_definition_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant_definition_part ::= CONST constant_list 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(12/*constant_definition_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // label ::= DIGSEQ 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(11/*label*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // label_list ::= label 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(10/*label_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // label_list ::= label_list comma label 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(10/*label_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // label_declaration_part ::= 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(9/*label_declaration_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // label_declaration_part ::= LABEL label_list semicolon 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(9/*label_declaration_part*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // module ::= constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(8/*module*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block ::= uses_clause_list_opt label_declaration_part constant_definition_part type_definition_part variable_declaration_part procedure_and_function_declaration_part statement_part 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(7/*block*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // identifier_list ::= identifier 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		ArrayList res = new ArrayList(); res.add(new String(id.toString())); RESULT = res; currType = new String(id.toString());
              CUP$PascalParser$result = new java_cup.runtime.Symbol(122/*identifier_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // identifier_list ::= identifier_list comma identifier 
            {
              ArrayList RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).right;
		ArrayList id1 = (ArrayList)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right;
		TokenValue id2 = (TokenValue)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).value;
		id1.add(id2.toString()); RESULT = id1;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(122/*identifier_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // uses_clause ::= USES identifier semicolon 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(6/*uses_clause*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // uses_clause_list ::= uses_clause 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(5/*uses_clause_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // uses_clause_list ::= uses_clause_list uses_clause 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(5/*uses_clause_list*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // uses_clause_list_opt ::= uses_clause_list 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(4/*uses_clause_list_opt*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // uses_clause_list_opt ::= 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(4/*uses_clause_list_opt*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_heading ::= PROGRAM identifier LPAREN identifier_list RPAREN 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(3/*program_heading*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_heading ::= PROGRAM identifier 
            {
              Object RESULT = null;
		
              CUP$PascalParser$result = new java_cup.runtime.Symbol(3/*program_heading*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // init_decl ::= 
            {
              Object RESULT = null;
		 //Agregamos funciones printf, pcanf, free. tc
		DataType dt;
		Symbol s;
		dt = new DataType(SymTab.T_INT);
		s = tablaSimbolos.addFunction(new String("writeln"),"global",dt,-1,null,-1);
		dt = new DataType(SymTab.T_STRING);
		s = tablaSimbolos.addFunction(new String("readln"),"global",dt,-1,null,-1);
		dt = new DataType(SymTab.T_INT);
		s = tablaSimbolos.addFunction(new String("write"),"global",dt,-1,null,-1);
		dt = new DataType(SymTab.T_STRING);
		s = tablaSimbolos.addFunction(new String("read"),"global",dt,-1,null,-1);
		Output.writeHeader();
			
	
              CUP$PascalParser$result = new java_cup.runtime.Symbol(134/*init_decl*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= program_heading init_decl semicolon block DOT 
            {
              Object RESULT = null;
		 Output.createHeader(temp,tablaSimbolos);
              CUP$PascalParser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file ::= module 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(1/*file*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= program 
            {
              Object RESULT = null;

              CUP$PascalParser$result = new java_cup.runtime.Symbol(1/*file*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          return CUP$PascalParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).value;
		RESULT = start_val;
              CUP$PascalParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PascalParser$stack.elementAt(CUP$PascalParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PascalParser$parser.done_parsing();
          return CUP$PascalParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

